import type { operations } from '../types/api';
import type { OpErrorType, OpReturnType } from '../types/api-helpers';
import type { Agent } from 'node:https';
type BatchPackageFetchResultType = SocketSdkResultType<'batchPackageFetch'>;
type BatchPackageStreamOptions = {
    chunkSize: number;
    concurrencyLimit: number;
};
export type SocketSdkOperations = keyof operations;
export type SocketSdkReturnType<T extends SocketSdkOperations> = OpReturnType<operations[T]>;
export type SocketSdkErrorType<T extends SocketSdkOperations> = Omit<OpErrorType<operations[T]>, 'error'> & {
    error: string;
};
export type SocketSdkResultType<T extends SocketSdkOperations> = SocketSdkReturnType<T> | SocketSdkErrorType<T>;
export interface SocketSdkOptions {
    agent?: Agent | {
        http?: Agent | undefined;
        https?: Agent | undefined;
        http2?: Agent | undefined;
    } | undefined;
    baseUrl?: string | undefined;
    userAgent?: string | undefined;
}
/**
 * Package.json data to base the User-Agent on
 */
export declare function createUserAgentFromPkgJson(pkgData: {
    name: string;
    version: string;
    homepage?: string | undefined;
}): string;
export declare class SocketSdk {
    #private;
    /**
     * @throws {SocketSdkAuthError}
     */
    constructor(apiToken: string, options?: SocketSdkOptions | undefined);
    batchPackageFetch(queryParams: Record<string, string> | null | undefined, componentsObj: {
        components: Array<{
            purl: string;
        }>;
    }): Promise<BatchPackageFetchResultType>;
    batchPackageStream(queryParams: Record<string, string> | null | undefined, componentsObj: {
        components: Array<{
            purl: string;
        }>;
    }, options?: BatchPackageStreamOptions | undefined): AsyncGenerator<BatchPackageFetchResultType>;
    createDependenciesSnapshot(params: Record<string, string>, filepaths: string[], pathsRelativeTo?: string): Promise<SocketSdkResultType<'createDependenciesSnapshot'>>;
    createOrgFullScan(orgSlug: string, queryParams: Record<string, string> | null | undefined, filepaths: string[], pathsRelativeTo?: string): Promise<SocketSdkResultType<'CreateOrgFullScan'>>;
    createOrgRepo(orgSlug: string, params: Record<string, string>): Promise<SocketSdkResultType<'createOrgRepo'>>;
    createReportFromFilepaths(filepaths: string[], pathsRelativeTo?: string, issueRules?: Record<string, boolean>): Promise<SocketSdkResultType<'createReport'>>;
    createReportFromFilePaths(filepaths: string[], pathsRelativeTo?: string, issueRules?: Record<string, boolean>): Promise<SocketSdkResultType<'createReport'>>;
    deleteOrgFullScan(orgSlug: string, fullScanId: string): Promise<SocketSdkResultType<'deleteOrgFullScan'>>;
    deleteOrgRepo(orgSlug: string, repoSlug: string): Promise<SocketSdkResultType<'deleteOrgRepo'>>;
    getAuditLogEvents(orgSlug: string, queryParams?: Record<string, string> | null | undefined): Promise<SocketSdkResultType<'getAuditLogEvents'>>;
    getIssuesByNPMPackage(pkgName: string, version: string): Promise<SocketSdkResultType<'getIssuesByNPMPackage'>>;
    getOrgAnalytics(time: string): Promise<SocketSdkResultType<'getOrgAnalytics'>>;
    getOrganizations(): Promise<SocketSdkResultType<'getOrganizations'>>;
    getOrgFullScan(orgSlug: string, fullScanId: string, file?: string): Promise<SocketSdkResultType<'getOrgFullScan'>>;
    getOrgFullScanList(orgSlug: string, queryParams?: Record<string, string> | null | undefined): Promise<SocketSdkResultType<'getOrgFullScanList'>>;
    getOrgFullScanMetadata(orgSlug: string, fullScanId: string): Promise<SocketSdkResultType<'getOrgFullScanMetadata'>>;
    getOrgLicensePolicy(orgSlug: string): Promise<SocketSdkResultType<'getOrgLicensePolicy'>>;
    getOrgRepo(orgSlug: string, repoSlug: string): Promise<SocketSdkResultType<'getOrgRepo'>>;
    getOrgRepoList(orgSlug: string, queryParams?: Record<string, string> | null | undefined): Promise<SocketSdkResultType<'getOrgRepoList'>>;
    getOrgSecurityPolicy(orgSlug: string): Promise<SocketSdkResultType<'getOrgSecurityPolicy'>>;
    getQuota(): Promise<SocketSdkResultType<'getQuota'>>;
    getRepoAnalytics(repo: string, time: string): Promise<SocketSdkResultType<'getRepoAnalytics'>>;
    getReport(id: string): Promise<SocketSdkResultType<'getReport'>>;
    getReportList(): Promise<SocketSdkResultType<'getReportList'>>;
    getReportSupportedFiles(): Promise<SocketSdkResultType<'getReportSupportedFiles'>>;
    getScoreByNPMPackage(pkgName: string, version: string): Promise<SocketSdkResultType<'getScoreByNPMPackage'>>;
    postSettings(selectors: Array<{
        organization?: string;
    }>): Promise<SocketSdkResultType<'postSettings'>>;
    searchDependencies(params: Record<string, number>): Promise<SocketSdkResultType<'searchDependencies'>>;
    updateOrgRepo(orgSlug: string, repoSlug: string, params: Record<string, string>): Promise<SocketSdkResultType<'updateOrgRepo'>>;
}
export {};
//# sourceMappingURL=index.d.ts.map