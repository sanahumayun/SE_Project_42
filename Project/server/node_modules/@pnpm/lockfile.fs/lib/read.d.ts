import { type LockfileObject } from '@pnpm/lockfile.types';
import { type ProjectId } from '@pnpm/types';
export declare function readCurrentLockfile(virtualStoreDir: string, opts: {
    wantedVersions?: string[];
    ignoreIncompatible: boolean;
}): Promise<LockfileObject | null>;
export declare function readWantedLockfileAndAutofixConflicts(pkgPath: string, opts: {
    wantedVersions?: string[];
    ignoreIncompatible: boolean;
    useGitBranchLockfile?: boolean;
    mergeGitBranchLockfiles?: boolean;
}): Promise<{
    lockfile: LockfileObject | null;
    hadConflicts: boolean;
}>;
export declare function readWantedLockfile(pkgPath: string, opts: {
    wantedVersions?: string[];
    ignoreIncompatible: boolean;
    useGitBranchLockfile?: boolean;
    mergeGitBranchLockfiles?: boolean;
}): Promise<LockfileObject | null>;
export declare function createLockfileObject(importerIds: ProjectId[], opts: {
    lockfileVersion: string;
    autoInstallPeers: boolean;
    excludeLinksFromLockfile: boolean;
    peersSuffixMaxLength: number;
}): LockfileObject;
