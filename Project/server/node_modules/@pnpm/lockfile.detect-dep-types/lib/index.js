"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DepType = void 0;
exports.detectDepTypes = detectDepTypes;
const dp = __importStar(require("@pnpm/dependency-path"));
var DepType;
(function (DepType) {
    DepType[DepType["DevOnly"] = 0] = "DevOnly";
    DepType[DepType["DevAndProd"] = 1] = "DevAndProd";
    DepType[DepType["ProdOnly"] = 2] = "ProdOnly";
})(DepType || (exports.DepType = DepType = {}));
function detectDepTypes(lockfile) {
    const dev = {};
    const devDepPaths = Object.values(lockfile.importers)
        .map((deps) => resolvedDepsToDepPaths(deps.devDependencies ?? {})).flat();
    const optionalDepPaths = Object.values(lockfile.importers)
        .map((deps) => resolvedDepsToDepPaths(deps.optionalDependencies ?? {})).flat();
    const prodDepPaths = Object.values(lockfile.importers)
        .map((deps) => resolvedDepsToDepPaths(deps.dependencies ?? {})).flat();
    const ctx = {
        packages: lockfile.packages ?? {},
        walked: new Set(),
        notProdOnly: new Set(),
        dev,
    };
    detectDepTypesInSubGraph(ctx, devDepPaths, {
        dev: true,
    });
    detectDepTypesInSubGraph(ctx, optionalDepPaths, {
        dev: false,
    });
    detectDepTypesInSubGraph(ctx, prodDepPaths, {
        dev: false,
    });
    return dev;
}
function detectDepTypesInSubGraph(ctx, depPaths, opts) {
    for (const depPath of depPaths) {
        const key = `${depPath}:${opts.dev.toString()}`;
        if (ctx.walked.has(key))
            continue;
        ctx.walked.add(key);
        if (!ctx.packages[depPath]) {
            continue;
        }
        if (opts.dev) {
            ctx.notProdOnly.add(depPath);
            ctx.dev[depPath] = DepType.DevOnly;
        }
        else if (ctx.dev[depPath] === DepType.DevOnly) { // keeping if dev is explicitly false
            ctx.dev[depPath] = DepType.DevAndProd;
        }
        else if (ctx.dev[depPath] === undefined && !ctx.notProdOnly.has(depPath)) {
            ctx.dev[depPath] = DepType.ProdOnly;
        }
        const depLockfile = ctx.packages[depPath];
        const newDependencies = resolvedDepsToDepPaths(depLockfile.dependencies ?? {});
        detectDepTypesInSubGraph(ctx, newDependencies, opts);
        const newOptionalDependencies = resolvedDepsToDepPaths(depLockfile.optionalDependencies ?? {});
        detectDepTypesInSubGraph(ctx, newOptionalDependencies, { dev: opts.dev });
    }
}
function resolvedDepsToDepPaths(deps) {
    return Object.entries(deps)
        .map(([alias, ref]) => dp.refToRelative(ref, alias))
        .filter((depPath) => depPath !== null);
}
//# sourceMappingURL=index.js.map