import config from '@socketsecurity/config'
interface LocalConfig {
  apiBaseUrl?: string | null | undefined
  apiKey?: string | null | undefined
  apiProxy?: string | null | undefined
  apiToken?: string | null | undefined
  defaultOrg?: string
  enforcedOrgs?: string[] | readonly string[] | null | undefined
}
declare const supportedConfigKeys: Map<keyof LocalConfig, string>
declare const sensitiveConfigKeys: Set<keyof LocalConfig>
declare function overrideCachedConfig(jsonConfig: unknown):
  | {
      ok: true
      message: undefined
    }
  | {
      ok: false
      message: string
    }
declare function overrideConfigApiToken(apiToken: unknown): void
declare function findSocketYmlSync(dir?: string): {
  path: string
  parsed: config.SocketYml
} | null
declare function getConfigValue<Key extends keyof LocalConfig>(
  key: Key
): LocalConfig[Key]
declare function isReadOnlyConfig(): boolean
declare function updateConfigValue<Key extends keyof LocalConfig>(
  key: keyof LocalConfig,
  value: LocalConfig[Key]
): void
export {
  LocalConfig,
  supportedConfigKeys,
  sensitiveConfigKeys,
  overrideCachedConfig,
  overrideConfigApiToken,
  findSocketYmlSync,
  getConfigValue,
  isReadOnlyConfig,
  updateConfigValue
}
