'use strict'

function _socketInterop(e) {
  let c = 0
  for (const k in e ?? {}) {
    c = c === 0 && k === 'default' ? 1 : 0
    if (!c && k !== '__esModule') {
      break
    }
  }
  return c ? e.default : e
}

const process$1 = require('node:process')
const node_url = require('node:url')
const ponyCause = _socketInterop(require('pony-cause'))
const updateNotifier = _socketInterop(require('tiny-updater'))
const logger = require('@socketsecurity/registry/lib/logger')
const assert = require('node:assert')
const fs = require('node:fs/promises')
const commonTags = _socketInterop(require('common-tags'))
const debug = require('@socketsecurity/registry/lib/debug')
const strings = require('@socketsecurity/registry/lib/strings')
const shadowNpmInject = require('./shadow-npm-inject.js')
const constants = require('./constants.js')
const colors = _socketInterop(require('yoctocolors-cjs'))
const path$1 = require('node:path')
const meow = _socketInterop(require('meow'))
const objects = require('@socketsecurity/registry/lib/objects')
const path = require('@socketsecurity/registry/lib/path')
const regexps = require('@socketsecurity/registry/lib/regexps')
const yargsParse = _socketInterop(require('yargs-parser'))
const words = require('@socketsecurity/registry/lib/words')
const fs$1 = require('node:fs')
const shadowBin = require('./shadow-bin.js')
const prompts = require('@socketsecurity/registry/lib/prompts')
const chalkTable = _socketInterop(require('chalk-table'))
const util = require('node:util')
const registry = require('@socketsecurity/registry')
const npm = require('@socketsecurity/registry/lib/npm')
const packages = require('@socketsecurity/registry/lib/packages')
const rest = _socketInterop(require('@octokit/rest'))
const lockfile_fs = _socketInterop(require('@pnpm/lockfile.fs'))
const spawn = require('@socketsecurity/registry/lib/spawn')
const lockfile_detectDepTypes = _socketInterop(
  require('@pnpm/lockfile.detect-dep-types')
)
const shadowNpmPaths = require('./shadow-npm-paths.js')
const browserslist = _socketInterop(require('browserslist'))
const semver = _socketInterop(require('semver'))
const which = _socketInterop(require('which'))
const index_cjs = require('@socketregistry/hyrious__bun.lockb/index.cjs')
const sorts = require('@socketsecurity/registry/lib/sorts')
const registryConstants = require('@socketsecurity/registry/lib/constants')
const isInteractive = require('@socketregistry/is-interactive/index.cjs')
const terminalLink = _socketInterop(require('terminal-link'))
const npa = _socketInterop(require('npm-package-arg'))
const tinyglobby = _socketInterop(require('tinyglobby'))
const promises = require('@socketsecurity/registry/lib/promises')
const yaml = _socketInterop(require('yaml'))
const open = _socketInterop(require('open'))

function failMsgWithBadge(badge, msg) {
  return `${colors.bgRed(colors.bold(colors.white(` ${badge}: `)))} ${colors.bold(msg)}`
}

function handleUnsuccessfulApiResponse(_name, sockSdkError) {
  const message = sockSdkError.error || 'No error message returned'
  const { status } = sockSdkError
  if (status === 401 || status === 403) {
    // Lazily access constants.spinner.
    const { spinner } = constants
    spinner.stop()
    throw new shadowNpmInject.AuthError(message)
  }
  logger.logger.fail(failMsgWithBadge('Socket API returned an error', message))
   
  process$1.exit(1)
}
async function handleApiCall(value, description) {
  let result
  try {
    result = await value
  } catch (e) {
    debug.debugLog(`handleApiCall[${description}] error:\n`, e)
    throw new Error(`Failed ${description}`, {
      cause: e
    })
  }
  return result
}
async function handleApiError(code) {
  if (code === 400) {
    return 'One of the options passed might be incorrect'
  }
  if (code === 403) {
    return 'Your API token may not have the required permissions for this command or you might be trying to access (data from) an organization that is not linked to the API key you are logged in with'
  }
  if (code === 404) {
    return 'The requested Socket API endpoint was not found (404) or there was no result for the requested parameters. This could be a temporary problem caused by an incident or a bug in the CLI. If the problem persists please let us know.'
  }
  return `Server responded with status code ${code}`
}
function getLastFiveOfApiToken(token) {
  // Get the last 5 characters of the API token before the trailing "_api".
  return token.slice(-9, -4)
}

// The API server that should be used for operations.
function getDefaultApiBaseUrl() {
  const baseUrl =
    process$1.env['SOCKET_SECURITY_API_BASE_URL'] ||
    shadowNpmInject.getConfigValue('apiBaseUrl')
  if (strings.isNonEmptyString(baseUrl)) {
    return baseUrl
  }
  // Lazily access constants.API_V0_URL.
  const API_V0_URL = constants.API_V0_URL
  return API_V0_URL
}
async function queryApi(path, apiToken) {
  const API_V0_URL = getDefaultApiBaseUrl() || ''
  if (!API_V0_URL) {
    logger.logger.warn(
      'API endpoint is not set and default was empty. Request is likely to fail.'
    )
  }
  return await fetch(
    `${API_V0_URL}${API_V0_URL.endsWith('/') ? '' : '/'}${path}`,
    {
      method: 'GET',
      headers: {
        Authorization: `Basic ${btoa(`${apiToken}:`)}`
      }
    }
  )
}

async function fetchOrgAnalyticsData(time, spinner) {
  const sockSdk = await shadowNpmInject.setupSdk()
  const result = await handleApiCall(
    sockSdk.getOrgAnalytics(time.toString()),
    'fetching analytics data'
  )
  if (result.success === false) {
    handleUnsuccessfulApiResponse('getOrgAnalytics', result)
  }
  spinner.stop()
  if (!result.data.length) {
    logger.logger.log(
      'No analytics data is available for this organization yet.'
    )
    return
  }
  return result.data
}

async function fetchRepoAnalyticsData(repo, time, spinner) {
  const sockSdk = await shadowNpmInject.setupSdk()
  const result = await handleApiCall(
    sockSdk.getRepoAnalytics(repo, time.toString()),
    'fetching analytics data'
  )
  if (result.success === false) {
    handleUnsuccessfulApiResponse('getRepoAnalytics', result)
  }
  spinner.stop()
  if (!result.data.length) {
    logger.logger.log(
      'No analytics data is available for this organization yet.'
    )
    return
  }
  return result.data
}

function mdTableStringNumber(title1, title2, obj) {
  // | Date        | Counts |
  // | ----------- | ------ |
  // | Header      | 201464 |
  // | Paragraph   |     18 |
  let mw1 = title1.length
  let mw2 = title2.length
  for (const [key, value] of Object.entries(obj)) {
    mw1 = Math.max(mw1, key.length)
    mw2 = Math.max(mw2, String(value ?? '').length)
  }
  const lines = []
  lines.push(`| ${title1.padEnd(mw1, ' ')} | ${title2.padEnd(mw2)} |`)
  lines.push(`| ${'-'.repeat(mw1)} | ${'-'.repeat(mw2)} |`)
  for (const [key, value] of Object.entries(obj)) {
    lines.push(
      `| ${key.padEnd(mw1, ' ')} | ${String(value ?? '').padStart(mw2, ' ')} |`
    )
  }
  lines.push(`| ${'-'.repeat(mw1)} | ${'-'.repeat(mw2)} |`)
  return lines.join('\n')
}
function mdTable(
  logs,
  // This is saying "an array of strings and the strings are a valid key of elements of T"
  // In turn, T is defined above as the audit log event type from our OpenAPI docs.
  cols,
  titles = cols
) {
  // Max col width required to fit all data in that column
  const cws = cols.map(col => col.length)
  for (const log of logs) {
    for (let i = 0, { length } = cols; i < length; i += 1) {
      // @ts-ignore
      const val = log[cols[i] ?? ''] ?? ''
      cws[i] = Math.max(
        cws[i] ?? 0,
        String(val).length,
        (titles[i] || '').length
      )
    }
  }
  let div = '|'
  for (const cw of cws) {
    div += ' ' + '-'.repeat(cw) + ' |'
  }
  let header = '|'
  for (let i = 0, { length } = titles; i < length; i += 1) {
    header += ' ' + String(titles[i]).padEnd(cws[i] ?? 0, ' ') + ' |'
  }
  let body = ''
  for (const log of logs) {
    body += '|'
    for (let i = 0, { length } = cols; i < length; i += 1) {
      // @ts-ignore
      const val = log[cols[i] ?? ''] ?? ''
      body += ' ' + String(val).padEnd(cws[i] ?? 0, ' ') + ' |'
    }
    body += '\n'
  }
  return [div, header, div, body.trim(), div].filter(s => !!s.trim()).join('\n')
}
function mdTableOfPairs(
  arr,
  // This is saying "an array of strings and the strings are a valid key of elements of T"
  // In turn, T is defined above as the audit log event type from our OpenAPI docs.
  cols
) {
  // Max col width required to fit all data in that column
  const cws = cols.map(col => col.length)
  for (const [key, val] of arr) {
    cws[0] = Math.max(cws[0] ?? 0, String(key).length)
    cws[1] = Math.max(cws[1] ?? 0, String(val ?? '').length)
  }
  let div = '|'
  for (const cw of cws) {
    div += ' ' + '-'.repeat(cw) + ' |'
  }
  let header = '|'
  for (let i = 0, { length } = cols; i < length; i += 1) {
    header += ' ' + String(cols[i]).padEnd(cws[i] ?? 0, ' ') + ' |'
  }
  let body = ''
  for (const [key, val] of arr) {
    body += '|'
    body += ' ' + String(key).padEnd(cws[0] ?? 0, ' ') + ' |'
    body += ' ' + String(val ?? '').padEnd(cws[1] ?? 0, ' ') + ' |'
    body += '\n'
  }
  return [div, header, div, body.trim(), div].filter(s => !!s.trim()).join('\n')
}

// Note: Widgets does not seem to actually work as code :'(

const METRICS = [
  'total_critical_alerts',
  'total_high_alerts',
  'total_medium_alerts',
  'total_low_alerts',
  'total_critical_added',
  'total_medium_added',
  'total_low_added',
  'total_high_added',
  'total_critical_prevented',
  'total_high_prevented',
  'total_medium_prevented',
  'total_low_prevented'
]

// Note: This maps `new Date(date).getMonth()` to English three letters
const Months = [
  'Jan',
  'Feb',
  'Mar',
  'Apr',
  'May',
  'Jun',
  'Jul',
  'Aug',
  'Sep',
  'Oct',
  'Nov',
  'Dec'
]
async function displayAnalytics({ filePath, outputKind, repo, scope, time }) {
  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Fetching analytics data')
  let data
  if (scope === 'org') {
    data = await fetchOrgAnalyticsData(time, spinner)
  } else if (repo) {
    data = await fetchRepoAnalyticsData(repo, time, spinner)
  }

  // A message should already have been printed if we have no data here
  if (!data) {
    return
  }
  if (outputKind === 'json') {
    const serialized = renderJson(data)
    if (!serialized) {
      return
    }
    if (filePath && filePath !== '-') {
      try {
        await fs.writeFile(filePath, serialized, 'utf8')
        logger.logger.log(`Data successfully written to ${filePath}`)
      } catch (e) {
        process.exitCode = 1
        logger.logger.fail(
          'There was an error trying to write the json to disk'
        )
        logger.logger.error(e)
      }
    } else {
      logger.logger.log(serialized)
    }
  } else {
    const fdata = scope === 'org' ? formatDataOrg(data) : formatDataRepo(data)
    if (outputKind === 'markdown') {
      const serialized = renderMarkdown(fdata, time, repo)
      if (filePath && filePath !== '-') {
        try {
          await fs.writeFile(filePath, serialized, 'utf8')
          logger.logger.log(`Data successfully written to ${filePath}`)
        } catch (e) {
          logger.logger.error(e)
        }
      } else {
        logger.logger.log(serialized)
      }
    } else {
      displayAnalyticsScreen(fdata)
    }
  }
}
function renderJson(data) {
  try {
    return JSON.stringify(data, null, 2)
  } catch (e) {
    process.exitCode = 1
    // This could be caused by circular references, which is an "us" problem
    logger.logger.fail(
      'There was a problem converting the data set to JSON. Please try without --json or with --markdown'
    )
    return
  }
}
function renderMarkdown(data, days, repoSlug) {
  return commonTags.stripIndents`
# Socket Alert Analytics

These are the Socket.dev stats are analytics for the ${repoSlug ? `${repoSlug} repo` : 'org'} of the past ${days} days

${[
  [
    'Total critical alerts',
    mdTableStringNumber('Date', 'Counts', data['total_critical_alerts'])
  ],
  [
    'Total high alerts',
    mdTableStringNumber('Date', 'Counts', data['total_high_alerts'])
  ],
  [
    'Total critical alerts added to the main branch',
    mdTableStringNumber('Date', 'Counts', data['total_critical_added'])
  ],
  [
    'Total high alerts added to the main branch',
    mdTableStringNumber('Date', 'Counts', data['total_high_added'])
  ],
  [
    'Total critical alerts prevented from the main branch',
    mdTableStringNumber('Date', 'Counts', data['total_critical_prevented'])
  ],
  [
    'Total high alerts prevented from the main branch',
    mdTableStringNumber('Date', 'Counts', data['total_high_prevented'])
  ],
  [
    'Total medium alerts prevented from the main branch',
    mdTableStringNumber('Date', 'Counts', data['total_medium_prevented'])
  ],
  [
    'Total low alerts prevented from the main branch',
    mdTableStringNumber('Date', 'Counts', data['total_low_prevented'])
  ]
]
  .map(
    ([title, table]) => commonTags.stripIndents`
## ${title}

${table}
`
  )
  .join('\n\n')}

## Top 5 alert types

${mdTableStringNumber('Name', 'Counts', data['top_five_alert_types'])}
`
}
function displayAnalyticsScreen(data) {
  const ScreenWidget = _socketInterop(require('blessed/lib/widgets/screen'))
  const screen = new ScreenWidget({})
  const contrib = _socketInterop(require('blessed-contrib'))
  const grid = new contrib.grid({
    rows: 5,
    cols: 4,
    screen
  })
  renderLineCharts(
    grid,
    screen,
    'Total critical alerts',
    [0, 0, 1, 2],
    data['total_critical_alerts']
  )
  renderLineCharts(
    grid,
    screen,
    'Total high alerts',
    [0, 2, 1, 2],
    data['total_high_alerts']
  )
  renderLineCharts(
    grid,
    screen,
    'Total critical alerts added to the main branch',
    [1, 0, 1, 2],
    data['total_critical_added']
  )
  renderLineCharts(
    grid,
    screen,
    'Total high alerts added to the main branch',
    [1, 2, 1, 2],
    data['total_high_added']
  )
  renderLineCharts(
    grid,
    screen,
    'Total critical alerts prevented from the main branch',
    [2, 0, 1, 2],
    data['total_critical_prevented']
  )
  renderLineCharts(
    grid,
    screen,
    'Total high alerts prevented from the main branch',
    [2, 2, 1, 2],
    data['total_high_prevented']
  )
  renderLineCharts(
    grid,
    screen,
    'Total medium alerts prevented from the main branch',
    [3, 0, 1, 2],
    data['total_medium_prevented']
  )
  renderLineCharts(
    grid,
    screen,
    'Total low alerts prevented from the main branch',
    [3, 2, 1, 2],
    data['total_low_prevented']
  )
  const bar = grid.set(4, 0, 1, 2, contrib.bar, {
    label: 'Top 5 alert types',
    barWidth: 10,
    barSpacing: 17,
    xOffset: 0,
    maxHeight: 9,
    barBgColor: 'magenta'
  })
  screen.append(bar) //must append before setting data

  bar.setData({
    titles: Object.keys(data.top_five_alert_types),
    data: Object.values(data.top_five_alert_types)
  })
  screen.render()
  // eslint-disable-next-line n/no-process-exit
  screen.key(['escape', 'q', 'C-c'], () => process.exit(0))
}
function formatDataRepo(data) {
  const sortedTopFiveAlerts = {}
  const totalTopAlerts = {}
  const formattedData = {}
  for (const metric of METRICS) {
    formattedData[metric] = {}
  }
  for (const entry of data) {
    const topFiveAlertTypes = entry['top_five_alert_types']
    for (const type of Object.keys(topFiveAlertTypes)) {
      const count = topFiveAlertTypes[type] ?? 0
      if (!totalTopAlerts[type]) {
        totalTopAlerts[type] = count
      } else if (count > (totalTopAlerts[type] ?? 0)) {
        totalTopAlerts[type] = count
      }
    }
  }
  for (const entry of data) {
    for (const metric of METRICS) {
      formattedData[metric][formatDate(entry['created_at'])] = entry[metric]
    }
  }
  const topFiveAlertEntries = Object.entries(totalTopAlerts)
    .sort(([_keya, a], [_keyb, b]) => b - a)
    .slice(0, 5)
  for (const [key, value] of topFiveAlertEntries) {
    sortedTopFiveAlerts[key] = value
  }
  return {
    ...formattedData,
    top_five_alert_types: sortedTopFiveAlerts
  }
}
function formatDataOrg(data) {
  const sortedTopFiveAlerts = {}
  const totalTopAlerts = {}
  const formattedData = {}
  for (const metric of METRICS) {
    formattedData[metric] = {}
  }
  for (const entry of data) {
    const topFiveAlertTypes = entry['top_five_alert_types']
    for (const type of Object.keys(topFiveAlertTypes)) {
      const count = topFiveAlertTypes[type] ?? 0
      if (!totalTopAlerts[type]) {
        totalTopAlerts[type] = count
      } else {
        totalTopAlerts[type] += count
      }
    }
  }
  for (const metric of METRICS) {
    const formatted = formattedData[metric]
    for (const entry of data) {
      const date = formatDate(entry['created_at'])
      if (!formatted[date]) {
        formatted[date] = entry[metric]
      } else {
        formatted[date] += entry[metric]
      }
    }
  }
  const topFiveAlertEntries = Object.entries(totalTopAlerts)
    .sort(([_keya, a], [_keyb, b]) => b - a)
    .slice(0, 5)
  for (const [key, value] of topFiveAlertEntries) {
    sortedTopFiveAlerts[key] = value
  }
  return {
    ...formattedData,
    top_five_alert_types: sortedTopFiveAlerts
  }
}
function formatDate(date) {
  return `${Months[new Date(date).getMonth()]} ${new Date(date).getDate()}`
}
function renderLineCharts(grid, screen, title, coords, data) {
  const contrib = _socketInterop(require('blessed-contrib'))
  const line = grid.set(...coords, contrib.line, {
    style: {
      line: 'cyan',
      text: 'cyan',
      baseline: 'black'
    },
    xLabelPadding: 0,
    xPadding: 0,
    xOffset: 0,
    wholeNumbersOnly: true,
    legend: {
      width: 1
    },
    label: title
  })
  screen.append(line)
  const lineData = {
    x: Object.keys(data),
    y: Object.values(data)
  }
  line.setData([lineData])
}

// TODO: not sure if I'm missing something but meow doesn't seem to expose this?

// Note: we use this description in getFlagListOutput, meow doesn't care

const commonFlags = {
  config: {
    type: 'string',
    default: '',
    hidden: true,
    description: 'Override the local config with this JSON'
  },
  dryRun: {
    type: 'boolean',
    default: false,
    description: 'Do input validation for a command and exit 0 when input is ok'
  },
  help: {
    type: 'boolean',
    default: false,
    shortFlag: 'h',
    description: 'Print this help'
  },
  silent: {
    type: 'boolean',
    default: false,
    hidden: true,
    shortFlag: 's',
    description: 'Make the CLI less chatty'
  }
}
const outputFlags = {
  json: {
    type: 'boolean',
    shortFlag: 'j',
    default: false,
    description: 'Output result as json'
  },
  markdown: {
    type: 'boolean',
    shortFlag: 'm',
    default: false,
    description: 'Output result as markdown'
  }
}
const validationFlags = {
  all: {
    type: 'boolean',
    default: false,
    description: 'Include all issues'
  },
  strict: {
    type: 'boolean',
    default: false,
    description: 'Exits with an error code if any matching issues are found'
  }
}

function handleBadInput(...arr) {
  if (arr.every(data => !!data.test)) {
    return false
  }
  const msg = [
    failMsgWithBadge(
      'Input error',
      'Please review the input requirements and try again'
    ),
    ''
  ]
  for (const data of arr) {
    // If nook, then ignore when test is ok
    if (data.nook && data.test) {
      continue
    }
    const lines = data.message.split('\n')

    // If the message has newlines then format the first line with the input
    // expectation and teh rest indented below it
    msg.push(
      `  - ${lines[0]} (${data.test ? colors.green(data.pass) : colors.red(data.fail)})`
    )
    if (lines.length > 1) {
      msg.push(...lines.slice(1).map(str => `    ${str}`))
    }
    msg.push('')
  }
  logger.logger.fail(msg.join('\n'))

  // Use exit status of 2 to indicate incorrect usage, generally invalid
  // options or missing arguments.
  // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html
  process.exitCode = 2
  return true
}

function getFlagListOutput(list, indent, { keyPrefix = '--', padName } = {}) {
  return getHelpListOutput(
    {
      ...list
    },
    indent,
    {
      keyPrefix,
      padName
    }
  )
}
function getHelpListOutput(
  list,
  indent,
  { keyPrefix = '', padName = 18 } = {}
) {
  let result = ''
  const names = Object.keys(list).sort()
  for (const name of names) {
    const entry = list[name]
    if (entry && 'hidden' in entry && entry?.hidden) {
      continue
    }
    const description =
      (typeof entry === 'object' ? entry.description : entry) || ''
    result +=
      ''.padEnd(indent) +
      (keyPrefix + name).padEnd(padName) +
      description +
      '\n'
  }
  return result.trim() || '(none)'
}

const { DRY_RUN_LABEL, REDACTED: REDACTED$1 } = constants
async function meowWithSubcommands(subcommands, options) {
  const {
    aliases = {},
    argv,
    defaultSub,
    importMeta,
    name,
    ...additionalOptions
  } = {
    __proto__: null,
    ...options
  }
  const [commandOrAliasName_, ...rawCommandArgv] = argv
  let commandOrAliasName = commandOrAliasName_
  if (!commandOrAliasName && defaultSub) {
    commandOrAliasName = defaultSub
  }
  const flags = {
    ...commonFlags,
    ...additionalOptions.flags
  }
  const cli = meow(
    `
    Usage
      $ ${name} <command>

    Commands
      ${getHelpListOutput(
        {
          ...objects.toSortedObject(
            Object.fromEntries(
              Object.entries(subcommands).filter(
                ({ 1: subcommand }) => !subcommand.hidden
              )
            )
          ),
          ...objects.toSortedObject(
            Object.fromEntries(
              Object.entries(aliases).filter(({ 1: alias }) => {
                const { hidden } = alias
                const cmdName = hidden ? '' : alias.argv[0]
                const subcommand = cmdName ? subcommands[cmdName] : undefined
                return subcommand && !subcommand.hidden
              })
            )
          )
        },
        6
      )}

    Options
      ${getFlagListOutput(flags, 6)}

    Examples
      $ ${name} --help
  `,
    {
      argv,
      importMeta,
      ...additionalOptions,
      flags,
      // Do not strictly check for flags here.
      allowUnknownFlags: true,
      // We will emit help when we're ready
      // Plus, if we allow this then meow() can just exit here.
      autoHelp: false
    }
  )

  // Hard override the config if instructed to do so.
  // The env var overrides the --flag, which overrides the persisted config
  // Also, when either of these are used, config updates won't persist.
  let configOverrideResult
  if (process$1.env['SOCKET_CLI_CONFIG']) {
    configOverrideResult = shadowNpmInject.overrideCachedConfig(
      process$1.env['SOCKET_CLI_CONFIG']
    )
  } else if (cli.flags['config']) {
    configOverrideResult = shadowNpmInject.overrideCachedConfig(
      String(cli.flags['config'] || '')
    )
  }
  if (process$1.env['SOCKET_CLI_NO_API_TOKEN']) {
    // This overrides the config override and even the explicit token env var.
    // The config will be marked as readOnly to prevent persisting it.
    shadowNpmInject.overrideConfigApiToken(undefined)
  } else {
    // Note: these are SOCKET_SECURITY prefixed because they're not specific to
    //       the CLI. For the sake of consistency we'll also support the env
    //       keys that do have the SOCKET_CLI prefix, it's an easy mistake.
    // In case multiple are supplied, the tokens supersede the keys and the
    // security prefix supersedes the cli prefix. "Adventure mode" ;)
    const tokenOverride =
      process$1.env['SOCKET_CLI_API_KEY'] ||
      process$1.env['SOCKET_SECURITY_API_KEY'] ||
      process$1.env['SOCKET_CLI_API_TOKEN'] ||
      process$1.env['SOCKET_SECURITY_API_TOKEN']
    if (tokenOverride) {
      // This will set the token (even if there was a config override) and
      // set it to readOnly, making sure the temp token won't be persisted.
      shadowNpmInject.overrideConfigApiToken(tokenOverride)
    }
  }
  if (configOverrideResult?.ok === false) {
    emitBanner(name)
    logger.logger.fail(configOverrideResult.message)
    process$1.exitCode = 2
    return
  }

  // If we got at least some args, then lets find out if we can find a command.
  if (commandOrAliasName) {
    const alias = aliases[commandOrAliasName]
    // First: Resolve argv data from alias if its an alias that's been given.
    const [commandName, ...commandArgv] = alias
      ? [...alias.argv, ...rawCommandArgv]
      : [commandOrAliasName, ...rawCommandArgv]
    // Second: Find a command definition using that data.
    const commandDefinition = commandName ? subcommands[commandName] : undefined
    // Third: If a valid command has been found, then we run it...
    if (commandDefinition) {
      return await commandDefinition.run(commandArgv, importMeta, {
        parentName: name
      })
    }
  }

  // ...else we provide basic instructions and help.
  if (!cli.flags['silent']) {
    emitBanner(name)
  }
  if (!cli.flags['help'] && cli.flags['dryRun']) {
    process$1.exitCode = 0
    logger.logger.log(`${DRY_RUN_LABEL}: No-op, call a sub-command; ok`)
  } else {
    cli.showHelp()
  }
}

/**
 * Note: meow will exit immediately if it calls its .showHelp()
 */
function meowOrExit({
  allowUnknownFlags,
  // commands that pass-through args need to allow this
  argv,
  config,
  importMeta,
  parentName
}) {
  const command = `${parentName} ${config.commandName}`

  // This exits if .printHelp() is called either by meow itself or by us.
  const cli = meow({
    argv,
    description: config.description,
    help: config.help(command, config),
    importMeta,
    flags: config.flags,
    allowUnknownFlags: Boolean(allowUnknownFlags),
    autoHelp: false // otherwise we can't exit(0)
  })
  if (!cli.flags['silent']) {
    emitBanner(command)
  }
  if (cli.flags['help']) {
    cli.showHelp()
  }
  return cli
}
function emitBanner(name) {
  // Print a banner at the top of each command.
  // This helps with brand recognition and marketing.
  // It also helps with debugging since it contains version and command details.
  // Note: print over stderr to preserve stdout for flags like --json and
  //       --markdown. If we don't do this, you can't use --json in particular
  //       and pipe the result to other tools. By emitting the banner over stderr
  //       you can do something like `socket scan view xyz | jq | process`.
  //       The spinner also emits over stderr for example.
  logger.logger.error(getAsciiHeader(name))
}
function getAsciiHeader(command) {
  const cliVersion = '0.14.77:08d925d:3b454b2e:pub' // The '@rollup/plugin-replace' will replace "process.env['INLINED_SOCKET_CLI_VERSION_HASH']".
  const nodeVersion = process$1.version
  const apiToken = shadowNpmInject.getDefaultToken()
  const shownToken = apiToken ? getLastFiveOfApiToken(apiToken) : 'no'
  const relCwd = path.normalizePath(
    process$1
      .cwd()
      .replace(
        new RegExp(
          `^${regexps.escapeRegExp(constants.homePath)}(?:${path$1.sep}|$)`,
          'i'
        ),
        '~/'
      )
  )
  const body = `
   _____         _       _        /---------------
  |   __|___ ___| |_ ___| |_      | Socket.dev CLI ver ${cliVersion}
  |__   | . |  _| '_| -_|  _|     | Node: ${nodeVersion}, API token set: ${shownToken}
  |_____|___|___|_,_|___|_|.dev   | Command: \`${command}\`, cwd: ${relCwd}`.trimStart()
  return `   ${body}\n`
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$G } = constants
const config$J = {
  commandName: 'analytics',
  description: `Look up analytics data`,
  hidden: false,
  flags: {
    ...commonFlags,
    ...outputFlags,
    file: {
      type: 'string',
      shortFlag: 'f',
      default: '-',
      description:
        'Filepath to save output. Only valid with --json/--markdown. Defaults to stdout.'
    },
    repo: {
      type: 'string',
      shortFlag: 'r',
      default: '',
      description: 'Name of the repository. Only valid when scope=repo'
    },
    scope: {
      type: 'string',
      shortFlag: 's',
      default: 'org',
      description:
        "Scope of the analytics data - either 'org' or 'repo', default: org"
    },
    time: {
      type: 'number',
      shortFlag: 't',
      default: 7,
      description: 'Time filter - either 7, 30 or 90, default: 7'
    }
  },
  help: (command, { flags }) => `
    Usage
      $ ${command} --scope=<scope> --time=<time filter>

    API Token Requirements
      - Quota: 1 unit
      - Permissions: report:write

    Default parameters are set to show the organization-level analytics over the
    last 7 days.

    Options
      ${getFlagListOutput(flags, 6)}

    Examples
      $ ${command} --scope=org --time=7
      $ ${command} --scope=org --time=30
      $ ${command} --scope=repo --repo=test-repo --time=30
  `
}
const cmdAnalytics = {
  description: config$J.description,
  hidden: config$J.hidden,
  run: run$J
}
async function run$J(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$J,
    importMeta,
    parentName
  })
  const { file, json, markdown, repo, scope, time } = cli.flags
  const apiToken = shadowNpmInject.getDefaultToken()
  const wasBadInput = handleBadInput(
    {
      test: scope === 'org' || scope === 'repo',
      message: 'Scope must be "repo" or "org"',
      pass: 'ok',
      fail: 'bad'
    },
    {
      test: time === 7 || time === 30 || time === 90,
      message: 'The time filter must either be 7, 30 or 90',
      pass: 'ok',
      fail: 'bad'
    },
    {
      nook: true,
      test: scope === 'org' || repo,
      message: 'When scope=repo, repo name should be set through --repo',
      pass: 'ok',
      fail: 'missing'
    },
    {
      nook: true,
      test: file === '-' || json || markdown,
      message:
        'The `--file` flag is only valid when using `--json` or `--markdown`',
      pass: 'ok',
      fail: 'bad'
    },
    {
      nook: true,
      test: !json || !markdown,
      message:
        'The `--json` and `--markdown` flags can not be used at the same time',
      pass: 'ok',
      fail: 'bad'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$G)
    return
  }
  assert(assertScope(scope))
  assert(assertTime(time))
  return await displayAnalytics({
    scope,
    time,
    repo: String(repo || ''),
    outputKind: json ? 'json' : markdown ? 'markdown' : 'print',
    filePath: String(file || '')
  })
}
function assertScope(scope) {
  return scope === 'org' || scope === 'repo'
}
function assertTime(time) {
  return time === 7 || time === 30 || time === 90
}

async function fetchAuditLog({ logType, orgSlug, outputKind, page, perPage }) {
  const sockSdk = await shadowNpmInject.setupSdk()

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start(`Looking up audit log for ${orgSlug}`)
  const result = await handleApiCall(
    sockSdk.getAuditLogEvents(orgSlug, {
      // I'm not sure this is used at all.
      outputJson: String(outputKind === 'json'),
      // I'm not sure this is used at all.
      outputMarkdown: String(outputKind === 'markdown'),
      orgSlug,
      type: logType,
      page: String(page),
      per_page: String(perPage)
    }),
    `Looking up audit log for ${orgSlug}\n`
  )
  if (!result.success) {
    handleUnsuccessfulApiResponse('getAuditLogEvents', result)
  }
  spinner.stop()
  return result.data
}

const { REDACTED } = constants
async function outputAuditLog(
  auditLogs,
  { logType, orgSlug, outputKind, page, perPage }
) {
  if (outputKind === 'json') {
    logger.logger.log(
      await outputAsJson(auditLogs.results, {
        logType,
        orgSlug,
        page,
        perPage
      })
    )
  } else {
    logger.logger.log(
      await outputAsMarkdown(auditLogs.results, {
        logType,
        orgSlug,
        page,
        perPage
      })
    )
  }
}
async function outputAsJson(auditLogs, { logType, orgSlug, page, perPage }) {
  let json
  try {
    json = JSON.stringify(
      {
        desc: 'Audit logs for given query',
        generated: false ? REDACTED : new Date().toISOString(),
        org: orgSlug,
        logType,
        page,
        perPage,
        logs: auditLogs.map(log => {
          // Note: The subset is pretty arbitrary
          const {
            created_at,
            event_id,
            ip_address,
            type,
            user_agent,
            user_email
          } = log
          return {
            event_id,
            created_at,
            ip_address,
            type,
            user_agent,
            user_email
          }
        })
      },
      null,
      2
    )
  } catch (e) {
    process$1.exitCode = 1
    logger.logger.fail(
      'There was a problem converting the logs to JSON, please try without the `--json` flag'
    )
    if (debug.isDebug()) {
      debug.debugLog('Error:\n', e)
    }
    return '{}'
  }
  return json
}
async function outputAsMarkdown(
  auditLogs,
  { logType, orgSlug, page, perPage }
) {
  try {
    const table = mdTable(auditLogs, [
      'event_id',
      'created_at',
      'type',
      'user_email',
      'ip_address',
      'user_agent'
    ])
    return `
# Socket Audit Logs

These are the Socket.dev audit logs as per requested query.
- org: ${orgSlug}
- type filter: ${logType || '(none)'}
- page: ${page}
- per page: ${perPage}
- generated: ${false ? REDACTED : new Date().toISOString()}

${table}
`
  } catch (e) {
    process$1.exitCode = 1
    logger.logger.fail(
      'There was a problem converting the logs to Markdown, please try the `--json` flag'
    )
    if (debug.isDebug()) {
      debug.debugLog('Error:\n', e)
    }
    // logger.error(e)
    return ''
  }
}

async function handleAuditLog({ logType, orgSlug, outputKind, page, perPage }) {
  const auditLogs = await fetchAuditLog({
    orgSlug,
    outputKind,
    page,
    perPage,
    logType
  })
  if (!auditLogs) {
    return
  }
  await outputAuditLog(auditLogs, {
    logType,
    orgSlug,
    outputKind,
    page,
    perPage
  })
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$F } = constants
const config$I = {
  commandName: 'audit-log',
  description: 'Look up the audit log for an organization',
  hidden: false,
  flags: {
    type: {
      type: 'string',
      shortFlag: 't',
      default: '',
      description: 'Type of log event'
    },
    perPage: {
      type: 'number',
      shortFlag: 'pp',
      default: 30,
      description: 'Results per page - default is 30'
    },
    page: {
      type: 'number',
      shortFlag: 'p',
      default: 1,
      description: 'Page number - default is 1'
    },
    ...commonFlags,
    ...outputFlags
  },
  help: (command, config) => `
    Usage
      $ ${command} <org slug>

    API Token Requirements
      - Quota: 1 unit
      - Permissions: audit-log:list

    This feature requires an Enterprise Plan. To learn more about getting access
    to this feature and many more, please visit https://socket.dev/pricing

    Options
      ${getFlagListOutput(config.flags, 6)}

    Examples
      $ ${command} FakeOrg
  `
}
const cmdAuditLog = {
  description: config$I.description,
  hidden: config$I.hidden,
  run: run$I
}
async function run$I(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$I,
    importMeta,
    parentName
  })
  const { json, markdown, page, perPage, type } = cli.flags
  const logType = String(type || '')
  const defaultOrgSlug = shadowNpmInject.getConfigValue('defaultOrg')
  const orgSlug = defaultOrgSlug || cli.input[0] || ''
  const apiToken = shadowNpmInject.getDefaultToken()
  const wasBadInput = handleBadInput(
    {
      test: orgSlug,
      message: 'Org name should be the first arg',
      pass: 'ok',
      fail: 'missing'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    },
    {
      nook: true,
      test: !json || !markdown,
      message:
        'The `--json` and `--markdown` flags can not be used at the same time',
      pass: 'ok',
      fail: 'bad'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$F)
    return
  }
  await handleAuditLog({
    orgSlug,
    outputKind: json ? 'json' : markdown ? 'markdown' : 'print',
    page: Number(page || 0),
    perPage: Number(perPage || 0),
    logType: logType.charAt(0).toUpperCase() + logType.slice(1)
  })
}

const {
  NPM: NPM$g,
  NPX: NPX$3,
  PACKAGE_LOCK_JSON,
  PNPM: PNPM$a,
  YARN: YARN$1,
  YARN_LOCK
} = constants
const nodejsPlatformTypes = new Set([
  'javascript',
  'js',
  'nodejs',
  NPM$g,
  PNPM$a,
  'ts',
  'tsx',
  'typescript'
])
async function runCycloneDX(yargvWithYes) {
  let cleanupPackageLock = false
  const { yes, ...yargv } = {
    __proto__: null,
    ...yargvWithYes
  }
  const yesArgs = yes ? ['--yes'] : []
  if (
    yargv.type !== YARN$1 &&
    nodejsPlatformTypes.has(yargv.type) &&
    fs$1.existsSync(`./${YARN_LOCK}`)
  ) {
    if (fs$1.existsSync(`./${PACKAGE_LOCK_JSON}`)) {
      yargv.type = NPM$g
    } else {
      // Use synp to create a package-lock.json from the yarn.lock,
      // based on the node_modules folder, for a more accurate SBOM.
      try {
        await shadowBin(NPX$3, [
          ...yesArgs,
          // The '@rollup/plugin-replace' will replace "process.env['INLINED_SYNP_VERSION']".
          `synp@${'^1.9.14'}`,
          '--source-file',
          `./${YARN_LOCK}`
        ])
        yargv.type = NPM$g
        cleanupPackageLock = true
      } catch {}
    }
  }
  await shadowBin(NPX$3, [
    ...yesArgs,
    // The '@rollup/plugin-replace' will replace "process.env['INLINED_CYCLONEDX_CDXGEN_VERSION']".
    `@cyclonedx/cdxgen@${'^11.2.3'}`,
    ...argvToArray(yargv)
  ])
  if (cleanupPackageLock) {
    try {
      await fs$1.promises.rm(`./${PACKAGE_LOCK_JSON}`)
    } catch {}
  }
  const fullOutputPath = path$1.join(process$1.cwd(), yargv.output)
  if (fs$1.existsSync(fullOutputPath)) {
    logger.logger.log(colors.cyanBright(`${yargv.output} created!`))
  }
}
function argvToArray(argv) {
  if (argv['help']) {
    return ['--help']
  }
  const result = []
  for (const { 0: key, 1: value } of Object.entries(argv)) {
    if (key === '_' || key === '--') {
      continue
    }
    if (key === 'babel' || key === 'install-deps' || key === 'validate') {
      // cdxgen documents no-babel, no-install-deps, and no-validate flags so
      // use them when relevant.
      result.push(`--${value ? key : `no-${key}`}`)
    } else if (value === true) {
      result.push(`--${key}`)
    } else if (typeof value === 'string') {
      result.push(`--${key}`, String(value))
    } else if (Array.isArray(value)) {
      result.push(`--${key}`, ...value.map(String))
    }
  }
  if (argv['--']) {
    result.push('--', ...argv['--'])
  }
  return result
}

const helpFlags = new Set(['--help', '-h'])
function cmdFlagsToString(args) {
  const result = []
  for (let i = 0, { length } = args; i < length; i += 1) {
    if (args[i].startsWith('--')) {
      // Check if the next item exists and is NOT another flag.
      if (i + 1 < length && !args[i + 1].startsWith('--')) {
        result.push(`${args[i]}=${args[i + 1]}`)
        i += 1
      } else {
        result.push(args[i])
      }
    }
  }
  return result.join(' ')
}
function cmdPrefixMessage(cmdName, text) {
  const cmdPrefix = cmdName ? `${cmdName}: ` : ''
  return `${cmdPrefix}${text}`
}
function isHelpFlag(cmdArg) {
  return helpFlags.has(cmdArg)
}

// import { meowOrExit } from '../../utils/meow-with-subcommands'
const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$E } = constants

// TODO: convert yargs to meow. Or convert all the other things to yargs.
const toLower = arg => arg.toLowerCase()
const arrayToLower = arg => arg.map(toLower)
const yargsConfig = {
  configuration: {
    'camel-case-expansion': false,
    'strip-aliased': true,
    'parse-numbers': false,
    'populate--': true,
    'unknown-options-as-args': true
  },
  coerce: {
    author: arrayToLower,
    filter: arrayToLower,
    only: arrayToLower,
    profile: toLower,
    standard: arrayToLower,
    type: arrayToLower
  },
  default: {
    //author: ['OWASP Foundation'],
    //'auto-compositions': true,
    //babel: true,
    //evidence: false,
    //'include-crypto': false,
    //'include-formulation': false,

    // Default 'install-deps' to `false` and 'lifecycle' to 'pre-build' to
    // sidestep arbitrary code execution during a cdxgen scan.
    // https://github.com/CycloneDX/cdxgen/issues/1328
    'install-deps': false,
    lifecycle: 'pre-build',
    //output: 'bom.json',
    //profile: 'generic',
    //'project-version': '',
    //recurse: true,
    //'server-host': '127.0.0.1',
    //'server-port': '9090',
    //'spec-version': '1.5',
    type: ['js']
    //validate: true,
  },
  alias: {
    help: ['h'],
    output: ['o'],
    print: ['p'],
    recurse: ['r'],
    'resolve-class': ['c'],
    type: ['t'],
    version: ['v'],
    yes: ['y']
  },
  array: [
    {
      key: 'author',
      type: 'string'
    },
    {
      key: 'exclude',
      type: 'string'
    },
    {
      key: 'filter',
      type: 'string'
    },
    {
      key: 'only',
      type: 'string'
    },
    {
      key: 'standard',
      type: 'string'
    },
    {
      key: 'type',
      type: 'string'
    }
  ],
  boolean: [
    'auto-compositions',
    'babel',
    'deep',
    'evidence',
    'fail-on-error',
    'generate-key-and-sign',
    'help',
    'include-formulation',
    'include-crypto',
    'install-deps',
    'print',
    'required-only',
    'server',
    'validate',
    'version',
    // The --yes flag and -y alias map to the corresponding flag and alias of npx.
    // https://docs.npmjs.com/cli/v7/commands/npx#compatibility-with-older-npx-versions
    'yes'
  ],
  string: [
    'api-key',
    'lifecycle',
    'output',
    'parent-project-id',
    'profile',
    'project-group',
    'project-name',
    'project-version',
    'project-id',
    'server-host',
    'server-port',
    'server-url',
    'spec-version'
  ]
}
const config$H = {
  commandName: 'cdxgen',
  description: 'Create an SBOM with CycloneDX generator (cdxgen)',
  hidden: false,
  flags: {
    // TODO: convert from yargsConfig
  },
  help: (command, config) => `
    Usage
      $ ${command} [options]

    Options
      ${getFlagListOutput(config.flags, 6)}
  `
}
const cmdCdxgen = {
  description: config$H.description,
  hidden: config$H.hidden,
  run: run$H
}
async function run$H(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    allowUnknownFlags: true,
    // Don't let meow take over --help.
    argv: argv.filter(a => !isHelpFlag(a)),
    config: config$H,
    importMeta,
    parentName
  })

  // TODO: Convert to meow.
  const yargv = {
    ...yargsParse(argv, yargsConfig)
  }
  const unknown = yargv._
  const { length: unknownLength } = unknown
  if (unknownLength) {
    // Use exit status of 2 to indicate incorrect usage, generally invalid
    // options or missing arguments.
    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html
    process.exitCode = 2
    logger.logger.fail(
      `Unknown ${words.pluralize('argument', unknownLength)}: ${yargv._.join(', ')}`
    )
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$E)
    return
  }
  if (yargv.output === undefined) {
    yargv.output = 'socket-cdx.json'
  }
  await runCycloneDX(yargv)
}

async function discoverConfigValue(key) {
  // This will have to be a specific implementation per key because certain
  // keys should request information from particular API endpoints while
  // others should simply return their default value, like endpoint URL.

  if (!shadowNpmInject.supportedConfigKeys.has(key)) {
    return {
      success: false,
      value: undefined,
      message: 'Requested key is not a valid config key.'
    }
  }
  if (key === 'apiBaseUrl') {
    // Return the default value
    return {
      success: false,
      value: undefined,
      message:
        "If you're unsure about the base endpoint URL then simply unset it."
    }
  }
  if (key === 'apiProxy') {
    // I don't think we can auto-discover this with any order of reliability..?
    return {
      success: false,
      value: undefined,
      message:
        'When uncertain, unset this key. Otherwise ask your network administrator'
    }
  }
  if (key === 'apiToken') {
    return {
      success: false,
      value: undefined,
      message:
        'You can find/create your API token in your Socket dashboard > settings > API tokens.\nYou should then use `socket login` to login instead of this command.'
    }
  }
  if (key === 'defaultOrg') {
    const apiToken = shadowNpmInject.getDefaultToken()
    if (!apiToken) {
      return {
        success: false,
        value: undefined,
        message:
          'No API token set, must have a token to resolve its default org.'
      }
    }
    const org = await getDefaultOrgFromToken()
    if (!org?.length) {
      return {
        success: false,
        value: undefined,
        message:
          'Was unable to determine default org for the current API token.'
      }
    }
    if (Array.isArray(org)) {
      return {
        success: true,
        value: org,
        message: 'These are the orgs that the current API token can access.'
      }
    }
    return {
      success: true,
      value: org,
      message: 'This is the org that belongs to the current API token.'
    }
  }
  if (key === 'enforcedOrgs') {
    const apiToken = shadowNpmInject.getDefaultToken()
    if (!apiToken) {
      return {
        success: false,
        value: undefined,
        message:
          'No API token set, must have a token to resolve orgs to enforce.'
      }
    }
    const orgs = await getEnforceableOrgsFromToken()
    if (!orgs?.length) {
      return {
        success: false,
        value: undefined,
        message:
          'Was unable to determine any orgs to enforce for the current API token.'
      }
    }
    return {
      success: true,
      value: orgs,
      message: 'These are the orgs whose security policy you can enforce.'
    }
  }
  if (key === 'test') {
    return {
      success: false,
      value: undefined,
      message: ''
    }
  }

  // Mostly to please TS, because we're not telling it `key` is keyof LocalConfig
  return {
    success: false,
    value: undefined,
    message: 'unreachable?'
  }
}
async function getDefaultOrgFromToken() {
  const sockSdk = await shadowNpmInject.setupSdk()
  const result = await handleApiCall(
    sockSdk.getOrganizations(),
    'looking up organizations'
  )
  if (result.success) {
    const arr = Array.from(Object.values(result.data.organizations)).map(
      ({ slug }) => slug
    )
    if (arr.length === 0) {
      return undefined
    }
    if (arr.length === 1) {
      return arr[0]
    }
    return arr
  }
  return undefined
}
async function getEnforceableOrgsFromToken() {
  const sockSdk = await shadowNpmInject.setupSdk()
  const result = await handleApiCall(
    sockSdk.getOrganizations(),
    'looking up organizations'
  )
  if (result.success) {
    const arr = Array.from(Object.values(result.data.organizations)).map(
      ({ slug }) => slug
    )
    if (arr.length === 0) {
      return undefined
    }
    return arr
  }
  return undefined
}

async function outputConfigAuto(key, { message, success, value }, outputKind) {
  if (outputKind === 'json') {
    logger.logger.log(
      JSON.stringify({
        success,
        message,
        result: {
          key,
          value
        }
      })
    )
  } else if (outputKind === 'markdown') {
    logger.logger.log(`# Auto discover config value`)
    logger.logger.log('')
    logger.logger.log(
      `Attempted to automatically discover the value for config key: "${key}"`
    )
    logger.logger.log('')
    if (success) {
      logger.logger.log(`The discovered value is: "${value}"`)
      if (message) {
        logger.logger.log('')
        logger.logger.log(message)
      }
    } else {
      logger.logger.log(`The discovery failed: ${message}`)
    }
    logger.logger.log('')
  } else {
    if (message) {
      logger.logger.log(message)
      logger.logger.log('')
    }
    logger.logger.log(`- ${key}: ${value}`)
    logger.logger.log('')
    if (success) {
      if (key === 'defaultOrg') {
        const proceed = await prompts.select({
          message:
            'Would you like to update the default org in local config to this value?',
          choices: (Array.isArray(value) ? value : [value])
            .map(slug => ({
              name: 'Yes [' + slug + ']',
              value: slug,
              description: `Use "${slug}" as the default organization`
            }))
            .concat({
              name: 'No',
              value: '',
              description: 'Do not use any of these organizations'
            })
        })
        if (proceed) {
          logger.logger.log(
            `OK. Setting defaultOrg to "${proceed}".\nYou should no longer need to add the org to commands that normally require it.`
          )
          shadowNpmInject.updateConfigValue('defaultOrg', proceed)
        } else {
          logger.logger.log('OK. No changes made.')
        }
      } else if (key === 'enforcedOrgs') {
        const proceed = await prompts.select({
          message:
            'Would you like to update the enforced orgs in local config to this value?',
          choices: (Array.isArray(value) ? value : [value])
            .map(slug => ({
              name: 'Yes [' + slug + ']',
              value: slug,
              description: `Enforce the security policy of "${slug}" on this machine`
            }))
            .concat({
              name: 'No',
              value: '',
              description: 'Do not use any of these organizations'
            })
        })
        if (proceed) {
          logger.logger.log(`OK. Setting enforcedOrgs key to "${proceed}".`)
          shadowNpmInject.updateConfigValue('defaultOrg', proceed)
        } else {
          logger.logger.log('OK. No changes made.')
        }
      }
    }
  }
}

async function handleConfigAuto({ key, outputKind }) {
  const result = await discoverConfigValue(key)
  await outputConfigAuto(key, result, outputKind)
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$D } = constants
const config$G = {
  commandName: 'auto',
  description: 'Automatically discover and set the correct value config item',
  hidden: false,
  flags: {
    ...commonFlags,
    ...outputFlags
  },
  help: (command, config) => `
    Usage
      $ ${command} <org slug>

    Options
      ${getFlagListOutput(config.flags, 6)}

    Attempt to automatically discover the correct value for a certain config key.

    For certain keys it will request the value from server, for others it will
    reset the value to the default. For some keys this has no effect.

    Keys:

${Array.from(shadowNpmInject.supportedConfigKeys.entries())
  .map(([key, desc]) => `     - ${key} -- ${desc}`)
  .join('\n')}

    Examples
      $ ${command} auto defaultOrg
  `
}
const cmdConfigAuto = {
  description: config$G.description,
  hidden: config$G.hidden,
  run: run$G
}
async function run$G(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$G,
    importMeta,
    parentName
  })
  const { json, markdown } = cli.flags
  const [key = ''] = cli.input
  const wasBadInput = handleBadInput(
    {
      test: shadowNpmInject.supportedConfigKeys.has(key) && key !== 'test',
      message: 'Config key should be the first arg',
      pass: 'ok',
      fail: key ? 'invalid config key' : 'missing'
    },
    {
      nook: true,
      test: !json || !markdown,
      message:
        'The `--json` and `--markdown` flags can not be used at the same time',
      pass: 'ok',
      fail: 'bad'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$D)
    return
  }
  await handleConfigAuto({
    key: key,
    outputKind: json ? 'json' : markdown ? 'markdown' : 'text'
  })
}

async function outputConfigGet(
  key,
  value,
  readOnly,
  // Is config in read-only mode? (Overrides applied)
  outputKind
) {
  if (outputKind === 'json') {
    logger.logger.log(
      JSON.stringify({
        success: true,
        result: {
          key,
          value
        },
        readOnly
      })
    )
  } else if (outputKind === 'markdown') {
    logger.logger.log(`# Config Value`)
    logger.logger.log('')
    logger.logger.log(`Config key '${key}' has value '${value}`)
    if (readOnly) {
      logger.logger.log('')
      logger.logger.log(
        'Note: the config is in read-only mode, meaning at least one key was temporarily\n      overridden from an env var or command flag.'
      )
    }
  } else {
    logger.logger.log(`${key}: ${value}`)
    if (readOnly) {
      logger.logger.log('')
      logger.logger.log(
        'Note: the config is in read-only mode, meaning at least one key was temporarily overridden from an env var or command flag.'
      )
    }
  }
}

async function handleConfigGet({ key, outputKind }) {
  const value = shadowNpmInject.getConfigValue(key)
  const readOnly = shadowNpmInject.isReadOnlyConfig()
  await outputConfigGet(key, value, readOnly, outputKind)
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$C } = constants
const config$F = {
  commandName: 'get',
  description: 'Get the value of a local CLI config item',
  hidden: false,
  flags: {
    ...commonFlags,
    ...outputFlags
  },
  help: (command, config) => `
    Usage
      $ ${command} <org slug>

    Options
      ${getFlagListOutput(config.flags, 6)}

    Keys:

${Array.from(shadowNpmInject.supportedConfigKeys.entries())
  .map(([key, desc]) => `     - ${key} -- ${desc}`)
  .join('\n')}

    Examples
      $ ${command} FakeOrg --repoName=test-repo
  `
}
const cmdConfigGet = {
  description: config$F.description,
  hidden: config$F.hidden,
  run: run$F
}
async function run$F(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$F,
    importMeta,
    parentName
  })
  const { json, markdown } = cli.flags
  const [key = ''] = cli.input
  const wasBadInput = handleBadInput(
    {
      test: shadowNpmInject.supportedConfigKeys.has(key) || key === 'test',
      message: 'Config key should be the first arg',
      pass: 'ok',
      fail: key ? 'invalid config key' : 'missing'
    },
    {
      nook: true,
      test: !json || !markdown,
      message:
        'The `--json` and `--markdown` flags can not be used at the same time',
      pass: 'ok',
      fail: 'bad'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$C)
    return
  }
  await handleConfigGet({
    key: key,
    outputKind: json ? 'json' : markdown ? 'markdown' : 'text'
  })
}

async function outputConfigList({ full, outputKind }) {
  const readOnly = shadowNpmInject.isReadOnlyConfig()
  if (outputKind === 'json') {
    const obj = {}
    for (const key of shadowNpmInject.supportedConfigKeys.keys()) {
      let value = shadowNpmInject.getConfigValue(key)
      if (!full && shadowNpmInject.sensitiveConfigKeys.has(key)) {
        value = '********'
      }
      if (full || value !== undefined) {
        obj[key] = value ?? '<none>'
      }
    }
    logger.logger.log(
      JSON.stringify(
        {
          success: true,
          full,
          config: obj,
          readOnly
        },
        null,
        2
      )
    )
  } else {
    const maxWidth = Array.from(
      shadowNpmInject.supportedConfigKeys.keys()
    ).reduce((a, b) => Math.max(a, b.length), 0)
    logger.logger.log('# Local CLI Config')
    logger.logger.log('')
    logger.logger.log(`This is the local CLI config (full=${!!full}):`)
    logger.logger.log('')
    for (const key of shadowNpmInject.supportedConfigKeys.keys()) {
      let value = shadowNpmInject.getConfigValue(key)
      if (!full && shadowNpmInject.sensitiveConfigKeys.has(key)) {
        value = '********'
      }
      if (full || value !== undefined) {
        logger.logger.log(
          `- ${key}:${' '.repeat(Math.max(0, maxWidth - key.length + 3))} ${Array.isArray(value) ? value.join(', ') || '<none>' : (value ?? '<none>')}`
        )
      }
    }
    if (readOnly) {
      logger.logger.log('')
      logger.logger.log(
        'Note: the config is in read-only mode, meaning at least one key was temporarily\n      overridden from an env var or command flag.'
      )
    }
  }
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$B } = constants
const config$E = {
  commandName: 'list',
  description: 'Show all local CLI config items and their values',
  hidden: false,
  flags: {
    ...commonFlags,
    ...outputFlags,
    full: {
      type: 'boolean',
      default: false,
      description: 'Show full tokens in plaintext (unsafe)'
    }
  },
  help: (command, config) => `
    Usage
      $ ${command} <org slug>

    Options
      ${getFlagListOutput(config.flags, 6)}

    Keys:

${Array.from(shadowNpmInject.supportedConfigKeys.entries())
  .map(([key, desc]) => `     - ${key} -- ${desc}`)
  .join('\n')}

    Examples
      $ ${command} FakeOrg --repoName=test-repo
  `
}
const cmdConfigList = {
  description: config$E.description,
  hidden: config$E.hidden,
  run: run$E
}
async function run$E(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$E,
    importMeta,
    parentName
  })
  const { full, json, markdown } = cli.flags
  const wasBadInput = handleBadInput({
    nook: true,
    test: !json || !markdown,
    message:
      'The `--json` and `--markdown` flags can not be used at the same time',
    pass: 'ok',
    fail: 'bad'
  })
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$B)
    return
  }
  await outputConfigList({
    full: !!full,
    outputKind: json ? 'json' : markdown ? 'markdown' : 'text'
  })
}

async function outputConfigSet(key, _value, readOnly, outputKind) {
  if (outputKind === 'json') {
    logger.logger.log(
      JSON.stringify({
        success: true,
        message: `Config key '${key}' was updated${readOnly ? ' (Note: since at least one value was overridden from flag/env, the config was not persisted)' : ''}`,
        readOnly
      })
    )
  } else if (outputKind === 'markdown') {
    logger.logger.log(`# Update config`)
    logger.logger.log('')
    logger.logger.log(`Config key '${key}' was updated`)
    if (readOnly) {
      logger.logger.log('')
      logger.logger.log(
        'Note: The change was not persisted because the config is in read-only mode,\n      meaning at least one key was temporarily overridden from an env var or\n      command flag.'
      )
    }
  } else {
    logger.logger.log(`OK`)
    if (readOnly) {
      logger.logger.log('')
      logger.logger.log(
        'Note: The change was not persisted because the config is in read-only mode, meaning at least one key was temporarily overridden from an env var or command flag.'
      )
    }
  }
}

async function handleConfigSet({ key, outputKind, value }) {
  shadowNpmInject.updateConfigValue(key, value)
  const readOnly = shadowNpmInject.isReadOnlyConfig()
  await outputConfigSet(key, value, readOnly, outputKind)
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$A } = constants
const config$D = {
  commandName: 'set',
  description: 'Update the value of a local CLI config item',
  hidden: false,
  flags: {
    ...commonFlags,
    ...outputFlags
  },
  help: (command, config) => `
    Usage
      $ ${command} <key> <value>

    Options
      ${getFlagListOutput(config.flags, 6)}

    This is a crude way of updating the local configuration for this CLI tool.

    Note that updating a value here is nothing more than updating a key/value
    store entry. No validation is happening. The server may reject your config.

    Keys:

${Array.from(shadowNpmInject.supportedConfigKeys.entries())
  .map(([key, desc]) => `     - ${key} -- ${desc}`)
  .join('\n')}

    Examples
      $ ${command} apiProxy https://example.com
  `
}
const cmdConfigSet = {
  description: config$D.description,
  hidden: config$D.hidden,
  run: run$D
}
async function run$D(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$D,
    importMeta,
    parentName
  })
  const { json, markdown } = cli.flags
  const [key = '', ...rest] = cli.input
  const value = rest.join(' ')
  const wasBadInput = handleBadInput(
    {
      test: shadowNpmInject.supportedConfigKeys.has(key) || key === 'test',
      message: 'Config key should be the first arg',
      pass: 'ok',
      fail: key ? 'invalid config key' : 'missing'
    },
    {
      test: value,
      // This is a string, empty string is not ok
      message:
        'Key value should be the remaining args (use `unset` to unset a value)',
      pass: 'ok',
      fail: 'missing'
    },
    {
      nook: true,
      test: !json || !markdown,
      message:
        'The `--json` and `--markdown` flags can not be used at the same time',
      pass: 'ok',
      fail: 'bad'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$A)
    return
  }
  await handleConfigSet({
    key: key,
    outputKind: json ? 'json' : markdown ? 'markdown' : 'text',
    value
  })
}

async function outputConfigUnset(key, outputKind) {
  if (outputKind === 'json') {
    logger.logger.log(
      JSON.stringify({
        success: true,
        message: `Config key '${key}' was unset`
      })
    )
  } else if (outputKind === 'markdown') {
    logger.logger.log(`# Update config`)
    logger.logger.log('')
    logger.logger.log(`Config key '${key}' was unset`)
  } else {
    logger.logger.log(`OK`)
  }
}

async function handleConfigUnset({ key, outputKind }) {
  shadowNpmInject.updateConfigValue(key, undefined)
  await outputConfigUnset(key, outputKind)
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$z } = constants
const config$C = {
  commandName: 'unset',
  description: 'Clear the value of a local CLI config item',
  hidden: false,
  flags: {
    ...commonFlags,
    ...outputFlags
  },
  help: (command, config) => `
    Usage
      $ ${command} <org slug>

    Options
      ${getFlagListOutput(config.flags, 6)}

    Keys:

${Array.from(shadowNpmInject.supportedConfigKeys.entries())
  .map(([key, desc]) => `     - ${key} -- ${desc}`)
  .join('\n')}

    Examples
      $ ${command} FakeOrg --repoName=test-repo
  `
}
const cmdConfigUnset = {
  description: config$C.description,
  hidden: config$C.hidden,
  run: run$C
}
async function run$C(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$C,
    importMeta,
    parentName
  })
  const { json, markdown } = cli.flags
  const [key = ''] = cli.input
  const wasBadInput = handleBadInput(
    {
      test: shadowNpmInject.supportedConfigKeys.has(key) || key === 'test',
      message: 'Config key should be the first arg',
      pass: 'ok',
      fail: key ? 'invalid config key' : 'missing'
    },
    {
      nook: true,
      test: !json || !markdown,
      message:
        'The `--json` and `--markdown` flags can not be used at the same time',
      pass: 'ok',
      fail: 'bad'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$z)
    return
  }
  await handleConfigUnset({
    key: key,
    outputKind: json ? 'json' : markdown ? 'markdown' : 'text'
  })
}

const description$7 = 'Commands related to the local CLI configuration'
const cmdConfig = {
  description: description$7,
  hidden: true,
  // [beta]
  async run(argv, importMeta, { parentName }) {
    await meowWithSubcommands(
      {
        auto: cmdConfigAuto,
        get: cmdConfigGet,
        list: cmdConfigList,
        set: cmdConfigSet,
        unset: cmdConfigUnset
      },
      {
        argv,
        description: description$7,
        importMeta,
        name: `${parentName} config`
      }
    )
  }
}

async function fetchDependencies({ limit, offset }) {
  const sockSdk = await shadowNpmInject.setupSdk()

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Fetching organization dependencies...')
  const result = await handleApiCall(
    sockSdk.searchDependencies({
      limit,
      offset
    }),
    'Searching dependencies'
  )
  spinner.successAndStop('Received organization dependencies response.')
  if (!result.success) {
    handleUnsuccessfulApiResponse('searchDependencies', result)
  }
  return result.data
}

// @ts-ignore
async function outputDependencies(data, { limit, offset, outputKind }) {
  if (outputKind === 'json') {
    let json
    try {
      json = JSON.stringify(data, null, 2)
    } catch (e) {
      process.exitCode = 1
      logger.logger.fail(
        'There was a problem converting the data to JSON, please try without the `--json` flag'
      )
      return
    }
    logger.logger.log(json)
    return
  }
  logger.logger.log(
    'Request details: Offset:',
    offset,
    ', limit:',
    limit,
    ', is there more data after this?',
    data.end ? 'no' : 'yes'
  )
  const options = {
    columns: [
      {
        field: 'namespace',
        name: colors.cyan('Namespace')
      },
      {
        field: 'name',
        name: colors.cyan('Name')
      },
      {
        field: 'version',
        name: colors.cyan('Version')
      },
      {
        field: 'repository',
        name: colors.cyan('Repository')
      },
      {
        field: 'branch',
        name: colors.cyan('Branch')
      },
      {
        field: 'type',
        name: colors.cyan('Type')
      },
      {
        field: 'direct',
        name: colors.cyan('Direct')
      }
    ]
  }
  logger.logger.log(chalkTable(options, data.rows))
}

async function handleDependencies({ limit, offset, outputKind }) {
  const data = await fetchDependencies({
    limit,
    offset
  })
  if (!data) {
    return
  }
  await outputDependencies(data, {
    limit,
    offset,
    outputKind
  })
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$y } = constants
const config$B = {
  commandName: 'dependencies',
  description:
    'Search for any dependency that is being used in your organization',
  hidden: false,
  flags: {
    ...commonFlags,
    limit: {
      type: 'number',
      shortFlag: 'l',
      default: 50,
      description: 'Maximum number of dependencies returned'
    },
    offset: {
      type: 'number',
      shortFlag: 'o',
      default: 0,
      description: 'Page number'
    },
    ...outputFlags
  },
  help: (command, config) => `
    Usage
      ${command}

    API Token Requirements
      - Quota: 1 unit
      - Permissions: none (does need token with access to target org)

    Options
      ${getFlagListOutput(config.flags, 6)}

    Examples
      ${command} --limit 20 --offset 10
  `
}
const cmdScanCreate$1 = {
  description: config$B.description,
  hidden: config$B.hidden,
  run: run$B
}
async function run$B(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$B,
    importMeta,
    parentName
  })
  const { json, limit, markdown, offset } = cli.flags
  const apiToken = shadowNpmInject.getDefaultToken()
  const wasBadInput = handleBadInput(
    {
      nook: true,
      test: !json || !markdown,
      message:
        'The `--json` and `--markdown` flags can not be used at the same time',
      pass: 'ok',
      fail: 'bad'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$y)
    return
  }
  await handleDependencies({
    limit: Number(limit || 0) || 0,
    offset: Number(offset || 0) || 0,
    outputKind: json ? 'json' : markdown ? 'markdown' : 'text'
  })
}

async function fetchDiffScan({ after, before, orgSlug }) {
  const apiToken = shadowNpmInject.getDefaultToken()

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Fetching diff-scan...')
  const response = await queryApi(
    `orgs/${orgSlug}/full-scans/diff?before=${encodeURIComponent(before)}&after=${encodeURIComponent(after)}`,
    apiToken || ''
  )
  spinner.successAndStop('Received diff-scan response')
  if (!response.ok) {
    const err = await handleApiError(response.status)
    logger.logger.fail(failMsgWithBadge(response.statusText, err))
    return
  }
  const result = await handleApiCall(
    await response.json(),
    'Deserializing json'
  )
  return result
}

async function outputDiffScan(result, { depth, file, outputKind }) {
  const dashboardUrl = result.diff_report_url
  const dashboardMessage = dashboardUrl
    ? `\n View this diff scan in the Socket dashboard: ${colors.cyan(dashboardUrl)}`
    : ''

  // When forcing json, or dumping to file, serialize to string such that it
  // won't get truncated. The only way to dump the full raw JSON to stdout is
  // to use `--json --file -` (the dash is a standard notation for stdout)
  if (outputKind === 'json' || file) {
    let json
    try {
      json = JSON.stringify(result, null, 2)
    } catch (e) {
      process.exitCode = 1
      // Most likely caused by a circular reference (or OOM)
      logger.logger.fail('There was a problem converting the data to JSON')
      logger.logger.error(e)
      return
    }
    if (file && file !== '-') {
      logger.logger.log(`Writing json to \`${file}\``)
      fs$1.writeFile(file, JSON.stringify(result, null, 2), err => {
        if (err) {
          logger.logger.fail(`Writing to \`${file}\` failed...`)
          logger.logger.error(err)
        } else {
          logger.logger.log(`Data successfully written to \`${file}\``)
        }
        logger.logger.error(dashboardMessage)
      })
    } else {
      // TODO: expose different method for writing to stderr when simply dodging stdout
      logger.logger.error(`\n Diff scan result: \n`)
      logger.logger.log(json)
      logger.logger.error(dashboardMessage)
    }
    return
  }

  // In this case neither the --json nor the --file flag was passed
  // Dump the JSON to CLI and let NodeJS deal with truncation

  logger.logger.log('Diff scan result:')
  logger.logger.log(
    util.inspect(result, {
      showHidden: false,
      depth: depth > 0 ? depth : null,
      colors: true,
      maxArrayLength: null
    })
  )
  logger.logger.log(
    `\n 📝 To display the detailed report in the terminal, use the --json flag \n`
  )
  logger.logger.log(dashboardMessage)
}

async function handleDiffScan({
  after,
  before,
  depth,
  file,
  orgSlug,
  outputKind
}) {
  const data = await fetchDiffScan({
    after,
    before,
    orgSlug
  })
  if (!data) {
    return
  }
  await outputDiffScan(data, {
    depth,
    file,
    outputKind
  })
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$x } = constants
const config$A = {
  commandName: 'get',
  description: 'Get a diff scan for an organization',
  hidden: false,
  flags: {
    ...commonFlags,
    after: {
      type: 'string',
      shortFlag: 'a',
      default: '',
      description: 'The scan ID of the head scan'
    },
    before: {
      type: 'string',
      shortFlag: 'b',
      default: '',
      description: 'The scan ID of the base scan'
    },
    depth: {
      type: 'number',
      default: 2,
      description:
        'Max depth of JSON to display before truncating, use zero for no limit (without --json/--file)'
    },
    json: {
      type: 'boolean',
      shortFlag: 'j',
      default: false,
      description:
        'Output result as json. This can be big. Use --file to store it to disk without truncation.'
    },
    file: {
      type: 'string',
      shortFlag: 'f',
      default: '',
      description:
        'Path to a local file where the output should be saved. Use `-` to force stdout.'
    }
  },
  help: (command, config) => `
    Usage
      $ ${command} <org slug> --before=<before> --after=<after>

    API Token Requirements
      - Quota: 1 unit
      - Permissions: full-scans:list

    This command displays the package changes between two scans. The full output
    can be pretty large depending on the size of your repo and time range. It is
    best stored to disk to be further analyzed by other tools.

    Options
      ${getFlagListOutput(config.flags, 6)}

    Examples
      $ ${command} FakeCorp --before=aaa0aa0a-aaaa-0000-0a0a-0000000a00a0 --after=aaa1aa1a-aaaa-1111-1a1a-1111111a11a1
  `
}
const cmdDiffScanGet = {
  description: config$A.description,
  hidden: config$A.hidden,
  run: run$A
}
async function run$A(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$A,
    importMeta,
    parentName
  })
  const { after, before, depth, file, json, markdown } = cli.flags
  const defaultOrgSlug = shadowNpmInject.getConfigValue('defaultOrg')
  const orgSlug = defaultOrgSlug || cli.input[0] || ''
  const apiToken = shadowNpmInject.getDefaultToken()
  const wasBadInput = handleBadInput(
    {
      test: !!(before && after),
      message:
        'Specify a before and after scan ID.\nThe args are expecting a full `aaa0aa0a-aaaa-0000-0a0a-0000000a00a0` scan ID.',
      pass: 'ok',
      fail:
        !before && !after
          ? 'missing before and after'
          : !before
            ? 'missing before'
            : 'missing after'
    },
    {
      test: !!orgSlug,
      nook: true,
      message: 'Org name as the first argument',
      pass: 'ok',
      fail: 'missing'
    },
    {
      nook: true,
      test: !json || !markdown,
      message:
        'The `--json` and `--markdown` flags can not be used at the same time',
      pass: 'ok',
      fail: 'bad'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$x)
    return
  }
  await handleDiffScan({
    before: String(before || ''),
    after: String(after || ''),
    depth: Number(depth),
    orgSlug,
    outputKind: json ? 'json' : markdown ? 'markdown' : 'text',
    file: String(file || '')
  })
}

const description$6 = 'Diff scans related commands'
const cmdDiffScan = {
  description: description$6,
  // Hidden because it was broken all this time (nobody could be using it)
  // and we're not sure if it's useful to anyone in its current state.
  // Until we do, we'll hide this to keep the help tidier.
  // And later, we may simply move this under `scan`, anyways.
  hidden: true,
  async run(argv, importMeta, { parentName }) {
    await meowWithSubcommands(
      {
        get: cmdDiffScanGet
      },
      {
        argv,
        description: description$6,
        importMeta,
        name: parentName + ' diff-scan'
      }
    )
  }
}

const { NPM: NPM$f } = constants
function isTopLevel(tree, node) {
  return tree.children.get(node.name) === node
}
async function npmFix(_pkgEnvDetails, options) {
  const {
    cwd = process.cwd(),
    spinner,
    test = false,
    testScript = 'test'
  } = {
    __proto__: null,
    ...options
  }
  spinner?.start()
  const arb = new shadowNpmInject.SafeArborist({
    path: cwd,
    ...shadowNpmInject.SAFE_ARBORIST_REIFY_OPTIONS_OVERRIDES
  })
  await arb.reify()
  const alertsMap = await shadowNpmInject.getAlertsMapFromArborist(arb, {
    consolidate: true,
    include: {
      existing: true,
      unfixable: false,
      upgradable: false
    },
    nothrow: true
  })
  const infoByPkg = shadowNpmInject.getCveInfoByAlertsMap(alertsMap)
  if (!infoByPkg) {
    spinner?.stop()
    return
  }
  await arb.buildIdealTree()
  const editablePkgJson = await packages.readPackageJson(cwd, {
    editable: true
  })
  for (const { 0: name, 1: infos } of infoByPkg) {
    const revertToIdealTree = arb.idealTree
    arb.idealTree = null
    // eslint-disable-next-line no-await-in-loop
    await arb.buildIdealTree()
    const tree = arb.idealTree
    const hasUpgrade = !!registry.getManifestData(NPM$f, name)
    if (hasUpgrade) {
      spinner?.info(`Skipping ${name}. Socket Optimize package exists.`)
      continue
    }
    const nodes = shadowNpmInject.findPackageNodes(tree, name)
    const packument =
      nodes.length && infos.length
        ? // eslint-disable-next-line no-await-in-loop
          await packages.fetchPackagePackument(name)
        : null
    if (!packument) {
      continue
    }
    for (let i = 0, { length: nodesLength } = nodes; i < nodesLength; i += 1) {
      const node = nodes[i]
      for (
        let j = 0, { length: infosLength } = infos;
        j < infosLength;
        j += 1
      ) {
        const { firstPatchedVersionIdentifier, vulnerableVersionRange } =
          infos[j]
        const { version: oldVersion } = node
        if (
          shadowNpmInject.updateNode(node, packument, vulnerableVersionRange)
        ) {
          try {
            if (test) {
              // eslint-disable-next-line no-await-in-loop
              await npm.runScript(testScript, [], {
                spinner,
                stdio: 'ignore'
              })
            }
            spinner?.info(`Patched ${name} ${oldVersion} -> ${node.version}`)
            if (isTopLevel(tree, node)) {
              for (const depField of [
                'dependencies',
                'optionalDependencies',
                'peerDependencies'
              ]) {
                const { content: pkgJson } = editablePkgJson
                const oldVersion = pkgJson[depField]?.[name]
                if (oldVersion) {
                  const decorator = /^[~^]/.exec(oldVersion)?.[0] ?? ''
                  pkgJson[depField][name] = `${decorator}${node.version}`
                }
              }
            }
            // eslint-disable-next-line no-await-in-loop
            await editablePkgJson.save()
          } catch {
            spinner?.error(`Reverting ${name} to ${oldVersion}`)
            arb.idealTree = revertToIdealTree
          }
        } else {
          spinner?.error(`Could not patch ${name} ${oldVersion}`)
        }
      }
    }
  }
  const arb2 = new shadowNpmInject.Arborist({
    path: cwd
  })
  arb2.idealTree = arb.idealTree
  await arb2.reify()
  spinner?.stop()
}

async function getAlertsMapFromPnpmLockfile(lockfile, options_) {
  const options = {
    __proto__: null,
    consolidate: false,
    nothrow: false,
    ...options_
  }
  const include = {
    __proto__: null,
    blocked: true,
    critical: true,
    cve: true,
    existing: false,
    unfixable: true,
    upgradable: false,
    ...options.include
  }
  const { spinner } = options
  const depTypes = lockfile_detectDepTypes.detectDepTypes(lockfile)
  const pkgIds = Object.keys(depTypes)
  let { length: remaining } = pkgIds
  const alertsByPkgId = new Map()
  if (!remaining) {
    return alertsByPkgId
  }
  const getText = () => `Looking up data for ${remaining} packages`
  spinner?.start(getText())
  const sockSdk = await shadowNpmInject.setupSdk(
    shadowNpmInject.getPublicToken()
  )
  const toAlertsMapOptions = {
    overrides: lockfile.overrides,
    consolidate: options.consolidate,
    include,
    spinner
  }
  for await (const batchResult of sockSdk.batchPackageStream(
    {
      alerts: 'true',
      compact: 'true',
      fixable: include.unfixable ? 'false' : 'true'
    },
    {
      components: pkgIds.map(id => ({
        purl: `pkg:npm/${id}`
      }))
    }
  )) {
    if (batchResult.success) {
      await shadowNpmInject.addArtifactToAlertsMap(
        batchResult.data,
        alertsByPkgId,
        toAlertsMapOptions
      )
    } else if (!options.nothrow) {
      const statusCode = batchResult.status ?? 'unknown'
      const statusMessage = batchResult.error ?? 'No status message'
      throw new Error(
        `Socket API server error (${statusCode}): ${statusMessage}`
      )
    }
    remaining -= 1
    if (spinner && remaining > 0) {
      spinner.start()
      spinner.setText(getText())
    }
  }
  spinner?.stop()
  return alertsByPkgId
}

const {
  NPM: NPM$e,
  SOCKET_CLI_SAFE_BIN,
  SOCKET_CLI_SAFE_PROGRESS,
  SOCKET_IPC_HANDSHAKE
} = constants
function safeNpmInstall(options) {
  const {
    agentExecPath = shadowNpmPaths.getNpmBinPath(),
    args = [],
    ipc,
    spinner,
    ...spawnOptions
  } = {
    __proto__: null,
    ...options
  }
  const useIpc = objects.isObject(ipc)
  const useDebug = debug.isDebug()
  const terminatorPos = args.indexOf('--')
  const rawBinArgs = terminatorPos === -1 ? args : args.slice(0, terminatorPos)
  const progressArg =
    rawBinArgs.findLast(npm.isProgressFlag) !== '--no-progress'
  const binArgs = rawBinArgs.filter(
    a => !npm.isAuditFlag(a) && !npm.isFundFlag(a) && !npm.isProgressFlag(a)
  )
  const otherArgs = terminatorPos === -1 ? [] : args.slice(terminatorPos)
  const isSilent = !useDebug && !binArgs.some(npm.isLoglevelFlag)
  const logLevelArgs = isSilent ? ['--loglevel', 'silent'] : []
  const spawnPromise = spawn.spawn(
    // Lazily access constants.execPath.
    constants.execPath,
    [
      // Lazily access constants.nodeHardenFlags.
      ...constants.nodeHardenFlags,
      // Lazily access constants.nodeNoWarningsFlags.
      ...constants.nodeNoWarningsFlags,
      // Lazily access false.
      ...[],
      '--require',
      // Lazily access constants.distShadowNpmInjectPath.
      constants.distShadowNpmInjectPath,
      agentExecPath,
      'install',
      // Avoid code paths for 'audit' and 'fund'.
      '--no-audit',
      '--no-fund',
      // Add '--no-progress' to fix input being swallowed by the npm spinner.
      '--no-progress',
      // Add '--loglevel=silent' if a loglevel flag is not provided and the
      // SOCKET_CLI_DEBUG environment variable is not truthy.
      ...logLevelArgs,
      ...binArgs,
      ...otherArgs
    ],
    {
      spinner,
      // Set stdio to include 'ipc'.
      // See https://github.com/nodejs/node/blob/v23.6.0/lib/child_process.js#L161-L166
      // and https://github.com/nodejs/node/blob/v23.6.0/lib/internal/child_process.js#L238.
      stdio: useIpc ? [0, 1, 2, 'ipc'] : 'inherit',
      ...spawnOptions,
      env: {
        ...process$1.env,
        ...spawnOptions.env
      }
    }
  )
  if (useIpc) {
    spawnPromise.process.send({
      [SOCKET_IPC_HANDSHAKE]: {
        [SOCKET_CLI_SAFE_BIN]: NPM$e,
        [SOCKET_CLI_SAFE_PROGRESS]: progressArg,
        ...ipc
      }
    })
  }
  return spawnPromise
}

const { NPM: NPM$d } = constants
function runAgentInstall(pkgEnvDetails, options) {
  const { agent, agentExecPath } = pkgEnvDetails
  // All package managers support the "install" command.
  if (agent === NPM$d) {
    return safeNpmInstall({
      agentExecPath,
      ...options
    })
  }
  const {
    args = [],
    spinner,
    ...spawnOptions
  } = {
    __proto__: null,
    ...options
  }
  return spawn.spawn(agentExecPath, ['install', ...args], {
    spinner,
    stdio: debug.isDebug() ? 'inherit' : 'inherit',
    ...spawnOptions,
    env: {
      ...process.env,
      NODE_OPTIONS: cmdFlagsToString([
        // Lazily access constants.nodeHardenFlags.
        // ...constants.nodeHardenFlags,
        // Lazily access constants.nodeNoWarningsFlags.
        ...constants.nodeNoWarningsFlags
      ]),
      ...spawnOptions.env
    }
  })
}

const { NPM: NPM$c, OVERRIDES: OVERRIDES$2, PNPM: PNPM$9 } = constants
async function branchExists(branchName, cwd) {
  try {
    await spawn.spawn('git', ['rev-parse', '--verify', branchName], {
      cwd,
      stdio: 'ignore'
    })
    return true
  } catch {
    return false
  }
}
async function remoteBranchExists(branchName, cwd) {
  try {
    const result = await spawn.spawn(
      'git',
      ['ls-remote', '--heads', 'origin', branchName],
      {
        cwd,
        stdio: 'pipe'
      }
    )
    return !!result.stdout.trim()
  } catch {
    return false
  }
}
async function commitAndPushFix(branchName, commitMsg, cwd) {
  const localExists = await branchExists(branchName, cwd)
  const remoteExists = await remoteBranchExists(branchName, cwd)
  if (localExists || remoteExists) {
    logger.logger.warn(
      `Branch "${branchName}" already exists. Skipping creation.`
    )
    return
  }
  const baseBranch = process.env['GITHUB_REF_NAME'] ?? 'main'
  try {
    await spawn.spawn('git', ['checkout', baseBranch], {
      cwd
    })
    await spawn.spawn('git', ['pull', '--ff-only'], {
      cwd
    })
  } catch (err) {
    logger.logger.warn(
      `Could not switch to ${baseBranch}. Proceeding with current HEAD.`
    )
  }
  await spawn.spawn('git', ['checkout', '-b', branchName], {
    cwd
  })
  await spawn.spawn('git', ['add', 'package.json', 'pnpm-lock.yaml'], {
    cwd
  })
  await spawn.spawn('git', ['commit', '-m', commitMsg], {
    cwd
  })
  await spawn.spawn('git', ['push', '--set-upstream', 'origin', branchName], {
    cwd
  })
}
async function waitForBranchToBeReadable(octokit, owner, repo, branch) {
  const maxRetries = 10
  const delay = 1500
  for (let i = 0; i < maxRetries; i++) {
    try {
      // eslint-disable-next-line no-await-in-loop
      const ref = await octokit.git.getRef({
        owner,
        repo,
        ref: `heads/${branch}`
      })
      if (ref) {
        return
      }
    } catch (err) {
      // Still not ready
    }
    // eslint-disable-next-line no-await-in-loop
    await new Promise(resolve => setTimeout(resolve, delay))
  }
  throw new Error(`Branch "${branch}" never became visible to GitHub API`)
}
async function createPullRequest({
  base = 'main',
  body,
  head,
  owner,
  repo,
  title
}) {
  const octokit = new rest.Octokit({
    auth: process.env['SOCKET_AUTOFIX_PAT'] ?? process.env['GITHUB_TOKEN']
  })
  await waitForBranchToBeReadable(octokit, owner, repo, head)
  await octokit.pulls.create({
    owner,
    repo,
    title,
    head,
    base,
    ...(body
      ? {
          body
        }
      : {})
  })
}
function getRepoInfo() {
  const repoString = process.env['GITHUB_REPOSITORY']
  if (!repoString || !repoString.includes('/')) {
    throw new Error('GITHUB_REPOSITORY is not set or invalid')
  }
  const { 0: owner, 1: repo } = repoString.split('/')
  return {
    owner,
    repo
  }
}
async function pnpmFix(pkgEnvDetails, options) {
  const {
    cwd = process.cwd(),
    spinner,
    test = false,
    testScript = 'test'
  } = {
    __proto__: null,
    ...options
  }
  const lockfile = await lockfile_fs.readWantedLockfile(cwd, {
    ignoreIncompatible: false
  })
  if (!lockfile) {
    spinner?.stop()
    return
  }
  const alertsMap = await getAlertsMapFromPnpmLockfile(lockfile, {
    consolidate: true,
    include: {
      existing: true,
      unfixable: false,
      upgradable: false
    },
    nothrow: true
  })
  const infoByPkg = shadowNpmInject.getCveInfoByAlertsMap(alertsMap)
  if (!infoByPkg) {
    spinner?.stop()
    return
  }
  const arb = new shadowNpmInject.SafeArborist({
    path: cwd,
    ...shadowNpmInject.SAFE_ARBORIST_REIFY_OPTIONS_OVERRIDES
  })
  await arb.loadActual()
  const editablePkgJson = await packages.readPackageJson(cwd, {
    editable: true
  })
  const { content: pkgJson } = editablePkgJson
  spinner?.stop()
  for (const { 0: name, 1: infos } of infoByPkg) {
    const tree = arb.actualTree
    const hasUpgrade = !!registry.getManifestData(NPM$c, name)
    if (hasUpgrade) {
      logger.logger.info(`Skipping ${name}. Socket Optimize package exists.`)
      continue
    }
    const nodes = shadowNpmInject.findPackageNodes(tree, name)
    const packument =
      nodes.length && infos.length
        ? // eslint-disable-next-line no-await-in-loop
          await packages.fetchPackagePackument(name)
        : null
    if (!packument) {
      continue
    }
    for (let i = 0, { length: nodesLength } = nodes; i < nodesLength; i += 1) {
      const node = nodes[i]
      for (
        let j = 0, { length: infosLength } = infos;
        j < infosLength;
        j += 1
      ) {
        const { firstPatchedVersionIdentifier, vulnerableVersionRange } =
          infos[j]
        const { version: oldVersion } = node
        const oldSpec = `${name}@${oldVersion}`
        const availableVersions = Object.keys(packument.versions)
        // Find the highest non-vulnerable version within the same major range
        const targetVersion = shadowNpmInject.findBestPatchVersion(
          node,
          availableVersions,
          vulnerableVersionRange
        )
        const targetPackument = targetVersion
          ? packument.versions[targetVersion]
          : undefined
        spinner?.stop()

        // Check targetVersion to make TypeScript happy.
        if (targetVersion && targetPackument) {
          const oldPnpm = pkgJson[PNPM$9]
          const oldOverrides = oldPnpm?.[OVERRIDES$2]
          const overrideKey = `${node.name}@${vulnerableVersionRange}`
          const overrideRange = `^${targetVersion}`
          const fixSpec = `${name}@${overrideRange}`
          const data = {
            [PNPM$9]: {
              ...oldPnpm,
              [OVERRIDES$2]: {
                [overrideKey]: overrideRange,
                ...oldOverrides
              }
            }
          }
          try {
            editablePkgJson.update(data)
            spinner?.start()
            spinner?.info(`Installing ${fixSpec}`)

            // eslint-disable-next-line no-await-in-loop
            await editablePkgJson.save()
            // eslint-disable-next-line no-await-in-loop
            await runAgentInstall(pkgEnvDetails, {
              args: ['--no-frozen-lockfile'],
              spinner
            })
            if (test) {
              spinner?.info(`Testing ${fixSpec}`)
              // eslint-disable-next-line no-await-in-loop
              await npm.runScript(testScript, [], {
                spinner,
                stdio: 'ignore'
              })
            }
            try {
              const branchName = `fix-${name}-${targetVersion.replace(/\./g, '-')}`
              const commitMsg = `fix: upgrade ${name} to ${targetVersion}`
              const { owner, repo } = getRepoInfo()
              // eslint-disable-next-line no-await-in-loop
              await spawn.spawn(
                'git',
                [
                  'remote',
                  'set-url',
                  'origin',
                  `https://x-access-token:${process.env['SOCKET_AUTOFIX_PAT'] ?? process.env['GITHUB_TOKEN']}@github.com/${owner}/${repo}`
                ],
                {
                  cwd
                }
              )
              // eslint-disable-next-line no-await-in-loop
              await commitAndPushFix(branchName, commitMsg, cwd)
              // eslint-disable-next-line no-await-in-loop
              await createPullRequest({
                owner,
                repo,
                title: commitMsg,
                head: branchName,
                base: process.env['GITHUB_REF_NAME'] ?? 'master',
                body: `This PR fixes a security issue in \`${name}\` by upgrading to \`${targetVersion}\`.`
              })
            } catch (e) {
              console.log(e)
            }
            logger.logger.success(`Fixed ${name}`)
          } catch {
            spinner?.error(`Reverting ${fixSpec}`)
            const pnpmKeyCount = Object.keys(data[PNPM$9]).length
            const pnpmOverridesKeyCount = Object.keys(
              data[PNPM$9][OVERRIDES$2]
            ).length
            if (pnpmKeyCount === 1 && pnpmOverridesKeyCount === 1) {
              editablePkgJson.update({
                // Setting to `undefined` will remove the property.
                [PNPM$9]: undefined
              })
            } else {
              editablePkgJson.update({
                [PNPM$9]: {
                  ...oldPnpm,
                  [OVERRIDES$2]:
                    pnpmOverridesKeyCount === 1
                      ? undefined
                      : {
                          [overrideKey]: undefined,
                          ...oldOverrides
                        }
                }
              })
            }
            // eslint-disable-next-line no-await-in-loop
            await editablePkgJson.save()
            // eslint-disable-next-line no-await-in-loop
            await runAgentInstall(pkgEnvDetails, {
              args: ['--no-frozen-lockfile'],
              spinner
            })
            spinner?.stop()
            logger.logger.error(`Failed to fix ${oldSpec}`)
          }
        } else {
          spinner?.stop()
          logger.logger.error(`Could not patch ${oldSpec}`)
        }
      }
    }
  }
  spinner?.stop()
}

const {
  BINARY_LOCK_EXT,
  BUN: BUN$5,
  HIDDEN_PACKAGE_LOCK_JSON,
  LOCK_EXT: LOCK_EXT$1,
  NPM: NPM$b,
  NPM_BUGGY_OVERRIDES_PATCHED_VERSION: NPM_BUGGY_OVERRIDES_PATCHED_VERSION$1,
  PACKAGE_JSON,
  PNPM: PNPM$8,
  VLT: VLT$5,
  YARN,
  YARN_BERRY: YARN_BERRY$5,
  YARN_CLASSIC: YARN_CLASSIC$6
} = constants
const AGENTS = new Set([
  BUN$5,
  NPM$b,
  PNPM$8,
  YARN_BERRY$5,
  YARN_CLASSIC$6,
  VLT$5
])
const binByAgent = new Map([
  [BUN$5, BUN$5],
  [NPM$b, NPM$b],
  [PNPM$8, PNPM$8],
  [YARN_BERRY$5, YARN],
  [YARN_CLASSIC$6, YARN],
  [VLT$5, VLT$5]
])
async function getAgentExecPath(agent) {
  const binName = binByAgent.get(agent)
  return (
    (await which(binName, {
      nothrow: true
    })) ?? binName
  )
}
async function getAgentVersion(agentExecPath, cwd) {
  let result
  try {
    result =
      // Coerce version output into a valid semver version by passing it through
      // semver.coerce which strips leading v's, carets (^), comparators (<,<=,>,>=,=),
      // and tildes (~).
      semver.coerce(
        // All package managers support the "--version" flag.
        (
          await spawn.spawn(agentExecPath, ['--version'], {
            cwd
          })
        ).stdout
      ) ?? undefined
  } catch {}
  return result
}

// The order of LOCKS properties IS significant as it affects iteration order.
const LOCKS = {
  [`bun${LOCK_EXT$1}`]: BUN$5,
  [`bun${BINARY_LOCK_EXT}`]: BUN$5,
  // If both package-lock.json and npm-shrinkwrap.json are present in the root
  // of a project, npm-shrinkwrap.json will take precedence and package-lock.json
  // will be ignored.
  // https://docs.npmjs.com/cli/v10/configuring-npm/package-lock-json#package-lockjson-vs-npm-shrinkwrapjson
  'npm-shrinkwrap.json': NPM$b,
  'package-lock.json': NPM$b,
  'pnpm-lock.yaml': PNPM$8,
  'pnpm-lock.yml': PNPM$8,
  [`yarn${LOCK_EXT$1}`]: YARN_CLASSIC$6,
  'vlt-lock.json': VLT$5,
  // Lastly, look for a hidden lock file which is present if .npmrc has package-lock=false:
  // https://docs.npmjs.com/cli/v10/configuring-npm/package-lock-json#hidden-lockfiles
  //
  // Unlike the other LOCKS keys this key contains a directory AND filename so
  // it has to be handled differently.
  'node_modules/.package-lock.json': NPM$b
}
const readLockFileByAgent = (() => {
  function wrapReader(reader) {
    return async (...args) => {
      try {
        return await reader(...args)
      } catch {}
      return undefined
    }
  }
  const binaryReader = wrapReader(shadowNpmInject.readFileBinary)
  const defaultReader = wrapReader(
    async lockPath => await shadowNpmInject.readFileUtf8(lockPath)
  )
  return new Map([
    [
      BUN$5,
      wrapReader(async (lockPath, agentExecPath) => {
        const ext = path$1.extname(lockPath)
        if (ext === LOCK_EXT$1) {
          return await defaultReader(lockPath)
        }
        if (ext === BINARY_LOCK_EXT) {
          const lockBuffer = await binaryReader(lockPath)
          if (lockBuffer) {
            try {
              return index_cjs.parse(lockBuffer)
            } catch {}
          }
          // To print a Yarn lockfile to your console without writing it to disk
          // use `bun bun.lockb`.
          // https://bun.sh/guides/install/yarnlock
          return (await spawn.spawn(agentExecPath, [lockPath])).stdout.trim()
        }
        return undefined
      })
    ],
    [NPM$b, defaultReader],
    [PNPM$8, defaultReader],
    [VLT$5, defaultReader],
    [YARN_BERRY$5, defaultReader],
    [YARN_CLASSIC$6, defaultReader]
  ])
})()
async function detectPackageEnvironment({
  cwd = process$1.cwd(),
  onUnknown
} = {}) {
  let lockPath = await shadowNpmInject.findUp(Object.keys(LOCKS), {
    cwd
  })
  let lockName = lockPath ? path$1.basename(lockPath) : undefined
  const isHiddenLockFile = lockName === HIDDEN_PACKAGE_LOCK_JSON
  const pkgJsonPath = lockPath
    ? path$1.resolve(
        lockPath,
        `${isHiddenLockFile ? '../' : ''}../${PACKAGE_JSON}`
      )
    : await shadowNpmInject.findUp(PACKAGE_JSON, {
        cwd
      })
  const pkgPath =
    pkgJsonPath && fs$1.existsSync(pkgJsonPath)
      ? path$1.dirname(pkgJsonPath)
      : undefined
  const editablePkgJson = pkgPath
    ? await packages.readPackageJson(pkgPath, {
        editable: true
      })
    : undefined
  const pkgJson = editablePkgJson?.content
  // Read Corepack `packageManager` field in package.json:
  // https://nodejs.org/api/packages.html#packagemanager
  const pkgManager = strings.isNonEmptyString(pkgJson?.packageManager)
    ? pkgJson.packageManager
    : undefined
  let agent
  let agentVersion
  if (pkgManager) {
    // A valid "packageManager" field value is "<package manager name>@<version>".
    // https://nodejs.org/api/packages.html#packagemanager
    const atSignIndex = pkgManager.lastIndexOf('@')
    if (atSignIndex !== -1) {
      const name = pkgManager.slice(0, atSignIndex)
      const version = pkgManager.slice(atSignIndex + 1)
      if (version && AGENTS.has(name)) {
        agent = name
      }
    }
  }
  if (
    agent === undefined &&
    !isHiddenLockFile &&
    typeof pkgJsonPath === 'string' &&
    typeof lockName === 'string'
  ) {
    agent = LOCKS[lockName]
  }
  if (agent === undefined) {
    agent = NPM$b
    onUnknown?.(pkgManager)
  }
  const agentExecPath = await getAgentExecPath(agent)
  const npmExecPath =
    agent === NPM$b ? agentExecPath : await getAgentExecPath(NPM$b)
  if (agentVersion === undefined) {
    agentVersion = await getAgentVersion(agentExecPath, cwd)
  }
  if (agent === YARN_CLASSIC$6 && (agentVersion?.major ?? 0) > 1) {
    agent = YARN_BERRY$5
  }
  // Lazily access constants.maintainedNodeVersions.
  const { maintainedNodeVersions } = constants
  // Lazily access constants.minimumVersionByAgent.
  const minSupportedAgentVersion = constants.minimumVersionByAgent.get(agent)
  const minSupportedNodeVersion = maintainedNodeVersions.last
  const nodeVersion = semver.coerce(process$1.version)
  let lockSrc
  let pkgAgentRange
  let pkgNodeRange
  let pkgMinAgentVersion = minSupportedAgentVersion
  let pkgMinNodeVersion = minSupportedNodeVersion
  if (pkgJson) {
    const { engines } = pkgJson
    const engineAgentRange = engines?.[agent]
    const engineNodeRange = engines?.['node']
    if (strings.isNonEmptyString(engineAgentRange)) {
      pkgAgentRange = engineAgentRange
      // Roughly check agent range as semver.coerce will strip leading
      // v's, carets (^), comparators (<,<=,>,>=,=), and tildes (~).
      const coerced = semver.coerce(pkgAgentRange)
      if (coerced && semver.lt(coerced, pkgMinAgentVersion)) {
        pkgMinAgentVersion = coerced.version
      }
    }
    if (strings.isNonEmptyString(engineNodeRange)) {
      pkgNodeRange = engineNodeRange
      // Roughly check Node range as semver.coerce will strip leading
      // v's, carets (^), comparators (<,<=,>,>=,=), and tildes (~).
      const coerced = semver.coerce(pkgNodeRange)
      if (coerced && semver.lt(coerced, pkgMinNodeVersion)) {
        pkgMinNodeVersion = coerced.version
      }
    }
    const browserslistQuery = pkgJson['browserslist']
    if (Array.isArray(browserslistQuery)) {
      // List Node targets in ascending version order.
      const browserslistNodeTargets = browserslist(browserslistQuery)
        .filter(v => /^node /i.test(v))
        .map(v => v.slice(5 /*'node '.length*/))
        .sort(sorts.naturalCompare)
      if (browserslistNodeTargets.length) {
        // browserslistNodeTargets[0] is the lowest Node target version.
        const coerced = semver.coerce(browserslistNodeTargets[0])
        if (coerced && semver.lt(coerced, pkgMinNodeVersion)) {
          pkgMinNodeVersion = coerced.version
        }
      }
    }
    lockSrc =
      typeof lockPath === 'string'
        ? await readLockFileByAgent.get(agent)(lockPath, agentExecPath)
        : undefined
  } else {
    lockName = undefined
    lockPath = undefined
  }
  // Does the system agent version meet our minimum supported agent version?
  const agentSupported =
    !!agentVersion &&
    semver.satisfies(agentVersion, `>=${minSupportedAgentVersion}`)

  // Does the system Node version meet our minimum supported Node version?
  const nodeSupported = semver.satisfies(
    nodeVersion,
    `>=${minSupportedNodeVersion}`
  )
  const npmBuggyOverrides =
    agent === NPM$b &&
    !!agentVersion &&
    semver.lt(agentVersion, NPM_BUGGY_OVERRIDES_PATCHED_VERSION$1)
  return {
    agent,
    agentExecPath,
    agentSupported,
    agentVersion,
    features: {
      npmBuggyOverrides
    },
    lockName,
    lockPath,
    lockSrc,
    nodeSupported,
    nodeVersion,
    npmExecPath,
    pkgJson: editablePkgJson,
    pkgPath,
    pkgRequirements: {
      agent: pkgAgentRange ?? `>=${pkgMinAgentVersion}`,
      node: pkgNodeRange ?? `>=${pkgMinNodeVersion}`
    },
    pkgSupports: {
      // Does our minimum supported agent version meet the package's requirements?
      agent: semver.satisfies(
        minSupportedAgentVersion,
        `>=${pkgMinAgentVersion}`
      ),
      // Does our supported Node versions meet the package's requirements?
      node: maintainedNodeVersions.some(v =>
        semver.satisfies(v, `>=${pkgMinNodeVersion}`)
      )
    }
  }
}
async function detectAndValidatePackageEnvironment(cwd, options) {
  const {
    cmdName = '',
    logger,
    prod
  } = {
    __proto__: null,
    ...options
  }
  const details = await detectPackageEnvironment({
    cwd,
    onUnknown(pkgManager) {
      logger?.warn(
        cmdPrefixMessage(
          cmdName,
          `Unknown package manager${pkgManager ? ` ${pkgManager}` : ''}, defaulting to npm`
        )
      )
    }
  })
  const { agent, nodeVersion, pkgRequirements } = details
  const agentVersion = details.agentVersion ?? 'unknown'
  if (!details.agentSupported) {
    const minVersion = constants.minimumVersionByAgent.get(agent)
    logger?.fail(
      cmdPrefixMessage(
        cmdName,
        `Requires ${agent} >=${minVersion}. Current version: ${agentVersion}.`
      )
    )
    return
  }
  if (!details.nodeSupported) {
    const minVersion = constants.maintainedNodeVersions.last
    logger?.fail(
      cmdPrefixMessage(
        cmdName,
        `Requires Node >=${minVersion}. Current version: ${nodeVersion}.`
      )
    )
    return
  }
  if (!details.pkgSupports.agent) {
    logger?.fail(
      cmdPrefixMessage(
        cmdName,
        `Package engine "${agent}" requires ${pkgRequirements.agent}. Current version: ${agentVersion}`
      )
    )
    return
  }
  if (!details.pkgSupports.node) {
    logger?.fail(
      cmdPrefixMessage(
        cmdName,
        `Package engine "node" requires ${pkgRequirements.node}. Current version: ${nodeVersion}`
      )
    )
    return
  }
  if (agent === VLT$5) {
    logger?.fail(
      cmdPrefixMessage(
        cmdName,
        `${agent} does not support overrides. Soon, though ⚡`
      )
    )
    return
  }
  const lockName = details.lockName ?? 'lock file'
  if (details.lockName === undefined || details.lockSrc === undefined) {
    logger?.fail(cmdPrefixMessage(cmdName, `No ${lockName} found`))
    return
  }
  if (details.lockSrc.trim() === '') {
    logger?.fail(cmdPrefixMessage(cmdName, `${lockName} is empty`))
    return
  }
  if (details.pkgPath === undefined) {
    logger?.fail(cmdPrefixMessage(cmdName, `No ${PACKAGE_JSON} found`))
    return
  }
  if (prod && (agent === BUN$5 || agent === YARN_BERRY$5)) {
    logger?.fail(
      cmdPrefixMessage(
        cmdName,
        `--prod not supported for ${agent}${agentVersion ? `@${agentVersion}` : ''}`
      )
    )
    return
  }
  if (
    details.lockPath &&
    path$1.relative(cwd, details.lockPath).startsWith('.')
  ) {
    logger?.warn(
      cmdPrefixMessage(
        cmdName,
        `Package ${lockName} found at ${details.lockPath}`
      )
    )
  }
  return details
}

const { NPM: NPM$a, PNPM: PNPM$7 } = constants
const CMD_NAME$2 = 'socket fix'
async function runFix({
  cwd = process.cwd(),
  spinner,
  test = false,
  testScript = 'test'
}) {
  const pkgEnvDetails = await detectAndValidatePackageEnvironment(cwd, {
    cmdName: CMD_NAME$2,
    logger: logger.logger
  })
  if (!pkgEnvDetails) {
    spinner?.stop()
    return
  }
  logger.logger.info(`Fixing packages for ${pkgEnvDetails.agent}`)
  switch (pkgEnvDetails.agent) {
    case NPM$a: {
      await npmFix(pkgEnvDetails, {
        spinner,
        test,
        testScript
      })
      break
    }
    case PNPM$7: {
      await pnpmFix(pkgEnvDetails, {
        spinner,
        test,
        testScript
      })
      break
    }
  }
  // spinner.successAndStop('Socket.dev fix successful')
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$w } = constants
const config$z = {
  commandName: 'fix',
  description: 'Fix "fixable" Socket alerts',
  hidden: true,
  flags: {
    ...commonFlags,
    test: {
      type: 'boolean',
      default: true,
      description: 'Very the fix by running unit tests'
    },
    testScript: {
      type: 'string',
      default: 'test',
      description: 'The test script to run for each fix attempt'
    }
  },
  help: (command, config) => `
    Usage
      $ ${command}

    Options
      ${getFlagListOutput(config.flags, 6)}
  `
}
const cmdFix = {
  description: config$z.description,
  hidden: config$z.hidden,
  run: run$z
}
async function run$z(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$z,
    importMeta,
    parentName
  })
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$w)
    return
  }

  // Lazily access constants.spinner.
  const { spinner } = constants
  await runFix({
    spinner,
    test: Boolean(cli.flags['test']),
    testScript: cli.flags['testScript']
  })
}

async function fetchPackageInfo(pkgName, pkgVersion, includeAllIssues) {
  const sockSdk = await shadowNpmInject.setupSdk(
    shadowNpmInject.getPublicToken()
  )

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start(
    pkgVersion === 'latest'
      ? `Looking up data for the latest version of ${pkgName}`
      : `Looking up data for version ${pkgVersion} of ${pkgName}`
  )
  const result = await handleApiCall(
    sockSdk.getIssuesByNPMPackage(pkgName, pkgVersion),
    'looking up package'
  )
  const scoreResult = await handleApiCall(
    sockSdk.getScoreByNPMPackage(pkgName, pkgVersion),
    'looking up package score'
  )
  spinner.successAndStop('Data fetched')
  if (result.success === false) {
    handleUnsuccessfulApiResponse('getIssuesByNPMPackage', result)
  }
  if (scoreResult.success === false) {
    handleUnsuccessfulApiResponse('getScoreByNPMPackage', scoreResult)
  }
  const severityCount = shadowNpmInject.getSeverityCount(
    result.data,
    includeAllIssues ? undefined : 'high'
  )
  return {
    data: result.data,
    severityCount,
    score: scoreResult.data
  }
}

const { NPM: NPM$9 } = registryConstants
function formatScore$1(score) {
  if (score > 80) {
    return colors.green(`${score}`)
  } else if (score < 80 && score > 60) {
    return colors.yellow(`${score}`)
  }
  return colors.red(`${score}`)
}
function outputPackageIssuesDetails(packageData, outputMarkdown) {
  const issueDetails = packageData.filter(
    d =>
      d.value?.severity === shadowNpmInject.ALERT_SEVERITY.critical ||
      d.value?.severity === shadowNpmInject.ALERT_SEVERITY.high
  )
  const uniqueIssueDetails = issueDetails.reduce((acc, issue) => {
    const { type } = issue
    if (type) {
      const details = acc.get(type)
      if (details) {
        details.count += 1
      } else {
        acc.set(type, {
          label: issue.value?.label ?? '',
          count: 1
        })
      }
    }
    return acc
  }, new Map())
  const format = new shadowNpmInject.ColorOrMarkdown(outputMarkdown)
  for (const [type, details] of uniqueIssueDetails.entries()) {
    const issueWithLink = format.hyperlink(
      details.label,
      shadowNpmInject.getSocketDevAlertUrl(type),
      {
        fallbackToUrl: true
      }
    )
    if (details.count === 1) {
      logger.logger.log(`- ${issueWithLink}`)
    } else {
      logger.logger.log(`- ${issueWithLink}: ${details.count}`)
    }
  }
}
function outputPackageInfo(
  { data, score, severityCount },
  { commandName, outputKind, pkgName, pkgVersion }
) {
  if (outputKind === 'json') {
    logger.logger.log(JSON.stringify(data, undefined, 2))
    return
  }
  if (outputKind === 'markdown') {
    logger.logger.log(commonTags.stripIndents`
      # Package report for ${pkgName}

      Package report card:
    `)
  } else {
    logger.logger.log(`Package report card for ${pkgName}:`)
  }
  const scoreResult = {
    'Supply Chain Risk': Math.floor(score.supplyChainRisk.score * 100),
    Maintenance: Math.floor(score.maintenance.score * 100),
    Quality: Math.floor(score.quality.score * 100),
    Vulnerabilities: Math.floor(score.vulnerability.score * 100),
    License: Math.floor(score.license.score * 100)
  }
  logger.logger.log('\n')
  Object.entries(scoreResult).map(score =>
    logger.logger.log(`- ${score[0]}: ${formatScore$1(score[1])}`)
  )
  logger.logger.log('\n')
  if (objects.hasKeys(severityCount)) {
    if (outputKind === 'markdown') {
      logger.logger.log('# Issues\n')
    }
    logger.logger.log(
      `Package has these issues: ${shadowNpmInject.formatSeverityCount(severityCount)}\n`
    )
    outputPackageIssuesDetails(data, outputKind === 'markdown')
  } else {
    logger.logger.log('Package has no issues')
  }
  const format = new shadowNpmInject.ColorOrMarkdown(outputKind === 'markdown')
  const url = shadowNpmInject.getSocketDevPackageOverviewUrl(
    NPM$9,
    pkgName,
    pkgVersion
  )
  logger.logger.log('\n')
  if (pkgVersion === 'latest') {
    logger.logger.log(
      `Detailed info on socket.dev: ${format.hyperlink(`${pkgName}`, url, {
        fallbackToUrl: true
      })}`
    )
  } else {
    logger.logger.log(
      `Detailed info on socket.dev: ${format.hyperlink(
        `${pkgName} v${pkgVersion}`,
        url,
        {
          fallbackToUrl: true
        }
      )}`
    )
  }
  if (outputKind !== 'markdown') {
    logger.logger.log(
      colors.dim(
        `\nOr rerun ${colors.italic(commandName)} using the ${colors.italic('--json')} flag to get full JSON output`
      )
    )
  } else {
    logger.logger.log('')
  }
}

async function handlePackageInfo({
  commandName,
  includeAllIssues,
  outputKind,
  pkgName,
  pkgVersion,
  strict
}) {
  const packageData = await fetchPackageInfo(
    pkgName,
    pkgVersion,
    includeAllIssues
  )
  if (packageData) {
    outputPackageInfo(packageData, {
      commandName,
      outputKind,
      pkgName,
      pkgVersion
    })
    if (strict && objects.hasKeys(packageData.severityCount)) {
      // Let NodeJS exit gracefully but with exit(1)
      process$1.exitCode = 1
    }
  }
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$v } = constants
const config$y = {
  commandName: 'info',
  description: 'Look up info regarding a package',
  hidden: false,
  flags: {
    ...commonFlags,
    ...outputFlags,
    ...validationFlags
  },
  help: (command, config) => `
    Usage
      $ ${command} <name>

    Options
      ${getFlagListOutput(config.flags, 6)}

    Examples
      $ ${command} webtorrent
      $ ${command} webtorrent@1.9.1
  `
}
const cmdInfo = {
  description: config$y.description,
  hidden: config$y.hidden,
  run: run$y
}
async function run$y(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$y,
    importMeta,
    parentName
  })
  const { all, json, markdown, strict } = cli.flags
  const [rawPkgName = ''] = cli.input
  const wasBadInput = handleBadInput(
    {
      test: rawPkgName,
      message: 'Expecting a package name',
      pass: 'ok',
      fail: 'missing'
    },
    {
      nook: true,
      test: cli.input.length === 1,
      message: 'Can only accept one package at a time',
      pass: 'ok',
      fail: 'got ' + cli.input.length
    },
    {
      nook: true,
      test: !json || !markdown,
      message:
        'The `--json` and `--markdown` flags can not be used at the same time',
      pass: 'ok',
      fail: 'bad'
    }
  )
  if (wasBadInput) {
    return
  }
  const versionSeparator = rawPkgName.lastIndexOf('@')
  const pkgName =
    versionSeparator < 1 ? rawPkgName : rawPkgName.slice(0, versionSeparator)
  const pkgVersion =
    versionSeparator < 1 ? 'latest' : rawPkgName.slice(versionSeparator + 1)
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$v)
    return
  }
  await handlePackageInfo({
    commandName: `${parentName} ${config$y.commandName}`,
    includeAllIssues: Boolean(all),
    outputKind: json ? 'json' : markdown ? 'markdown' : 'print',
    pkgName,
    pkgVersion,
    strict: Boolean(strict)
  })
}

function applyLogin(apiToken, enforcedOrgs, apiBaseUrl, apiProxy) {
  shadowNpmInject.updateConfigValue('enforcedOrgs', enforcedOrgs)
  shadowNpmInject.updateConfigValue('apiToken', apiToken)
  shadowNpmInject.updateConfigValue('apiBaseUrl', apiBaseUrl)
  shadowNpmInject.updateConfigValue('apiProxy', apiProxy)
}

const { SOCKET_PUBLIC_API_TOKEN } = constants
async function attemptLogin(apiBaseUrl, apiProxy) {
  apiBaseUrl ??= shadowNpmInject.getConfigValue('apiBaseUrl') ?? undefined
  apiProxy ??= shadowNpmInject.getConfigValue('apiProxy') ?? undefined
  const apiToken =
    (await prompts.password({
      message: `Enter your ${terminalLink('Socket.dev API key', 'https://docs.socket.dev/docs/api-keys')} (leave blank for a public key)`
    })) || SOCKET_PUBLIC_API_TOKEN
  // Lazily access constants.spinner.
  const { spinner } = constants
  const sdk = await shadowNpmInject.setupSdk(apiToken, apiBaseUrl, apiProxy)
  spinner.start('Verifying API key...')
  const result = await sdk.getOrganizations()
  spinner.successAndStop('Received response')
  if (!result.success) {
    logger.logger.fail('Authentication failed...')
    handleUnsuccessfulApiResponse('getOrganizations', result)
  }
  logger.logger.success('API key verified')
  const orgs = result.data
  const enforcedChoices = Object.values(orgs.organizations)
    .filter(org => org?.plan === 'enterprise')
    .map(org => ({
      name: org.name ?? 'undefined',
      value: org.id
    }))
  let enforcedOrgs = []
  if (enforcedChoices.length > 1) {
    const id = await prompts.select({
      message:
        "Which organization's policies should Socket enforce system-wide?",
      choices: enforcedChoices.concat({
        name: 'None',
        value: '',
        description: 'Pick "None" if this is a personal device'
      })
    })
    if (id) {
      enforcedOrgs = [id]
    }
  } else if (enforcedChoices.length) {
    if (
      await prompts.confirm({
        message: `Should Socket enforce ${enforcedChoices[0]?.name}'s security policies system-wide?`,
        default: true
      })
    ) {
      const existing = enforcedChoices[0]
      if (existing) {
        enforcedOrgs = [existing.value]
      }
    }
  }
  spinner.stop()
  const previousPersistedToken = shadowNpmInject.getConfigValue('apiToken')
  try {
    applyLogin(apiToken, enforcedOrgs, apiBaseUrl, apiProxy)
    logger.logger.success(
      `API credentials ${previousPersistedToken === apiToken ? 'refreshed' : previousPersistedToken ? 'updated' : 'set'}`
    )
    if (!shadowNpmInject.isReadOnlyConfig()) {
      logger.logger.log('')
      logger.logger.warn(
        'Note: config is in read-only mode, at least one key was overridden through flag/env, so the login was not persisted!'
      )
    }
  } catch {
    logger.logger.fail(`API login failed`)
  }
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$u } = constants
const config$x = {
  commandName: 'login',
  description: 'Socket API login',
  hidden: false,
  flags: {
    ...commonFlags,
    apiBaseUrl: {
      type: 'string',
      description: 'API server to connect to for login'
    },
    apiProxy: {
      type: 'string',
      description: 'Proxy to use when making connection to API server'
    }
  },
  help: (command, config) => `
    Usage
      $ ${command}

    API Token Requirements
      - Quota: 1 unit

    Logs into the Socket API by prompting for an API key

    Options
      ${getFlagListOutput(config.flags, 6)}

    Examples
      $ ${command}
      $ ${command} --api-proxy=http://localhost:1234
  `
}
const cmdLogin = {
  description: config$x.description,
  hidden: config$x.hidden,
  run: run$x
}
async function run$x(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$x,
    importMeta,
    parentName
  })
  const apiBaseUrl = cli.flags['apiBaseUrl']
  const apiProxy = cli.flags['apiProxy']
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$u)
    return
  }
  if (!isInteractive()) {
    throw new shadowNpmInject.InputError(
      'Cannot prompt for credentials in a non-interactive shell'
    )
  }
  await attemptLogin(apiBaseUrl, apiProxy)
}

function applyLogout() {
  shadowNpmInject.updateConfigValue('apiToken', null)
  shadowNpmInject.updateConfigValue('apiBaseUrl', null)
  shadowNpmInject.updateConfigValue('apiProxy', null)
  shadowNpmInject.updateConfigValue('enforcedOrgs', null)
}

function attemptLogout() {
  try {
    applyLogout()
    logger.logger.success('Successfully logged out')
    if (!shadowNpmInject.isReadOnlyConfig()) {
      logger.logger.log('')
      logger.logger.warn(
        'Note: config is in read-only mode, at least one key was overridden through flag/env, so the logout was not persisted!'
      )
    }
  } catch {
    logger.logger.fail('Failed to complete logout steps')
  }
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$t } = constants
const config$w = {
  commandName: 'logout',
  description: 'Socket API logout',
  hidden: false,
  flags: {
    ...commonFlags
  },
  help: (command, _config) => `
    Usage
      $ ${command}

    Logs out of the Socket API and clears all Socket credentials from disk
  `
}
const cmdLogout = {
  description: config$w.description,
  hidden: config$w.hidden,
  run: run$w
}
async function run$w(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$w,
    importMeta,
    parentName
  })
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$t)
    return
  }
  attemptLogout()
}

async function convertGradleToMaven(target, bin, _out, verbose, gradleOpts) {
  // Lazily access constants.spinner.
  const { spinner } = constants
  const rbin = path$1.resolve(bin)
  const rtarget = path$1.resolve(target)
  if (verbose) {
    logger.logger.group('gradle2maven:')
    logger.logger.log(`[VERBOSE] - Absolute bin path: \`${rbin}\``)
    logger.logger.log(`[VERBOSE] - Absolute target path: \`${rtarget}\``)
    logger.logger.groupEnd()
  } else {
    logger.logger.group('gradle2maven:')
    logger.logger.log(`- executing: \`${bin}\``)
    logger.logger.log(`- src dir: \`${target}\``)
    logger.logger.groupEnd()
  }
  try {
    // Run sbt with the init script we provide which should yield zero or more
    // pom files. We have to figure out where to store those pom files such that
    // we can upload them and predict them through the GitHub API. We could do a
    // .socket folder. We could do a socket.pom.gz with all the poms, although
    // I'd prefer something plain-text if it is to be committed.

    // Note: init.gradle will be exported by .config/rollup.dist.config.mjs
    const initLocation = path$1.join(constants.rootDistPath, 'init.gradle')
    const commandArgs = ['--init-script', initLocation, ...gradleOpts, 'pom']
    if (verbose) {
      logger.logger.log('[VERBOSE] Executing:', bin, commandArgs)
    }
    spinner.start(
      `Converting gradle to maven from \`${bin}\` on \`${target}\`...`
    )
    const output = await spawn.spawn(bin, commandArgs, {
      cwd: target || '.'
    })
    spinner.stop()
    if (verbose) {
      logger.logger.group('[VERBOSE] gradle stdout:')
      logger.logger.log(output)
      logger.logger.groupEnd()
    }
    if (output.stderr) {
      process.exitCode = 1
      logger.logger.fail('There were errors while running gradle')
      // (In verbose mode, stderr was printed above, no need to repeat it)
      if (!verbose) {
        logger.logger.group('[VERBOSE] stderr:')
        logger.logger.error(output.stderr)
        logger.logger.groupEnd()
      }
      return
    }
    logger.logger.success('Executed gradle successfully')
    logger.logger.log('Reported exports:')
    output.stdout.replace(/^POM file copied to: (.*)/gm, (_all, fn) => {
      logger.logger.log('- ', fn)
      return fn
    })

    // const loc = output.stdout?.match(/Wrote (.*?.pom)\n/)?.[1]?.trim()
    // if (!loc) {
    //   logger.fail(
    //     'There were no errors from sbt but could not find the location of resulting .pom file either'
    //   )
    //   // eslint-disable-next-line n/no-process-exit
    //   process.exit(1)
    // }
    //
    // // Move the pom file to ...? initial cwd? loc will be an absolute path, or dump to stdout
    // if (out === '-') {
    //   spinner.start('Result:\n```')
    //   spinner.log(await safeReadFile(loc))
    //   spinner.log('```')
    //   spinner.successAndStop(`OK`)
    // } else {
    //   spinner.start()
    //   if (verbose) {
    //     spinner.log(
    //       `Moving manifest file from \`${loc.replace(/^\/home\/[^/]*?\//, '~/')}\` to \`${out}\``
    //     )
    //   } else {
    //     spinner.log('Moving output pom file')
    //   }
    //   // TODO: do we prefer fs-extra? renaming can be gnarly on windows and fs-extra's version is better
    //   await renamep(loc, out)
    //   spinner.successAndStop(`OK. File should be available in \`${out}\``)
    // }
  } catch (e) {
    process.exitCode = 1
    spinner.stop()
    logger.logger.fail(
      'There was an unexpected error while running this' +
        (verbose ? '' : ' (use --verbose for details)')
    )
    if (verbose) {
      logger.logger.group('[VERBOSE] error:')
      logger.logger.log(e)
      logger.logger.groupEnd()
    }
  }
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$s } = constants
const config$v = {
  commandName: 'gradle',
  description:
    '[beta] Use Gradle to generate a manifest file (`pom.xml`) for a Gradle/Java/Kotlin/etc project',
  hidden: false,
  flags: {
    ...commonFlags,
    bin: {
      type: 'string',
      description: 'Location of gradlew binary to use, default: CWD/gradlew'
    },
    cwd: {
      type: 'string',
      description: 'Set the cwd, defaults to process.cwd()'
    },
    gradleOpts: {
      type: 'string',
      default: '',
      description:
        'Additional options to pass on to ./gradlew, see `./gradlew --help`'
    },
    out: {
      type: 'string',
      default: './socket.pom.xml',
      description:
        'Path of output file; where to store the resulting manifest, see also --stdout'
    },
    stdout: {
      type: 'boolean',
      description: 'Print resulting pom.xml to stdout (supersedes --out)'
    },
    task: {
      type: 'string',
      default: 'all',
      description: 'Task to target. By default targets all'
    },
    verbose: {
      type: 'boolean',
      description: 'Print debug messages'
    }
  },
  help: (command, config) => `
    Usage
      $ ${command} [--gradle=path/to/gradle/binary] [--out=path/to/result] DIR

    Options
      ${getFlagListOutput(config.flags, 6)}

    Uses gradle, preferably through your local project \`gradlew\`, to generate a
    \`pom.xml\` file for each task. If you have no \`gradlew\` you can try the
    global \`gradle\` binary but that may not work (hard to predict).

    The \`pom.xml\` is a manifest file similar to \`package.json\` for npm or
    or requirements.txt for PyPi), but specifically for Maven, which is Java's
    dependency repository. Languages like Kotlin and Scala piggy back on it too.

    There are some caveats with the gradle to \`pom.xml\` conversion:

    - each task will generate its own xml file and by default it generates one xml
      for every task.

    - it's possible certain features don't translate well into the xml. If you
      think something is missing that could be supported please reach out.

    - it works with your \`gradlew\` from your repo and local settings and config

    Support is beta. Please report issues or give us feedback on what's missing.

    Examples

      $ ${command} .
      $ ${command} --gradlew=../gradlew .
  `
}
const cmdManifestGradle = {
  description: config$v.description,
  hidden: config$v.hidden,
  run: run$v
}
async function run$v(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$v,
    importMeta,
    parentName
  })
  const verbose = Boolean(cli.flags['verbose'])
  if (verbose) {
    logger.logger.group('- ', parentName, config$v.commandName, ':')
    logger.logger.group('- flags:', cli.flags)
    logger.logger.groupEnd()
    logger.logger.log('- input:', cli.input)
    logger.logger.groupEnd()
  }
  const [target = ''] = cli.input

  // TODO: I'm not sure it's feasible to parse source file from stdin. We could
  //       try, store contents in a file in some folder, target that folder... what
  //       would the file name be?

  const wasBadInput = handleBadInput(
    {
      test: target && target !== '-',
      message: 'The DIR arg is required',
      pass: 'ok',
      fail: target === '-' ? 'stdin is not supported' : 'missing'
    },
    {
      nook: true,
      test: cli.input.length === 1,
      message: 'Can only accept one DIR (make sure to escape spaces!)',
      pass: 'ok',
      fail: 'received ' + cli.input.length
    }
  )
  if (wasBadInput) {
    return
  }
  let bin
  if (cli.flags['bin']) {
    bin = cli.flags['bin']
  } else {
    bin = path$1.join(target, 'gradlew')
  }
  let out = './socket.pom.xml'
  if (cli.flags['out']) {
    out = cli.flags['out']
  }
  if (cli.flags['stdout']) {
    out = '-'
  }
  if (verbose) {
    logger.logger.group()
    logger.logger.log('- target:', target)
    logger.logger.log('- gradle bin:', bin)
    logger.logger.log('- out:', out)
    logger.logger.groupEnd()
  }
  let gradleOpts = []
  if (cli.flags['gradleOpts']) {
    gradleOpts = cli.flags['gradleOpts']
      .split(' ')
      .map(s => s.trim())
      .filter(Boolean)
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$s)
    return
  }
  await convertGradleToMaven(target, bin, out, verbose, gradleOpts)
}

async function convertSbtToMaven(target, bin, out, verbose, sbtOpts) {
  // Lazily access constants.spinner.
  const { spinner } = constants
  const rbin = path$1.resolve(bin)
  const rtarget = path$1.resolve(target)
  if (verbose) {
    logger.logger.group('sbt2maven:')
    logger.logger.log(`[VERBOSE] - Absolute bin path: \`${rbin}\``)
    logger.logger.log(`[VERBOSE] - Absolute target path: \`${rtarget}\``)
    // logger.log(`[VERBOSE] - Absolute out path: \`${rout}\``)
    logger.logger.groupEnd()
  } else {
    logger.logger.group('sbt2maven:')
    logger.logger.log(`- executing: \`${bin}\``)
    logger.logger.log(`- src dir: \`${target}\``)
    // logger.log(`- dst dir: \`${out}\``)
    logger.logger.groupEnd()
  }
  try {
    spinner.start(`Converting sbt to maven from \`${bin}\` on \`${target}\`...`)

    // Run sbt with the init script we provide which should yield zero or more
    // pom files. We have to figure out where to store those pom files such that
    // we can upload them and predict them through the GitHub API. We could do a
    // .socket folder. We could do a socket.pom.gz with all the poms, although
    // I'd prefer something plain-text if it is to be committed.
    const output = await spawn.spawn(bin, ['makePom'].concat(sbtOpts), {
      cwd: target || '.'
    })
    spinner.stop()
    if (verbose) {
      logger.logger.group('[VERBOSE] sbt stdout:')
      logger.logger.log(output)
      logger.logger.groupEnd()
    }
    if (output.stderr) {
      process.exitCode = 1
      logger.logger.fail('There were errors while running sbt')
      // (In verbose mode, stderr was printed above, no need to repeat it)
      if (!verbose) {
        logger.logger.group('[VERBOSE] stderr:')
        logger.logger.error(output.stderr)
        logger.logger.groupEnd()
      }
      return
    }
    const poms = []
    output.stdout.replace(/Wrote (.*?.pom)\n/g, (_all, fn) => {
      poms.push(fn)
      return fn
    })
    if (!poms.length) {
      process.exitCode = 1
      logger.logger.fail(
        'There were no errors from sbt but it seems to not have generated any poms either'
      )
      return
    }
    // Move the pom file to ...? initial cwd? loc will be an absolute path, or dump to stdout
    // TODO: what to do with multiple output files? Do we want to dump them to stdout? Raw or with separators or ?
    // TODO: maybe we can add an option to target a specific file to dump to stdout
    if (out === '-' && poms.length === 1) {
      logger.logger.log('Result:\n```')
      logger.logger.log(await shadowNpmInject.safeReadFile(poms[0]))
      logger.logger.log('```')
      logger.logger.success(`OK`)
    } else if (out === '-') {
      process.exitCode = 1
      logger.logger.fail(
        'Requested out target was stdout but there are multiple generated files'
      )
      poms.forEach(fn => logger.logger.error('-', fn))
      logger.logger.error('Exiting now...')
      return
    } else {
      // if (verbose) {
      //   logger.log(
      //     `Moving manifest file from \`${loc.replace(/^\/home\/[^/]*?\//, '~/')}\` to \`${out}\``
      //   )
      // } else {
      //   logger.log('Moving output pom file')
      // }
      // TODO: do we prefer fs-extra? renaming can be gnarly on windows and fs-extra's version is better
      // await renamep(loc, out)
      logger.logger.success(`Generated ${poms.length} pom files`)
      poms.forEach(fn => logger.logger.log('-', fn))
      logger.logger.success(`OK`)
    }
  } catch (e) {
    process.exitCode = 1
    spinner.stop()
    logger.logger.fail(
      'There was an unexpected error while running this' +
        (verbose ? '' : ' (use --verbose for details)')
    )
    if (verbose) {
      logger.logger.group('[VERBOSE] error:')
      logger.logger.log(e)
      logger.logger.groupEnd()
    }
  }
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$r } = constants
const config$u = {
  commandName: 'scala',
  description:
    "[beta] Generate a manifest file (`pom.xml`) from Scala's `build.sbt` file",
  hidden: false,
  flags: {
    ...commonFlags,
    bin: {
      type: 'string',
      default: 'sbt',
      description: 'Location of sbt binary to use'
    },
    cwd: {
      type: 'string',
      description: 'Set the cwd, defaults to process.cwd()'
    },
    out: {
      type: 'string',
      default: './socket.pom.xml',
      description:
        'Path of output file; where to store the resulting manifest, see also --stdout'
    },
    stdout: {
      type: 'boolean',
      description: 'Print resulting pom.xml to stdout (supersedes --out)'
    },
    sbtOpts: {
      type: 'string',
      default: '',
      description: 'Additional options to pass on to sbt, as per `sbt --help`'
    },
    verbose: {
      type: 'boolean',
      description: 'Print debug messages'
    }
  },
  help: (command, config) => `
    Usage
      $ ${command} [--sbt=path/to/sbt/binary] [--out=path/to/result] FILE|DIR

    Options
      ${getFlagListOutput(config.flags, 6)}

    Uses \`sbt makePom\` to generate a \`pom.xml\` from your \`build.sbt\` file.
    This xml file is the dependency manifest (like a package.json
    for Node.js or requirements.txt for PyPi), but specifically for Scala.

    There are some caveats with \`build.sbt\` to \`pom.xml\` conversion:

    - the xml is exported as socket.pom.xml as to not confuse existing build tools
      but it will first hit your /target/sbt<version> folder (as a different name)

    - the pom.xml format (standard by Scala) does not support certain sbt features
      - \`excludeAll()\`, \`dependencyOverrides\`, \`force()\`, \`relativePath\`
      - For details: https://www.scala-sbt.org/1.x/docs/Library-Management.html

    - it uses your sbt settings and local configuration verbatim

    - it can only export one target per run, so if you have multiple targets like
      development and production, you must run them separately.

    You can optionally configure the path to the \`sbt\` bin to invoke.

    Support is beta. Please report issues or give us feedback on what's missing.

    This is only for SBT. If your Scala setup uses gradle, please see the help
    sections for \`socket manifest gradle\` or \`socket cdxgen\`.

    Examples

      $ ${command} ./build.sbt
      $ ${command} --bin=/usr/bin/sbt ./build.sbt
  `
}
const cmdManifestScala = {
  description: config$u.description,
  hidden: config$u.hidden,
  run: run$u
}
async function run$u(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$u,
    importMeta,
    parentName
  })
  const verbose = Boolean(cli.flags['verbose'])
  if (verbose) {
    logger.logger.group('- ', parentName, config$u.commandName, ':')
    logger.logger.group('- flags:', cli.flags)
    logger.logger.groupEnd()
    logger.logger.log('- input:', cli.input)
    logger.logger.groupEnd()
  }
  const [target = ''] = cli.input

  // TODO: I'm not sure it's feasible to parse source file from stdin. We could
  //       try, store contents in a file in some folder, target that folder... what
  //       would the file name be?

  const wasBadInput = handleBadInput(
    {
      test: target && target !== '-',
      message: 'The DIR arg is required',
      pass: 'ok',
      fail: target === '-' ? 'stdin is not supported' : 'missing'
    },
    {
      nook: true,
      test: cli.input.length === 1,
      message: 'Can only accept one DIR (make sure to escape spaces!)',
      pass: 'ok',
      fail: 'received ' + cli.input.length
    }
  )
  if (wasBadInput) {
    return
  }
  let bin = 'sbt'
  if (cli.flags['bin']) {
    bin = cli.flags['bin']
  }
  let out = './socket.pom.xml'
  if (cli.flags['out']) {
    out = cli.flags['out']
  }
  if (cli.flags['stdout']) {
    out = '-'
  }
  if (verbose) {
    logger.logger.group()
    logger.logger.log('- target:', target)
    logger.logger.log('- gradle bin:', bin)
    logger.logger.log('- out:', out)
    logger.logger.groupEnd()
  }
  let sbtOpts = []
  if (cli.flags['sbtOpts']) {
    sbtOpts = cli.flags['sbtOpts']
      .split(' ')
      .map(s => s.trim())
      .filter(Boolean)
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$r)
    return
  }
  await convertSbtToMaven(target, bin, out, verbose, sbtOpts)
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$q } = constants
const config$t = {
  commandName: 'auto',
  description: 'Auto-detect build and attempt to generate manifest file',
  hidden: false,
  flags: {
    ...commonFlags,
    cwd: {
      type: 'string',
      description: 'Set the cwd, defaults to process.cwd()'
    },
    verbose: {
      type: 'boolean',
      default: false,
      description: 'Enable debug output, may help when running into errors'
    }
    // TODO: support output flags
  },
  help: (command, config) => `
    Usage
      $ ${command}

    Options
      ${getFlagListOutput(config.flags, 6)}

    Tries to figure out what language your current repo uses. If it finds a
    supported case then it will try to generate the manifest file for that
    language with the default or detected settings.
  `
}
const cmdManifestAuto = {
  description: config$t.description,
  hidden: config$t.hidden,
  run: run$t
}
async function run$t(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$t,
    importMeta,
    parentName
  })
  const verbose = !!cli.flags['verbose']
  const cwd = cli.flags['cwd'] ?? process.cwd()
  if (verbose) {
    logger.logger.group('- ', parentName, config$t.commandName, ':')
    logger.logger.group('- flags:', cli.flags)
    logger.logger.groupEnd()
    logger.logger.log('- input:', cli.input)
    logger.logger.log('- cwd:', cwd)
    logger.logger.groupEnd()
  }
  const subArgs = []
  if (verbose) {
    subArgs.push('--verbose')
  }
  const dir = cwd
  if (fs$1.existsSync(path$1.join(dir, 'build.sbt'))) {
    logger.logger.log(
      'Detected a Scala sbt build, running default Scala generator...'
    )
    if (cwd) {
      subArgs.push('--cwd', cwd)
    }
    subArgs.push(dir)
    if (cli.flags['dryRun']) {
      logger.logger.log(DRY_RUN_BAIL_TEXT$q)
      return
    }
    await cmdManifestScala.run(subArgs, importMeta, {
      parentName
    })
    return
  }
  if (fs$1.existsSync(path$1.join(dir, 'gradlew'))) {
    logger.logger.log(
      'Detected a gradle build, running default gradle generator...'
    )
    if (cwd) {
      // This command takes the cwd as first arg.
      subArgs.push(cwd)
    }
    if (cli.flags['dryRun']) {
      logger.logger.log(DRY_RUN_BAIL_TEXT$q)
      return
    }
    await cmdManifestGradle.run(subArgs, importMeta, {
      parentName
    })
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$q)
    return
  }

  // Show new help screen and exit.
  meow(
    `
    $ ${parentName} ${config$t.commandName}

    Unfortunately this script did not discover a supported language in the
    current folder.

    - Make sure this script would work with your target build
    - Make sure to run it from the correct folder
    - Make sure the necessary build tools are available (\`PATH\`)

    If that doesn't work, see \`${parentName} <lang> --help\` for config details for
    your target language.
  `,
    {
      argv: [],
      description: config$t.description,
      importMeta
    }
  ).showHelp()
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$p } = constants

// TODO: we may want to dedupe some pieces for all gradle languages. I think it
//       makes sense to have separate commands for them and I think it makes
//       sense for the help panels to note the requested language, rather than
//       `socket manifest kotlin` to print help screens with `gradle` as the
//       command. Room for improvement.
const config$s = {
  commandName: 'kotlin',
  description:
    '[beta] Use Gradle to generate a manifest file (`pom.xml`) for a Kotlin project',
  hidden: false,
  flags: {
    ...commonFlags,
    bin: {
      type: 'string',
      description: 'Location of gradlew binary to use, default: CWD/gradlew'
    },
    cwd: {
      type: 'string',
      description: 'Set the cwd, defaults to process.cwd()'
    },
    gradleOpts: {
      type: 'string',
      default: '',
      description:
        'Additional options to pass on to ./gradlew, see `./gradlew --help`'
    },
    out: {
      type: 'string',
      default: './socket.pom.xml',
      description:
        'Path of output file; where to store the resulting manifest, see also --stdout'
    },
    stdout: {
      type: 'boolean',
      description: 'Print resulting pom.xml to stdout (supersedes --out)'
    },
    task: {
      type: 'string',
      default: 'all',
      description: 'Task to target. By default targets all'
    },
    verbose: {
      type: 'boolean',
      description: 'Print debug messages'
    }
  },
  help: (command, config) => `
    Usage
      $ ${command} [--gradle=path/to/gradle/binary] [--out=path/to/result] DIR

    Options
      ${getFlagListOutput(config.flags, 6)}

    Uses gradle, preferably through your local project \`gradlew\`, to generate a
    \`pom.xml\` file for each task. If you have no \`gradlew\` you can try the
    global \`gradle\` binary but that may not work (hard to predict).

    The \`pom.xml\` is a manifest file similar to \`package.json\` for npm or
    or requirements.txt for PyPi), but specifically for Maven, which is Java's
    dependency repository. Languages like Kotlin and Scala piggy back on it too.

    There are some caveats with the gradle to \`pom.xml\` conversion:

    - each task will generate its own xml file and by default it generates one xml
      for every task. (This may be a good thing!)

    - it's possible certain features don't translate well into the xml. If you
      think something is missing that could be supported please reach out.

    - it works with your \`gradlew\` from your repo and local settings and config

    Support is beta. Please report issues or give us feedback on what's missing.

    Examples

      $ ${command} .
      $ ${command} --gradlew=../gradlew .
  `
}
const cmdManifestKotlin = {
  description: config$s.description,
  hidden: config$s.hidden,
  run: run$s
}
async function run$s(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$s,
    importMeta,
    parentName
  })
  const verbose = Boolean(cli.flags['verbose'])
  if (verbose) {
    logger.logger.group('- ', parentName, config$s.commandName, ':')
    logger.logger.group('- flags:', cli.flags)
    logger.logger.groupEnd()
    logger.logger.log('- input:', cli.input)
    logger.logger.groupEnd()
  }
  const [target = ''] = cli.input

  // TODO: I'm not sure it's feasible to parse source file from stdin. We could
  //       try, store contents in a file in some folder, target that folder... what
  //       would the file name be?

  const wasBadInput = handleBadInput(
    {
      test: target && target !== '-',
      message: 'The DIR arg is required',
      pass: 'ok',
      fail: target === '-' ? 'stdin is not supported' : 'missing'
    },
    {
      nook: true,
      test: cli.input.length === 1,
      message: 'Can only accept one DIR (make sure to escape spaces!)',
      pass: 'ok',
      fail: 'received ' + cli.input.length
    }
  )
  if (wasBadInput) {
    return
  }
  let bin
  if (cli.flags['bin']) {
    bin = cli.flags['bin']
  } else {
    bin = path$1.join(target, 'gradlew')
  }
  let out = './socket.pom.xml'
  if (cli.flags['out']) {
    out = cli.flags['out']
  }
  if (cli.flags['stdout']) {
    out = '-'
  }
  if (verbose) {
    logger.logger.group()
    logger.logger.log('- target:', target)
    logger.logger.log('- gradle bin:', bin)
    logger.logger.log('- out:', out)
    logger.logger.groupEnd()
  }
  let gradleOpts = []
  if (cli.flags['gradleOpts']) {
    gradleOpts = cli.flags['gradleOpts']
      .split(' ')
      .map(s => s.trim())
      .filter(Boolean)
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$p)
    return
  }
  await convertGradleToMaven(target, bin, out, verbose, gradleOpts)
}

const config$r = {
  commandName: 'manifest',
  description: 'Generate a dependency manifest for given file or dir',
  hidden: false,
  flags: {
    ...commonFlags
  }
}
const cmdManifest = {
  description: config$r.description,
  hidden: config$r.hidden,
  run: run$r
}
async function run$r(argv, importMeta, { parentName }) {
  await meowWithSubcommands(
    {
      auto: cmdManifestAuto,
      scala: cmdManifestScala,
      gradle: cmdManifestGradle,
      kotlin: cmdManifestKotlin
    },
    {
      argv,
      aliases: {
        yolo: {
          description: config$r.description,
          hidden: true,
          argv: ['auto']
        }
      },
      description: config$r.description,
      importMeta,
      flags: config$r.flags,
      name: `${parentName} ${config$r.commandName}`
    }
  )
}

const { NPM: NPM$8 } = constants
async function wrapNpm(argv) {
  // Lazily access constants.distShadowNpmBinPath.
  const shadowBin = require(constants.distShadowNpmBinPath)
  await shadowBin(NPM$8, argv)
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$o, NPM: NPM$7 } = constants
const config$q = {
  commandName: 'npm',
  description: `${NPM$7} wrapper functionality`,
  hidden: false,
  flags: {
    ...commonFlags
  },
  help: (command, _config) => `
    Usage
      $ ${command}
  `
}
const cmdNpm = {
  description: config$q.description,
  hidden: config$q.hidden,
  run: run$q
}
async function run$q(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    allowUnknownFlags: true,
    argv,
    config: config$q,
    importMeta,
    parentName
  })
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$o)
    return
  }
  await wrapNpm(argv)
}

const { NPX: NPX$2 } = constants
async function wrapNpx(argv) {
  // Lazily access constants.distShadowNpmBinPath.
  const shadowBin = require(constants.distShadowNpmBinPath)
  await shadowBin(NPX$2, argv)
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$n, NPX: NPX$1 } = constants
const config$p = {
  commandName: 'npx',
  description: `${NPX$1} wrapper functionality`,
  hidden: false,
  flags: {
    ...commonFlags
  },
  help: (command, _config) => `
    Usage
      $ ${command}
  `
}
const cmdNpx = {
  description: config$p.description,
  hidden: config$p.hidden,
  run: run$p
}
async function run$p(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    allowUnknownFlags: true,
    argv,
    config: config$p,
    importMeta,
    parentName
  })
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$n)
    return
  }
  await wrapNpx(argv)
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$m } = constants
const config$o = {
  commandName: 'oops',
  description: 'Trigger an intentional error (for development)',
  hidden: true,
  flags: {
    ...commonFlags
  },
  help: (parentName, config) => `
    Usage
      $ ${parentName} ${config.commandName}

    Don't run me.
  `
}
const cmdOops = {
  description: config$o.description,
  hidden: config$o.hidden,
  run: run$o
}
async function run$o(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$o,
    importMeta,
    parentName
  })
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$m)
    return
  }
  throw new Error('This error was intentionally left blank')
}

const {
  BUN: BUN$4,
  NPM: NPM$6,
  PNPM: PNPM$6,
  VLT: VLT$4,
  YARN_BERRY: YARN_BERRY$4,
  YARN_CLASSIC: YARN_CLASSIC$5
} = constants
function matchLsCmdViewHumanStdout(stdout, name) {
  return stdout.includes(` ${name}@`)
}
function matchQueryCmdStdout(stdout, name) {
  return stdout.includes(`"${name}"`)
}
const depsIncludesByAgent = new Map([
  [BUN$4, matchLsCmdViewHumanStdout],
  [NPM$6, matchQueryCmdStdout],
  [PNPM$6, matchQueryCmdStdout],
  [VLT$4, matchQueryCmdStdout],
  [YARN_BERRY$4, matchLsCmdViewHumanStdout],
  [YARN_CLASSIC$5, matchLsCmdViewHumanStdout]
])

function getDependencyEntries(pkgJson) {
  const {
    dependencies,
    devDependencies,
    optionalDependencies,
    peerDependencies
  } = pkgJson
  return [
    [
      'dependencies',
      dependencies
        ? {
            __proto__: null,
            ...dependencies
          }
        : undefined
    ],
    [
      'devDependencies',
      devDependencies
        ? {
            __proto__: null,
            ...devDependencies
          }
        : undefined
    ],
    [
      'peerDependencies',
      peerDependencies
        ? {
            __proto__: null,
            ...peerDependencies
          }
        : undefined
    ],
    [
      'optionalDependencies',
      optionalDependencies
        ? {
            __proto__: null,
            ...optionalDependencies
          }
        : undefined
    ]
  ].filter(({ 1: o }) => o)
}

const {
  BUN: BUN$3,
  NPM: NPM$5,
  OVERRIDES: OVERRIDES$1,
  PNPM: PNPM$5,
  RESOLUTIONS: RESOLUTIONS$1,
  VLT: VLT$3,
  YARN_BERRY: YARN_BERRY$3,
  YARN_CLASSIC: YARN_CLASSIC$4
} = constants
function getOverridesDataBun(pkgJson) {
  const overrides = pkgJson?.[RESOLUTIONS$1] ?? {}
  return {
    type: YARN_BERRY$3,
    overrides
  }
}

// npm overrides documentation:
// https://docs.npmjs.com/cli/v10/configuring-npm/package-json#overrides
function getOverridesDataNpm(pkgJson) {
  const overrides = pkgJson?.[OVERRIDES$1] ?? {}
  return {
    type: NPM$5,
    overrides
  }
}

// pnpm overrides documentation:
// https://pnpm.io/package_json#pnpmoverrides
function getOverridesDataPnpm(pkgJson) {
  const overrides = pkgJson?.pnpm?.[OVERRIDES$1] ?? {}
  return {
    type: PNPM$5,
    overrides
  }
}
function getOverridesDataVlt(pkgJson) {
  const overrides = pkgJson?.[OVERRIDES$1] ?? {}
  return {
    type: VLT$3,
    overrides
  }
}

// Yarn resolutions documentation:
// https://yarnpkg.com/configuration/manifest#resolutions
function getOverridesDataYarn(pkgJson) {
  const overrides = pkgJson?.[RESOLUTIONS$1] ?? {}
  return {
    type: YARN_BERRY$3,
    overrides
  }
}

// Yarn resolutions documentation:
// https://classic.yarnpkg.com/en/docs/selective-version-resolutions
function getOverridesDataClassic(pkgJson) {
  const overrides = pkgJson?.[RESOLUTIONS$1] ?? {}
  return {
    type: YARN_CLASSIC$4,
    overrides
  }
}
const overridesDataByAgent = new Map([
  [BUN$3, getOverridesDataBun],
  [NPM$5, getOverridesDataNpm],
  [PNPM$5, getOverridesDataPnpm],
  [VLT$3, getOverridesDataVlt],
  [YARN_BERRY$3, getOverridesDataYarn],
  [YARN_CLASSIC$4, getOverridesDataClassic]
])

const { PNPM: PNPM$4 } = constants
const PNPM_WORKSPACE = `${PNPM$4}-workspace`
async function getWorkspaceGlobs(agent, pkgPath, pkgJson) {
  let workspacePatterns
  if (agent === PNPM$4) {
    for (const workspacePath of [
      path$1.join(pkgPath, `${PNPM_WORKSPACE}.yaml`),
      path$1.join(pkgPath, `${PNPM_WORKSPACE}.yml`)
    ]) {
      // eslint-disable-next-line no-await-in-loop
      const yml = await shadowNpmInject.safeReadFile(workspacePath)
      if (yml) {
        try {
          workspacePatterns = yaml.parse(yml)?.packages
        } catch {}
        if (workspacePatterns) {
          break
        }
      }
    }
  } else {
    workspacePatterns = pkgJson['workspaces']
  }
  return Array.isArray(workspacePatterns)
    ? workspacePatterns
        .filter(strings.isNonEmptyString)
        .map(workspacePatternToGlobPattern)
    : undefined
}
function workspacePatternToGlobPattern(workspace) {
  const { length } = workspace
  if (!length) {
    return ''
  }
  // If the workspace ends with "/"
  if (workspace.charCodeAt(length - 1) === 47 /*'/'*/) {
    return `${workspace}/*/package.json`
  }
  // If the workspace ends with "/**"
  if (
    workspace.charCodeAt(length - 1) === 42 /*'*'*/ &&
    workspace.charCodeAt(length - 2) === 42 /*'*'*/ &&
    workspace.charCodeAt(length - 3) === 47 /*'/'*/
  ) {
    return `${workspace}/*/**/package.json`
  }
  // Things like "packages/a" or "packages/*"
  return `${workspace}/package.json`
}

const {
  BUN: BUN$2,
  LOCK_EXT,
  NPM: NPM$4,
  PNPM: PNPM$3,
  VLT: VLT$2,
  YARN_BERRY: YARN_BERRY$2,
  YARN_CLASSIC: YARN_CLASSIC$3
} = constants
function includesNpm(lockSrc, name) {
  // Detects the package name in the following cases:
  //   "name":
  return lockSrc.includes(`"${name}":`)
}
function includesBun(lockSrc, name, lockName) {
  // This is a bit counterintuitive. When lockName ends with a .lockb
  // we treat it as a yarn.lock. When lockName ends with a .lock we
  // treat it as a package-lock.json. The bun.lock format is not identical
  // package-lock.json, however it close enough for npmLockIncludes to work.
  const lockfileScanner = lockName?.endsWith(LOCK_EXT)
    ? includesNpm
    : includesYarn
  return lockfileScanner(lockSrc, name)
}
function includesPnpm(lockSrc, name) {
  const escapedName = regexps.escapeRegExp(name)
  return new RegExp(
    // Detects the package name in the following cases:
    //   /name/
    //   'name'
    //   name:
    //   name@
    `(?<=^\\s*)(?:(['/])${escapedName}\\1|${escapedName}(?=[:@]))`,
    'm'
  ).test(lockSrc)
}
function includesVlt(lockSrc, name) {
  // Detects the package name in the following cases:
  //   "name"
  return lockSrc.includes(`"${name}"`)
}
function includesYarn(lockSrc, name) {
  const escapedName = regexps.escapeRegExp(name)
  return new RegExp(
    // Detects the package name in the following cases:
    //   "name@
    //   , "name@
    //   name@
    //   , name@
    `(?<=(?:^\\s*|,\\s*)"?)${escapedName}(?=@)`,
    'm'
  ).test(lockSrc)
}
const lockfileIncludesByAgent = new Map([
  [BUN$2, includesBun],
  [NPM$4, includesNpm],
  [PNPM$3, includesPnpm],
  [VLT$2, includesVlt],
  [YARN_BERRY$2, includesYarn],
  [YARN_CLASSIC$3, includesYarn]
])

const {
  BUN: BUN$1,
  NPM: NPM$3,
  PNPM: PNPM$2,
  VLT: VLT$1,
  YARN_BERRY: YARN_BERRY$1,
  YARN_CLASSIC: YARN_CLASSIC$2
} = constants
function cleanupQueryStdout(stdout) {
  if (stdout === '') {
    return ''
  }
  let pkgs
  try {
    pkgs = JSON.parse(stdout)
  } catch {}
  if (!Array.isArray(pkgs)) {
    return ''
  }
  const names = new Set()
  for (const { _id, name, pkgid } of pkgs) {
    // `npm query` results may not have a "name" property, in which case we
    // fallback to "_id" and then "pkgid".
    // `vlt ls --view json` results always have a "name" property.
    const fallback = _id ?? pkgid ?? ''
    const resolvedName = name ?? fallback.slice(0, fallback.indexOf('@', 1))
    // Add package names, except for those under the `@types` scope as those
    // are known to only be dev dependencies.
    if (resolvedName && !resolvedName.startsWith('@types/')) {
      names.add(resolvedName)
    }
  }
  return JSON.stringify([...names], null, 2)
}
function parsableToQueryStdout(stdout) {
  if (stdout === '') {
    return ''
  }
  // Convert the parsable stdout into a json array of unique names.
  // The matchAll regexp looks for a forward (posix) or backward (win32) slash
  // and matches one or more non-slashes until the newline.
  const names = new Set(stdout.matchAll(/(?<=[/\\])[^/\\]+(?=\n)/g))
  return JSON.stringify([...names], null, 2)
}
async function npmQuery(npmExecPath, cwd) {
  let stdout = ''
  try {
    stdout = (
      await spawn.spawn(npmExecPath, ['query', ':not(.dev)'], {
        cwd
      })
    ).stdout
  } catch {}
  return cleanupQueryStdout(stdout)
}
async function lsBun(agentExecPath, cwd) {
  try {
    // Bun does not support filtering by production packages yet.
    // https://github.com/oven-sh/bun/issues/8283
    return (
      await spawn.spawn(agentExecPath, ['pm', 'ls', '--all'], {
        cwd
      })
    ).stdout
  } catch {}
  return ''
}
async function lsNpm(agentExecPath, cwd) {
  return await npmQuery(agentExecPath, cwd)
}
async function lsPnpm(agentExecPath, cwd, options) {
  const npmExecPath = options?.npmExecPath
  if (npmExecPath && npmExecPath !== NPM$3) {
    const result = await npmQuery(npmExecPath, cwd)
    if (result) {
      return result
    }
  }
  let stdout = ''
  try {
    stdout = (
      await spawn.spawn(
        agentExecPath,
        // Pnpm uses the alternative spelling of parsable.
        // https://en.wiktionary.org/wiki/parsable
        ['ls', '--parseable', '--prod', '--depth', 'Infinity'],
        {
          cwd
        }
      )
    ).stdout
  } catch {}
  return parsableToQueryStdout(stdout)
}
async function lsVlt(agentExecPath, cwd) {
  let stdout = ''
  try {
    // See https://docs.vlt.sh/cli/commands/list#options.
    stdout = (
      await spawn.spawn(
        agentExecPath,
        ['ls', '--view', 'human', ':not(.dev)'],
        {
          cwd
        }
      )
    ).stdout
  } catch {}
  return cleanupQueryStdout(stdout)
}
async function lsYarnBerry(agentExecPath, cwd) {
  try {
    return (
      // Yarn Berry does not support filtering by production packages yet.
      // https://github.com/yarnpkg/berry/issues/5117
      (
        await spawn.spawn(
          agentExecPath,
          ['info', '--recursive', '--name-only'],
          {
            cwd
          }
        )
      ).stdout.trim()
    )
  } catch {}
  return ''
}
async function lsYarnClassic(agentExecPath, cwd) {
  try {
    // However, Yarn Classic does support it.
    // https://github.com/yarnpkg/yarn/releases/tag/v1.0.0
    // > Fix: Excludes dev dependencies from the yarn list output when the
    //   environment is production
    return (
      await spawn.spawn(agentExecPath, ['list', '--prod'], {
        cwd
      })
    ).stdout.trim()
  } catch {}
  return ''
}
const lsByAgent = new Map([
  [BUN$1, lsBun],
  [NPM$3, lsNpm],
  [PNPM$2, lsPnpm],
  [VLT$1, lsVlt],
  [YARN_BERRY$1, lsYarnBerry],
  [YARN_CLASSIC$2, lsYarnClassic]
])

const {
  BUN,
  NPM: NPM$2,
  OVERRIDES,
  PNPM: PNPM$1,
  RESOLUTIONS,
  VLT,
  YARN_BERRY,
  YARN_CLASSIC: YARN_CLASSIC$1
} = constants
const depFields = [
  'dependencies',
  'devDependencies',
  'peerDependencies',
  'peerDependenciesMeta',
  'optionalDependencies',
  'bundleDependencies'
]
function getEntryIndexes(entries, keys) {
  return keys
    .map(n => entries.findIndex(p => p[0] === n))
    .filter(n => n !== -1)
    .sort((a, b) => a - b)
}
function getLowestEntryIndex(entries, keys) {
  return getEntryIndexes(entries, keys)?.[0] ?? -1
}
function getHighestEntryIndex(entries, keys) {
  return getEntryIndexes(entries, keys).at(-1) ?? -1
}
function updatePkgJsonField(editablePkgJson, field, value) {
  const { content: pkgJson } = editablePkgJson
  const oldValue = pkgJson[field]
  if (oldValue) {
    // The field already exists so we simply update the field value.
    if (field === PNPM$1) {
      const isPnpmObj = objects.isObject(oldValue)
      if (objects.hasKeys(value)) {
        editablePkgJson.update({
          [field]: {
            ...(isPnpmObj ? oldValue : {}),
            overrides: {
              ...(isPnpmObj ? oldValue[OVERRIDES] : {}),
              ...value
            }
          }
        })
      } else {
        // Properties with undefined values are omitted when saved as JSON.
        editablePkgJson.update(
          objects.hasKeys(oldValue)
            ? {
                [field]: {
                  ...(isPnpmObj ? oldValue : {}),
                  overrides: undefined
                }
              }
            : {
                [field]: undefined
              }
        )
      }
    } else if (field === OVERRIDES || field === RESOLUTIONS) {
      // Properties with undefined values are omitted when saved as JSON.
      editablePkgJson.update({
        [field]: objects.hasKeys(value) ? value : undefined
      })
    } else {
      editablePkgJson.update({
        [field]: value
      })
    }
    return
  }
  if (
    (field === OVERRIDES || field === PNPM$1 || field === RESOLUTIONS) &&
    !objects.hasKeys(value)
  ) {
    return
  }
  // Since the field doesn't exist we want to insert it into the package.json
  // in a place that makes sense, e.g. close to the "dependencies" field. If
  // we can't find a place to insert the field we'll add it to the bottom.
  const entries = Object.entries(pkgJson)
  let insertIndex = -1
  let isPlacingHigher = false
  if (field === OVERRIDES) {
    insertIndex = getLowestEntryIndex(entries, [RESOLUTIONS])
    if (insertIndex === -1) {
      isPlacingHigher = true
      insertIndex = getHighestEntryIndex(entries, [...depFields, PNPM$1])
    }
  } else if (field === RESOLUTIONS) {
    isPlacingHigher = true
    insertIndex = getHighestEntryIndex(entries, [
      ...depFields,
      OVERRIDES,
      PNPM$1
    ])
  } else if (field === PNPM$1) {
    insertIndex = getLowestEntryIndex(entries, [OVERRIDES, RESOLUTIONS])
    if (insertIndex === -1) {
      isPlacingHigher = true
      insertIndex = getHighestEntryIndex(entries, depFields)
    }
  }
  if (insertIndex === -1) {
    insertIndex = getLowestEntryIndex(entries, ['engines', 'files'])
  }
  if (insertIndex === -1) {
    isPlacingHigher = true
    insertIndex = getHighestEntryIndex(entries, ['exports', 'imports', 'main'])
  }
  if (insertIndex === -1) {
    insertIndex = entries.length
  } else if (isPlacingHigher) {
    insertIndex += 1
  }
  entries.splice(insertIndex, 0, [
    field,
    field === PNPM$1
      ? {
          [OVERRIDES]: value
        }
      : value
  ])
  editablePkgJson.fromJSON(
    `${JSON.stringify(Object.fromEntries(entries), null, 2)}\n`
  )
}
function updateOverridesField(editablePkgJson, overrides) {
  updatePkgJsonField(editablePkgJson, OVERRIDES, overrides)
}
function updateResolutionsField(editablePkgJson, overrides) {
  updatePkgJsonField(editablePkgJson, RESOLUTIONS, overrides)
}
function updatePnpmField(editablePkgJson, overrides) {
  updatePkgJsonField(editablePkgJson, PNPM$1, overrides)
}
const updateManifestByAgent = new Map([
  [BUN, updateResolutionsField],
  [NPM$2, updateOverridesField],
  [PNPM$1, updatePnpmField],
  [VLT, updateOverridesField],
  [YARN_BERRY, updateResolutionsField],
  [YARN_CLASSIC$1, updateResolutionsField]
])

const { NPM: NPM$1, PNPM, YARN_CLASSIC } = constants
const CMD_NAME$1 = 'socket optimize'
const manifestNpmOverrides = registry.getManifestData(NPM$1)
async function addOverrides(pkgPath, pkgEnvDetails, options) {
  const {
    agent,
    agentExecPath,
    lockName,
    lockSrc,
    npmExecPath,
    pkgPath: rootPath
  } = pkgEnvDetails
  const {
    logger,
    pin,
    prod,
    spinner,
    state = {
      added: new Set(),
      addedInWorkspaces: new Set(),
      updated: new Set(),
      updatedInWorkspaces: new Set(),
      warnedPnpmWorkspaceRequiresNpm: false
    }
  } = {
    __proto__: null,
    ...options
  }
  let { pkgJson: editablePkgJson } = pkgEnvDetails
  if (editablePkgJson === undefined) {
    editablePkgJson = await packages.readPackageJson(pkgPath, {
      editable: true
    })
  }
  const { content: pkgJson } = editablePkgJson
  const workspaceName = path$1.relative(rootPath, pkgPath)
  const workspaceGlobs = await getWorkspaceGlobs(agent, pkgPath, pkgJson)
  const isRoot = pkgPath === rootPath
  const isLockScanned = isRoot && !prod
  const isWorkspace = !!workspaceGlobs
  if (
    isWorkspace &&
    agent === PNPM &&
    // npmExecPath will === the agent name IF it CANNOT be resolved.
    npmExecPath === NPM$1 &&
    !state.warnedPnpmWorkspaceRequiresNpm
  ) {
    state.warnedPnpmWorkspaceRequiresNpm = true
    logger?.warn(
      cmdPrefixMessage(
        CMD_NAME$1,
        `${agent} workspace support requires \`npm ls\`, falling back to \`${agent} list\``
      )
    )
  }
  const overridesDataObjects = []
  if (pkgJson['private'] || isWorkspace) {
    overridesDataObjects.push(overridesDataByAgent.get(agent)(pkgJson))
  } else {
    overridesDataObjects.push(
      overridesDataByAgent.get(NPM$1)(pkgJson),
      overridesDataByAgent.get(YARN_CLASSIC)(pkgJson)
    )
  }
  spinner?.setText(
    `Adding overrides${workspaceName ? ` to ${workspaceName}` : ''}...`
  )
  const depAliasMap = new Map()
  const depEntries = getDependencyEntries(pkgJson)
  const manifestEntries = manifestNpmOverrides.filter(({ 1: data }) =>
    semver.satisfies(
      // Roughly check Node range as semver.coerce will strip leading
      // v's, carets (^), comparators (<,<=,>,>=,=), and tildes (~).
      semver.coerce(data.engines.node),
      pkgEnvDetails.pkgRequirements.node
    )
  )

  // Chunk package names to process them in parallel 3 at a time.
  await promises.pEach(manifestEntries, 3, async ({ 1: data }) => {
    const { name: sockRegPkgName, package: origPkgName, version } = data
    const major = semver.major(version)
    const sockOverridePrefix = `${NPM$1}:${sockRegPkgName}@`
    const sockOverrideSpec = `${sockOverridePrefix}${pin ? version : `^${major}`}`
    for (const { 1: depObj } of depEntries) {
      const sockSpec = objects.hasOwn(depObj, sockRegPkgName)
        ? depObj[sockRegPkgName]
        : undefined
      if (sockSpec) {
        depAliasMap.set(sockRegPkgName, sockSpec)
      }
      const origSpec = objects.hasOwn(depObj, origPkgName)
        ? depObj[origPkgName]
        : undefined
      if (origSpec) {
        let thisSpec = origSpec
        // Add package aliases for direct dependencies to avoid npm EOVERRIDE
        // errors...
        // https://docs.npmjs.com/cli/v8/using-npm/package-spec#aliases
        if (
          // ...if the spec doesn't start with a valid Socket override.
          !(
            thisSpec.startsWith(sockOverridePrefix) &&
            // Check the validity of the spec by passing it through npa and
            // seeing if it will coerce to a version.
            semver.coerce(npa(thisSpec).rawSpec)?.version
          )
        ) {
          thisSpec = sockOverrideSpec
          depObj[origPkgName] = thisSpec
          state.added.add(sockRegPkgName)
          if (workspaceName) {
            state.addedInWorkspaces.add(workspaceName)
          }
        }
        depAliasMap.set(origPkgName, thisSpec)
      }
    }
    if (isRoot) {
      // The AgentDepsIncludesFn and AgentLockIncludesFn types overlap in their
      // first two parameters. AgentLockIncludesFn accepts an optional third
      // parameter which AgentDepsIncludesFn will ignore so we cast thingScanner
      // as an AgentLockIncludesFn type.
      const thingScanner = isLockScanned
        ? lockfileIncludesByAgent.get(agent)
        : depsIncludesByAgent.get(agent)
      const thingToScan = isLockScanned
        ? lockSrc
        : await lsByAgent.get(agent)(agentExecPath, pkgPath, {
            npmExecPath
          })
      // Chunk package names to process them in parallel 3 at a time.
      await promises.pEach(
        overridesDataObjects,
        3,
        async ({ overrides, type }) => {
          const overrideExists = objects.hasOwn(overrides, origPkgName)
          if (
            overrideExists ||
            thingScanner(thingToScan, origPkgName, lockName)
          ) {
            const oldSpec = overrideExists ? overrides[origPkgName] : undefined
            const origDepAlias = depAliasMap.get(origPkgName)
            const sockRegDepAlias = depAliasMap.get(sockRegPkgName)
            const depAlias = sockRegDepAlias ?? origDepAlias
            let newSpec = sockOverrideSpec
            if (type === NPM$1 && depAlias) {
              // With npm one may not set an override for a package that one directly
              // depends on unless both the dependency and the override itself share
              // the exact same spec. To make this limitation easier to deal with,
              // overrides may also be defined as a reference to a spec for a direct
              // dependency by prefixing the name of the package to match the version
              // of with a $.
              // https://docs.npmjs.com/cli/v8/configuring-npm/package-json#overrides
              newSpec = `$${sockRegDepAlias ? sockRegPkgName : origPkgName}`
            } else if (typeof oldSpec === 'string') {
              const thisSpec = oldSpec.startsWith('$')
                ? depAlias || newSpec
                : oldSpec || newSpec
              if (thisSpec.startsWith(sockOverridePrefix)) {
                if (
                  pin &&
                  semver.major(
                    // Check the validity of the spec by passing it through npa
                    // and seeing if it will coerce to a version. semver.coerce
                    // will strip leading v's, carets (^), comparators (<,<=,>,>=,=),
                    // and tildes (~). If not coerced to a valid version then
                    // default to the manifest entry version.
                    semver.coerce(npa(thisSpec).rawSpec)?.version ?? version
                  ) !== major
                ) {
                  const otherVersion = (
                    await packages.fetchPackageManifest(thisSpec)
                  )?.version
                  if (otherVersion && otherVersion !== version) {
                    newSpec = `${sockOverridePrefix}${pin ? otherVersion : `^${semver.major(otherVersion)}`}`
                  }
                }
              } else {
                newSpec = oldSpec
              }
            }
            if (newSpec !== oldSpec) {
              overrides[origPkgName] = newSpec
              const addedOrUpdated = overrideExists ? 'updated' : 'added'
              state[addedOrUpdated].add(sockRegPkgName)
            }
          }
        }
      )
    }
  })
  if (workspaceGlobs) {
    const workspacePkgJsonPaths = await tinyglobby.glob(workspaceGlobs, {
      absolute: true,
      cwd: pkgPath,
      ignore: ['**/node_modules/**', '**/bower_components/**']
    })
    // Chunk package names to process them in parallel 3 at a time.
    await promises.pEach(
      workspacePkgJsonPaths,
      3,
      async workspacePkgJsonPath => {
        const otherState = await addOverrides(
          path$1.dirname(workspacePkgJsonPath),
          pkgEnvDetails,
          {
            logger,
            pin,
            prod,
            spinner
          }
        )
        for (const key of [
          'added',
          'addedInWorkspaces',
          'updated',
          'updatedInWorkspaces'
        ]) {
          for (const value of otherState[key]) {
            state[key].add(value)
          }
        }
      }
    )
  }
  if (state.added.size > 0 || state.updated.size > 0) {
    editablePkgJson.update(Object.fromEntries(depEntries))
    for (const { overrides, type } of overridesDataObjects) {
      updateManifestByAgent.get(type)(
        editablePkgJson,
        objects.toSortedObject(overrides)
      )
    }
    await editablePkgJson.save()
  }
  return state
}

const { NPM_BUGGY_OVERRIDES_PATCHED_VERSION } = constants
async function updateLockfile(pkgEnvDetails, options) {
  const {
    cmdName = '',
    logger,
    spinner
  } = {
    __proto__: null,
    ...options
  }
  const isSpinning = !!spinner?.['isSpinning']
  if (!isSpinning) {
    spinner?.start()
  }
  spinner?.setText(`Updating ${pkgEnvDetails.lockName}...`)
  try {
    await runAgentInstall(pkgEnvDetails, {
      spinner
    })
    if (pkgEnvDetails.features.npmBuggyOverrides) {
      logger?.log(
        `💡 Re-run ${cmdName ? `${cmdName} ` : ''}whenever ${pkgEnvDetails.lockName} changes.\n   This can be skipped for ${pkgEnvDetails.agent} >=${NPM_BUGGY_OVERRIDES_PATCHED_VERSION}.`
      )
    }
  } catch (e) {
    spinner?.stop()
    logger?.fail(
      cmdPrefixMessage(
        cmdName,
        `${pkgEnvDetails.agent} install failed to update ${pkgEnvDetails.lockName}`
      )
    )
    logger?.error(e)
  }
  if (isSpinning) {
    spinner?.start()
  } else {
    spinner?.stop()
  }
}

const CMD_NAME = 'socket optimize'
function createActionMessage(verb, overrideCount, workspaceCount) {
  return `${verb} ${overrideCount} Socket.dev optimized ${words.pluralize('override', overrideCount)}${workspaceCount ? ` in ${workspaceCount} ${words.pluralize('workspace', workspaceCount)}` : ''}`
}
async function applyOptimization(cwd, pin, prod) {
  const pkgEnvDetails = await detectAndValidatePackageEnvironment(cwd, {
    cmdName: CMD_NAME,
    logger: logger.logger,
    prod
  })
  if (!pkgEnvDetails) {
    return
  }
  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Socket optimizing...')
  const state = await addOverrides(pkgEnvDetails.pkgPath, pkgEnvDetails, {
    logger: logger.logger,
    pin,
    prod,
    spinner
  })
  const addedCount = state.added.size
  const updatedCount = state.updated.size
  const pkgJsonChanged = addedCount > 0 || updatedCount > 0
  if (pkgJsonChanged || pkgEnvDetails.features.npmBuggyOverrides) {
    await updateLockfile(pkgEnvDetails, {
      cmdName: CMD_NAME,
      logger: logger.logger,
      spinner
    })
  }
  spinner.stop()
  if (pkgJsonChanged) {
    if (updatedCount > 0) {
      logger.logger?.log(
        `${createActionMessage('Updated', updatedCount, state.updatedInWorkspaces.size)}${addedCount ? '.' : '🚀'}`
      )
    }
    if (addedCount > 0) {
      logger.logger?.log(
        `${createActionMessage('Added', addedCount, state.addedInWorkspaces.size)} 🚀`
      )
    }
  } else {
    logger.logger?.log('Congratulations! Already Socket.dev optimized 🎉')
  }
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$l } = constants
const config$n = {
  commandName: 'optimize',
  description: 'Optimize dependencies with @socketregistry overrides',
  hidden: false,
  flags: {
    ...commonFlags,
    pin: {
      type: 'boolean',
      default: false,
      description: 'Pin overrides to their latest version'
    },
    prod: {
      type: 'boolean',
      default: false,
      description: 'Only add overrides for production dependencies'
    }
  },
  help: (command, config) => `
    Usage
      $ ${command}

    Options
      ${getFlagListOutput(config.flags, 6)}

    Examples
      $ ${command}
      $ ${command} --pin
  `
}
const cmdOptimize = {
  description: config$n.description,
  hidden: config$n.hidden,
  run: run$n
}
async function run$n(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$n,
    importMeta,
    parentName
  })
  const cwd = process.cwd()
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$l)
    return
  }
  await applyOptimization(
    cwd,
    Boolean(cli.flags['pin']),
    Boolean(cli.flags['prod'])
  )
}

async function fetchOrganization() {
  const sockSdk = await shadowNpmInject.setupSdk()

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Fetching organization list...')
  const result = await handleApiCall(
    sockSdk.getOrganizations(),
    'looking up organizations'
  )
  spinner.successAndStop('Received organization list response.')
  if (!result.success) {
    handleUnsuccessfulApiResponse('getOrganizations', result)
  }
  return result.data
}

async function outputOrganizationList(data, outputKind = 'text') {
  const organizations = Object.values(data.organizations)
  const apiToken = shadowNpmInject.getDefaultToken()
  const lastFiveOfApiToken = getLastFiveOfApiToken(apiToken ?? '?????')
  switch (outputKind) {
    case 'json': {
      logger.logger.log(
        JSON.stringify(
          organizations.map(o => ({
            name: o.name,
            id: o.id,
            plan: o.plan
          })),
          null,
          2
        )
      )
      return
    }
    case 'markdown': {
      // | Syntax      | Description |
      // | ----------- | ----------- |
      // | Header      | Title       |
      // | Paragraph   | Text        |
      let mw1 = 4
      let mw2 = 2
      let mw3 = 4
      for (const o of organizations) {
        mw1 = Math.max(mw1, o.name?.length ?? 0)
        mw2 = Math.max(mw2, o.id.length)
        mw3 = Math.max(mw3, o.plan.length)
      }
      logger.logger.log('# Organizations\n')
      logger.logger.log(
        `List of organizations associated with your API key, ending with: ${colors.italic(lastFiveOfApiToken)}\n`
      )
      logger.logger.log(
        `| Name${' '.repeat(mw1 - 4)} | ID${' '.repeat(mw2 - 2)} | Plan${' '.repeat(mw3 - 4)} |`
      )
      logger.logger.log(
        `| ${'-'.repeat(mw1)} | ${'-'.repeat(mw2)} | ${'-'.repeat(mw3)} |`
      )
      for (const o of organizations) {
        logger.logger.log(
          `| ${(o.name || '').padEnd(mw1, ' ')} | ${(o.id || '').padEnd(mw2, ' ')} | ${(o.plan || '').padEnd(mw3, ' ')} |`
        )
      }
      logger.logger.log(
        `| ${'-'.repeat(mw1)} | ${'-'.repeat(mw2)} | ${'-'.repeat(mw3)} |`
      )
      return
    }
    default: {
      logger.logger.log(
        `List of organizations associated with your API key, ending with: ${colors.italic(lastFiveOfApiToken)}\n`
      )
      // Just dump
      for (const o of organizations) {
        logger.logger.log(
          `- Name: ${colors.bold(o.name ?? 'undefined')}, ID: ${colors.bold(o.id)}, Plan: ${colors.bold(o.plan)}`
        )
      }
    }
  }
}

async function handleOrganizationList(outputKind = 'text') {
  const data = await fetchOrganization()
  if (!data) {
    return
  }
  await outputOrganizationList(data, outputKind)
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$k } = constants
const config$m = {
  commandName: 'list',
  description: 'List organizations associated with the API key used',
  hidden: false,
  flags: {
    ...commonFlags,
    ...outputFlags
  },
  help: (command, _config) => `
    Usage
      $ ${command}

    API Token Requirements
      - Quota: 1 unit
      - Permissions: none (does need a token)

    Options
      ${getFlagListOutput(config$m.flags, 6)}
  `
}
const cmdOrganizationList = {
  description: config$m.description,
  hidden: config$m.hidden,
  run: run$m
}
async function run$m(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$m,
    importMeta,
    parentName
  })
  const { json, markdown } = cli.flags
  const apiToken = shadowNpmInject.getDefaultToken()
  const wasBadInput = handleBadInput(
    {
      nook: true,
      test: !json || !markdown,
      message:
        'The `--json` and `--markdown` flags can not be used at the same time',
      pass: 'ok',
      fail: 'bad'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$k)
    return
  }
  await handleOrganizationList(json ? 'json' : markdown ? 'markdown' : 'text')
}

async function fetchLicensePolicy(orgSlug) {
  const sockSdk = await shadowNpmInject.setupSdk()

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Fetching organization license policy...')
  const result = await handleApiCall(
    sockSdk.getOrgLicensePolicy(orgSlug),
    'looking up organization quota'
  )
  spinner.successAndStop('Received organization license policy response.')
  if (!result.success) {
    handleUnsuccessfulApiResponse('getOrgLicensePolicy', result)
  }
  return result.data
}

async function outputLicensePolicy(data, outputKind) {
  if (outputKind === 'json') {
    let json
    try {
      json = JSON.stringify(data, null, 2)
    } catch {
      console.error(
        'Failed to convert the server response to json, try running the same command without --json'
      )
      return
    }
    logger.logger.log(json)
    logger.logger.log('')
    return
  }
  logger.logger.error('Use --json to get the full result')
  logger.logger.log('# License policy')
  logger.logger.log('')
  logger.logger.log('This is the license policy for your organization:')
  logger.logger.log('')
  const rules = data.license_policy
  // @ts-ignore -- not sure what it's complaining about
  const entries = Object.entries(rules)
  const mapped = entries.map(([key, value]) => [
    key,
    value.allowed ? ' yes' : ' no'
  ])
  mapped.sort(([a], [b]) => (a < b ? -1 : a > b ? 1 : 0))
  logger.logger.log(mdTableOfPairs(mapped, ['License Name', 'Allowed']))
  logger.logger.log('')
}

async function handleLicensePolicy(orgSlug, outputKind) {
  const data = await fetchLicensePolicy(orgSlug)
  if (!data) {
    return
  }
  await outputLicensePolicy(data, outputKind)
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$j } = constants

// TODO: secret toplevel alias `socket license policy`?
const config$l = {
  commandName: 'license',
  description: 'Retrieve the license policy of an organization',
  hidden: true,
  flags: {
    ...commonFlags,
    ...outputFlags
  },
  help: (command, _config) => `
    Usage
      $ ${command} <org slug>

    API Token Requirements
      - Quota: 1 unit
      - Permissions: license-policy:read

    Options
      ${getFlagListOutput(config$l.flags, 6)}

    Your API token will need the \`license-policy:read\` permission otherwise
    the request will fail with an authentication error.

    Examples
      $ ${command} mycorp
      $ ${command} mycorp --json
  `
}
const cmdOrganizationPolicyLicense = {
  description: config$l.description,
  hidden: config$l.hidden,
  run: run$l
}
async function run$l(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$l,
    importMeta,
    parentName
  })
  const json = Boolean(cli.flags['json'])
  const markdown = Boolean(cli.flags['markdown'])
  const defaultOrgSlug = shadowNpmInject.getConfigValue('defaultOrg')
  const orgSlug = defaultOrgSlug || cli.input[0] || ''
  const apiToken = shadowNpmInject.getDefaultToken()
  const wasBadInput = handleBadInput(
    {
      nook: true,
      test: orgSlug,
      message: 'Org name as the first argument',
      pass: 'ok',
      fail: 'missing'
    },
    {
      nook: true,
      test: !json || !markdown,
      message: 'The json and markdown flags cannot be both set, pick one',
      pass: 'ok',
      fail: 'omit one'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$j)
    return
  }
  await handleLicensePolicy(
    orgSlug,
    json ? 'json' : markdown ? 'markdown' : 'text'
  )
}

async function fetchSecurityPolicy(orgSlug) {
  const sockSdk = await shadowNpmInject.setupSdk()

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Fetching organization security policy...')
  const result = await handleApiCall(
    sockSdk.getOrgSecurityPolicy(orgSlug),
    'looking up organization quota'
  )
  spinner.successAndStop('Received organization security policy response.')
  if (!result.success) {
    handleUnsuccessfulApiResponse('getOrgSecurityPolicy', result)
  }
  return result.data
}

async function outputSecurityPolicy(data, outputKind) {
  if (outputKind === 'json') {
    let json
    try {
      json = JSON.stringify(data, null, 2)
    } catch {
      console.error(
        'Failed to convert the server response to json, try running the same command without --json'
      )
      return
    }
    logger.logger.log(json)
    logger.logger.log('')
    return
  }
  logger.logger.log('# Security policy')
  logger.logger.log('')
  logger.logger.log(
    `The default security policy setting is: "${data.securityPolicyDefault}"`
  )
  logger.logger.log('')
  logger.logger.log(
    'These are the security policies per setting for your organization:'
  )
  logger.logger.log('')
  const rules = data.securityPolicyRules
  const entries = Object.entries(rules)
  const mapped = entries.map(([key, value]) => [key, value.action])
  mapped.sort(([a], [b]) => (a < b ? -1 : a > b ? 1 : 0))
  logger.logger.log(mdTableOfPairs(mapped, ['name', 'action']))
  logger.logger.log('')
}

async function handleSecurityPolicy(orgSlug, outputKind) {
  const data = await fetchSecurityPolicy(orgSlug)
  if (!data) {
    return
  }
  await outputSecurityPolicy(data, outputKind)
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$i } = constants

// TODO: secret toplevel alias `socket security policy`?
const config$k = {
  commandName: 'security',
  description: 'Retrieve the security policy of an organization',
  hidden: true,
  flags: {
    ...commonFlags,
    ...outputFlags
  },
  help: (command, _config) => `
    Usage
      $ ${command} <org slug>

    API Token Requirements
      - Quota: 1 unit
      - Permissions: security-policy:read

    Options
      ${getFlagListOutput(config$k.flags, 6)}

    Your API token will need the \`security-policy:read\` permission otherwise
    the request will fail with an authentication error.

    Examples
      $ ${command} mycorp
      $ ${command} mycorp --json
  `
}
const cmdOrganizationPolicyPolicy = {
  description: config$k.description,
  hidden: config$k.hidden,
  run: run$k
}
async function run$k(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$k,
    importMeta,
    parentName
  })
  const json = Boolean(cli.flags['json'])
  const markdown = Boolean(cli.flags['markdown'])
  const defaultOrgSlug = shadowNpmInject.getConfigValue('defaultOrg')
  const orgSlug = defaultOrgSlug || cli.input[0] || ''
  const apiToken = shadowNpmInject.getDefaultToken()
  const wasBadInput = handleBadInput(
    {
      nook: true,
      test: orgSlug,
      message: 'Org name as the first argument',
      pass: 'ok',
      fail: 'missing'
    },
    {
      nook: true,
      test: !json || !markdown,
      message: 'The json and markdown flags cannot be both set, pick one',
      pass: 'ok',
      fail: 'omit one'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$i)
    return
  }
  await handleSecurityPolicy(
    orgSlug,
    json ? 'json' : markdown ? 'markdown' : 'text'
  )
}

const description$5 = 'Organization policy details'
const cmdOrganizationPolicy = {
  description: description$5,
  // Hidden because it was broken all this time (nobody could be using it)
  // and we're not sure if it's useful to anyone in its current state.
  // Until we do, we'll hide this to keep the help tidier.
  // And later, we may simply move this under `scan`, anyways.
  hidden: true,
  async run(argv, importMeta, { parentName }) {
    await meowWithSubcommands(
      {
        security: cmdOrganizationPolicyPolicy,
        license: cmdOrganizationPolicyLicense
      },
      {
        argv,
        description: description$5,
        defaultSub: 'list',
        // Backwards compat
        importMeta,
        name: parentName + ' policy'
      }
    )
  }
}

async function fetchQuota() {
  const sockSdk = await shadowNpmInject.setupSdk()

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Fetching organization quota...')
  const result = await handleApiCall(
    sockSdk.getQuota(),
    'looking up organization quota'
  )
  spinner.successAndStop('Received organization quota response.')
  if (!result.success) {
    handleUnsuccessfulApiResponse('getQuota', result)
  }
  return result.data
}

async function outputQuota(data, outputKind = 'text') {
  if (outputKind === 'json') {
    let json
    try {
      json = JSON.stringify(data, null, 2)
    } catch {
      console.error(
        'Failed to convert the server response to json, try running the same command without --json'
      )
      return
    }
    logger.logger.log(json)
    logger.logger.log('')
    return
  }
  if (outputKind === 'markdown') {
    logger.logger.log('# Quota')
    logger.logger.log('')
    logger.logger.log(`Quota left on the current API token: ${data.quota}`)
    logger.logger.log('')
    return
  }
  logger.logger.log(`Quota left on the current API token: ${data.quota}`)
  logger.logger.log('')
}

async function handleQuota(outputKind = 'text') {
  const data = await fetchQuota()
  if (!data) {
    return
  }
  await outputQuota(data, outputKind)
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$h } = constants
const config$j = {
  commandName: 'quota',
  description: 'List organizations associated with the API key used',
  hidden: true,
  flags: {
    ...commonFlags,
    ...outputFlags
  },
  help: (command, _config) => `
    Usage
      $ ${command}

    Options
      ${getFlagListOutput(config$j.flags, 6)}
  `
}
const cmdOrganizationQuota = {
  description: config$j.description,
  hidden: config$j.hidden,
  run: run$j
}
async function run$j(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$j,
    importMeta,
    parentName
  })
  const json = Boolean(cli.flags['json'])
  const markdown = Boolean(cli.flags['markdown'])
  const apiToken = shadowNpmInject.getDefaultToken()
  const wasBadInput = handleBadInput(
    {
      nook: true,
      test: !json || !markdown,
      message: 'The json and markdown flags cannot be both set, pick one',
      pass: 'ok',
      fail: 'omit one'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$h)
    return
  }
  await handleQuota(json ? 'json' : markdown ? 'markdown' : 'text')
}

const description$4 = 'Account details'
const cmdOrganization = {
  description: description$4,
  // Hidden because it was broken all this time (nobody could be using it)
  // and we're not sure if it's useful to anyone in its current state.
  // Until we do, we'll hide this to keep the help tidier.
  // And later, we may simply move this under `scan`, anyways.
  hidden: true,
  async run(argv, importMeta, { parentName }) {
    await meowWithSubcommands(
      {
        list: cmdOrganizationList,
        quota: cmdOrganizationQuota,
        policy: cmdOrganizationPolicy
      },
      {
        argv,
        description: description$4,
        defaultSub: 'list',
        // Backwards compat
        importMeta,
        name: parentName + ' organization'
      }
    )
  }
}

const { SOCKET_CLI_ISSUES_URL } = constants
async function fetchPurlDeepScore(purl) {
  const apiToken = shadowNpmInject.getDefaultToken()
  if (!apiToken) {
    throw new shadowNpmInject.AuthError(
      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'
    )
  }

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Getting deep package score...')
  let result
  try {
    result = await queryApi(`purl/score/${encodeURIComponent(purl)}`, apiToken)
    spinner.successAndStop('Received deep package score response.')
  } catch (e) {
    spinner.failAndStop('The request was unsuccessful.')
    const msg = e?.message
    if (msg) {
      logger.logger.fail(msg)
      logger.logger.log(
        'Please report this if the error persists or use the cli version that includes error reporting to automate that'
      )
    } else {
      logger.logger.log(
        'An error happened but no reason was given. If this persists please let us know about it and what you were trying to achieve. Thank you.'
      )
    }
    return
  }
  if (!result.ok) {
    const err = await handleApiError(result.status)
    logger.logger.fail(failMsgWithBadge(result.statusText, err))
    process.exitCode = 1
    return
  }
  const data = await handleApiCall(await result.text(), 'Reading text')
  try {
    return JSON.parse(data)
  } catch (e) {
    throw new Error(
      `Unable to parse JSON response from the Socket API.\nPlease report to ${SOCKET_CLI_ISSUES_URL}`
    )
  }
}

async function outputPurlScore(purl, data, outputKind) {
  if (outputKind === 'json') {
    let json
    try {
      json = JSON.stringify(data, null, 2)
    } catch {
      console.error(
        'Failed to convert the server response to JSON... Please try again or reach out to customer support.'
      )
      process.exitCode = 1
      return
    }
    logger.logger.error(`Score report for "${purl}":\n`)
    logger.logger.log(json)
    logger.logger.log('')
    return
  }
  if (outputKind === 'markdown') {
    const {
      purl: requestedPurl,
      self: {
        alerts: selfAlerts,
        capabilities: selfCaps,
        purl,
        score: selfScore
      },
      transitively: {
        alerts,
        capabilities,
        dependencyCount,
        func,
        lowest,
        score
      }
    } = data
    logger.logger.error(`Score report for "${requestedPurl}" ("${purl}"):\n`)
    logger.logger.log('# Complete Package Score')
    logger.logger.log('')
    if (dependencyCount) {
      logger.logger.log(
        `This is a Socket report for the package *"${purl}"* and its *${dependencyCount}* direct/transitive dependencies.`
      )
    } else {
      logger.logger.log(
        `This is a Socket report for the package *"${purl}"*. It has *no dependencies*.`
      )
    }
    logger.logger.log('')
    if (dependencyCount) {
      logger.logger.log(
        `It will show you the shallow score for just the package itself and a deep score for all the transitives combined. Additionally you can see which capabilities were found and the top alerts as well as a package that was responsible for it.`
      )
    } else {
      logger.logger.log(
        `It will show you the shallow score for the package itself, which capabilities were found, and its top alerts.`
      )
      logger.logger.log('')
      logger.logger.log(
        'Since it has no dependencies, the shallow score is also the deep score.'
      )
    }
    logger.logger.log('')
    if (dependencyCount) {
      // This doesn't make much sense if there are no dependencies. Better to omit it.
      logger.logger.log(
        'The report should give you a good insight into the status of this package.'
      )
      logger.logger.log('')
      logger.logger.log('## Package itself')
      logger.logger.log('')
      logger.logger.log(
        'Here are results for the package itself (excluding data from dependencies).'
      )
    } else {
      logger.logger.log('## Report')
      logger.logger.log('')
      logger.logger.log(
        'The report should give you a good insight into the status of this package.'
      )
    }
    logger.logger.log('')
    logger.logger.log('### Shallow Score')
    logger.logger.log('')
    logger.logger.log('This score is just for the package itself:')
    logger.logger.log('')
    logger.logger.log('- Overall: ' + selfScore.overall)
    logger.logger.log('- Maintenance: ' + selfScore.maintenance)
    logger.logger.log('- Quality: ' + selfScore.quality)
    logger.logger.log('- Supply Chain: ' + selfScore.supplyChain)
    logger.logger.log('- Vulnerability: ' + selfScore.vulnerability)
    logger.logger.log('- License: ' + selfScore.license)
    logger.logger.log('')
    logger.logger.log('### Capabilities')
    logger.logger.log('')
    if (selfCaps.length) {
      logger.logger.log(
        'These are the capabilities detected in the package itself:'
      )
      logger.logger.log('')
      selfCaps.forEach(cap => {
        logger.logger.log(`- ${cap}`)
      })
    } else {
      logger.logger.log('No capabilities were found in the package.')
    }
    logger.logger.log('')
    logger.logger.log('### Alerts for this package')
    logger.logger.log('')
    if (selfAlerts.length) {
      if (dependencyCount) {
        logger.logger.log('These are the alerts found for the package itself:')
      } else {
        logger.logger.log('These are the alerts found for this package:')
      }
      logger.logger.log('')
      logger.logger.log(
        mdTable(selfAlerts, ['severity', 'name'], ['Severity', 'Alert Name'])
      )
    } else {
      logger.logger.log('There are currently no alerts for this package.')
    }
    logger.logger.log('')
    if (dependencyCount) {
      logger.logger.log('## Transitive Package Results')
      logger.logger.log('')
      logger.logger.log(
        'Here are results for the package and its direct/transitive dependencies.'
      )
      logger.logger.log('')
      logger.logger.log('### Deep Score')
      logger.logger.log('')
      logger.logger.log(
        'This score represents the package and and its direct/transitive dependencies:'
      )
      logger.logger.log(
        `The function used to calculate the values in aggregate is: *"${func}"*`
      )
      logger.logger.log('')
      logger.logger.log('- Overall: ' + score.overall)
      logger.logger.log('- Maintenance: ' + score.maintenance)
      logger.logger.log('- Quality: ' + score.quality)
      logger.logger.log('- Supply Chain: ' + score.supplyChain)
      logger.logger.log('- Vulnerability: ' + score.vulnerability)
      logger.logger.log('- License: ' + score.license)
      logger.logger.log('')
      logger.logger.log('### Capabilities')
      logger.logger.log('')
      logger.logger.log(
        'These are the packages with the lowest recorded score. If there is more than one with the lowest score, just one is shown here. This may help you figure out the source of low scores.'
      )
      logger.logger.log('')
      logger.logger.log('- Overall: ' + lowest.overall)
      logger.logger.log('- Maintenance: ' + lowest.maintenance)
      logger.logger.log('- Quality: ' + lowest.quality)
      logger.logger.log('- Supply Chain: ' + lowest.supplyChain)
      logger.logger.log('- Vulnerability: ' + lowest.vulnerability)
      logger.logger.log('- License: ' + lowest.license)
      logger.logger.log('')
      logger.logger.log('### Capabilities')
      logger.logger.log('')
      if (capabilities.length) {
        logger.logger.log(
          'These are the capabilities detected in at least one package:'
        )
        logger.logger.log('')
        capabilities.forEach(cap => {
          logger.logger.log(`- ${cap}`)
        })
      } else {
        logger.logger.log(
          'This package had no capabilities and neither did any of its direct/transitive dependencies.'
        )
      }
      logger.logger.log('')
      logger.logger.log('### Alerts')
      logger.logger.log('')
      if (alerts.length) {
        logger.logger.log('These are the alerts found:')
        logger.logger.log('')
        logger.logger.log(
          mdTable(
            alerts,
            ['severity', 'name', 'example'],
            ['Severity', 'Alert Name', 'Example package reporting it']
          )
        )
      } else {
        logger.logger.log(
          'This package had no alerts and neither did any of its direct/transitive dependencies'
        )
      }
      logger.logger.log('')
    }
    return
  }
  logger.logger.log(
    `Score report for "${purl}" (use --json for raw and --markdown for formatted reports):`
  )
  logger.logger.log(data)
  logger.logger.log('')
}

async function handlePurlDeepScore(purl, outputKind) {
  const data = await fetchPurlDeepScore(purl)
  if (!data) {
    return
  }
  await outputPurlScore(purl, data, outputKind)
}

// Either an ecosystem was given or all args must be (namespaced) purls
// The `pkg:` part is optional here. We'll scan for `eco/name@version`.
// Not hardcoding the namespace since we don't know what the server accepts.
// The ecosystem is considered as the first package if it is not an a-z string.
function parsePackageSpecifiers(ecosystem, pkgs) {
  let valid = true
  const purls = []
  if (!ecosystem) {
    valid = false
  } else if (/^[a-zA-Z]+$/.test(ecosystem)) {
    for (let i = 0; i < pkgs.length; ++i) {
      const pkg = pkgs[i] ?? ''
      if (!pkg) {
        valid = false
        break
      } else if (pkg.startsWith('pkg:')) {
        // keep
        purls.push(pkg)
      } else if (pkg.includes('/')) {
        // Looks like this arg was already namespaced
        purls.push('pkg:' + pkg)
      } else {
        purls.push('pkg:' + ecosystem + '/' + pkg)
      }
    }
    if (!purls.length) {
      valid = false
    }
  } else {
    // Assume ecosystem is a purl, too
    pkgs.unshift(ecosystem)
    for (let i = 0; i < pkgs.length; ++i) {
      const pkg = pkgs[i] ?? ''
      if (!/^(?:pkg:)?[a-zA-Z]+\/./.test(pkg)) {
        // At least one purl did not start with `pkg:eco/x` or `eco/x`
        valid = false
        break
      } else if (pkg.startsWith('pkg:')) {
        purls.push(pkg)
      } else {
        purls.push('pkg:' + pkg)
      }
    }
    if (!purls.length) {
      valid = false
    }
  }
  return {
    purls,
    valid
  }
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$g } = constants
const config$i = {
  commandName: 'score',
  description:
    'Look up score for one package which reflects all of its transitive dependencies as well',
  hidden: true,
  flags: {
    ...commonFlags,
    ...outputFlags
  },
  help: (command, config) => `
    Usage
      $ ${command} <<ecosystem> <name> | <purl>>

    API Token Requirements
      - Quota: 100 units
      - Permissions: packages:list

    Options
      ${getFlagListOutput(config.flags, 6)}

    Show deep scoring details for one package. The score will reflect the package
    itself, any of its dependencies, and any of its transitive dependencies.

    When you want to know whether to trust a package, this is the command to run.

    See also the \`socket package shallow\` command, which returns the shallow
    score for any number of packages. That will not reflect the dependency scores.

    Only a few ecosystems are supported like npm, golang, and maven.

    A "purl" is a standard package name formatting: \`pkg:eco/name@version\`
    This command will automatically prepend "pkg:" when not present.

    The version is optional but when given should be a direct match.

    Examples
      $ ${command} npm babel-cli
      $ ${command} npm babel-cli@1.9.1
      $ ${command} npm/babel-cli@1.9.1
      $ ${command} pkg:npm/babel-cli@1.9.1
  `
}
const cmdPackageScore = {
  description: config$i.description,
  hidden: config$i.hidden,
  run: run$i
}
async function run$i(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$i,
    importMeta,
    parentName
  })
  const { json, markdown } = cli.flags
  const [ecosystem = '', purl] = cli.input
  const apiToken = shadowNpmInject.getDefaultToken()
  const { purls, valid } = parsePackageSpecifiers(ecosystem, purl ? [purl] : [])
  const wasBadInput = handleBadInput(
    {
      test: valid,
      message: 'First parameter must be an ecosystem or the whole purl',
      pass: 'ok',
      fail: 'bad'
    },
    {
      test: purls.length === 1,
      message: 'Expecting at least one package',
      pass: 'ok',
      fail: purls.length === 0 ? 'missing' : 'too many'
    },
    {
      nook: true,
      test: !json || !markdown,
      message: 'The json and markdown flags cannot be both set, pick one',
      pass: 'ok',
      fail: 'omit one'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$g)
    return
  }
  await handlePurlDeepScore(
    purls[0] || '',
    json ? 'json' : markdown ? 'markdown' : 'text'
  )
}

async function fetchPurlsShallowScore(purls) {
  logger.logger.error(
    `Requesting shallow score data for ${purls.length} package urls (purl): ${purls.join(', ')}`
  )
  const sockSdk = await shadowNpmInject.setupSdk(
    shadowNpmInject.getPublicToken()
  )

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start(`Requesting data ...`)
  const result = await handleApiCall(
    sockSdk.batchPackageFetch(
      {
        alerts: 'true'
      },
      {
        components: purls.map(purl => ({
          purl
        }))
      }
    ),
    'looking up package'
  )
  spinner.successAndStop('Request completed')
  if (!result.success) {
    handleUnsuccessfulApiResponse('batchPackageFetch', result)
  }
  return result
}

function outputPurlsShallowScore(purls, packageData, outputKind) {
  if (outputKind === 'json') {
    // In JSON simply return what the server responds with. Don't bother trying
    // to match the response with the requested packages/purls.
    logger.logger.log(JSON.stringify(packageData, undefined, 2))
    return
  }

  // Make some effort to match the requested data with the response

  const set = new Set()
  packageData.forEach(data => {
    set.add('pkg:' + data.type + '/' + data.name + '@' + data.version)
    set.add('pkg:' + data.type + '/' + data.name)
  })
  const missing = purls.filter(purl => {
    if (set.has(purl)) {
      return false
    }
    if (purl.endsWith('@latest') && set.has(purl.slice(0, -'@latest'.length))) {
      return false
    }
    return true // not found
  })
  if (outputKind === 'markdown') {
    logger.logger.log(commonTags.stripIndents`
      # Shallow Package Report

      This report contains the response for requesting data on some package url(s).

      Please note: The listed scores are ONLY for the package itself. It does NOT
                   reflect the scores of any dependencies, transitive or otherwise.

      ${missing.length ? `\n## Missing response\n\nAt least one package had no response or the purl was not canonical:\n\n${missing.map(purl => '- ' + purl + '\n').join('')}` : ''}

      ${packageData.map(data => '## ' + formatReportCard(data, false)).join('\n\n\n')}
    `)
    return
  }
  logger.logger.log('\n' + colors.bold('Shallow Package Score') + '\n')
  logger.logger.log(
    'Please note: The listed scores are ONLY for the package itself. It does NOT\n' +
      '             reflect the scores of any dependencies, transitive or otherwise.'
  )
  if (missing.length) {
    logger.logger.log(
      `\nAt least one package had no response or the purl was not canonical:\n${missing.map(purl => '\n- ' + colors.bold(purl)).join('')}`
    )
  }
  packageData.forEach(data => {
    logger.logger.log('\n')
    logger.logger.log(formatReportCard(data, true))
  })
  logger.logger.log('')
}
function formatReportCard(data, color) {
  const scoreResult = {
    'Supply Chain Risk': Math.floor((data.score?.supplyChain ?? 0) * 100),
    Maintenance: Math.floor((data.score?.maintenance ?? 0) * 100),
    Quality: Math.floor((data.score?.quality ?? 0) * 100),
    Vulnerabilities: Math.floor((data.score?.vulnerability ?? 0) * 100),
    License: Math.floor((data.score?.license ?? 0) * 100)
  }
  const alertString = getAlertString(data.alerts, !color)
  const purl = 'pkg:' + data.type + '/' + data.name + '@' + data.version
  return [
    'Package: ' + (color ? colors.bold(purl) : purl),
    '',
    ...Object.entries(scoreResult).map(
      score =>
        `- ${score[0]}:`.padEnd(20, ' ') +
        `  ${formatScore(score[1], !color, true)}`
    ),
    alertString
  ].join('\n')
}
function formatScore(score, noColor = false, pad = false) {
  const padded = String(score).padStart(pad ? 3 : 0, ' ')
  if (noColor) {
    return padded
  }
  if (score >= 80) {
    return colors.green(padded)
  }
  if (score >= 60) {
    return colors.yellow(padded)
  }
  return colors.red(padded)
}
function getAlertString(alerts, noColor = false) {
  if (!alerts?.length) {
    return noColor ? `- Alerts: none!` : `- Alerts: ${colors.green('none')}!`
  }
  const bad = alerts
    .filter(alert => alert.severity !== 'low' && alert.severity !== 'middle')
    .sort((a, b) => (a.type < b.type ? -1 : a.type > b.type ? 1 : 0))
  const mid = alerts
    .filter(alert => alert.severity === 'middle')
    .sort((a, b) => (a.type < b.type ? -1 : a.type > b.type ? 1 : 0))
  const low = alerts
    .filter(alert => alert.severity === 'low')
    .sort((a, b) => (a.type < b.type ? -1 : a.type > b.type ? 1 : 0))

  // We need to create the no-color string regardless because the actual string
  // contains a bunch of invisible ANSI chars which would screw up length checks.
  const colorless = `- Alerts (${bad.length}/${mid.length.toString()}/${low.length}):`
  if (noColor) {
    return (
      colorless +
      ' '.repeat(Math.max(0, 20 - colorless.length)) +
      '  ' +
      [
        bad.map(alert => `[${alert.severity}] ` + alert.type).join(', '),
        mid.map(alert => `[${alert.severity}] ` + alert.type).join(', '),
        low.map(alert => `[${alert.severity}] ` + alert.type).join(', ')
      ]
        .filter(Boolean)
        .join(', ')
    )
  }
  return (
    `- Alerts (${colors.red(bad.length.toString())}/${colors.yellow(mid.length.toString())}/${low.length}):` +
    ' '.repeat(Math.max(0, 20 - colorless.length)) +
    '  ' +
    [
      bad
        .map(alert =>
          colors.red(colors.dim(`[${alert.severity}] `) + alert.type)
        )
        .join(', '),
      mid
        .map(alert =>
          colors.yellow(colors.dim(`[${alert.severity}] `) + alert.type)
        )
        .join(', '),
      low
        .map(alert => colors.dim(`[${alert.severity}] `) + alert.type)
        .join(', ')
    ]
      .filter(Boolean)
      .join(', ')
  )
}

async function handlePurlsShallowScore({ outputKind, purls }) {
  const packageData = await fetchPurlsShallowScore(purls)
  if (!packageData) {
    return
  }
  outputPurlsShallowScore(purls, packageData.data, outputKind)
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$f } = constants
const config$h = {
  commandName: 'shallow',
  description:
    'Look up info regarding one or more packages but not their transitives',
  hidden: true,
  flags: {
    ...commonFlags,
    ...outputFlags
  },
  help: (command, config) => `
    Usage
      $ ${command} <<ecosystem> <name> [<name> ...] | <purl> [<purl> ...]>

    API Token Requirements
      - Quota: 100 units
      - Permissions: packages:list

    Options
      ${getFlagListOutput(config.flags, 6)}

    Show scoring details for one or more packages purely based on their own package.
    This means that any dependency scores are not reflected by the score. You can
    use the \`socket package score <pkg>\` command to get its full transitive score.

    Only a few ecosystems are supported like npm, golang, and maven.

    A "purl" is a standard package name formatting: \`pkg:eco/name@version\`
    This command will automatically prepend "pkg:" when not present.

    If the first arg is an ecosystem, remaining args that are not a purl are
    assumed to be scoped to that ecosystem.

    Examples
      $ ${command} npm webtorrent
      $ ${command} npm webtorrent@1.9.1
      $ ${command} npm/webtorrent@1.9.1
      $ ${command} pkg:npm/webtorrent@1.9.1
      $ ${command} maven webtorrent babel
      $ ${command} npm/webtorrent golang/babel
      $ ${command} npm npm/webtorrent@1.0.1 babel
  `
}
const cmdPackageShallow = {
  description: config$h.description,
  hidden: config$h.hidden,
  alias: {
    shallowScore: {
      description: config$h.description,
      hidden: true,
      argv: []
    }
  },
  run: run$h
}
async function run$h(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$h,
    importMeta,
    parentName
  })
  const { json, markdown } = cli.flags
  const [ecosystem = '', ...pkgs] = cli.input
  const { purls, valid } = parsePackageSpecifiers(ecosystem, pkgs)
  const wasBadInput = handleBadInput(
    {
      test: valid,
      message:
        'First parameter should be an ecosystem or all args must be purls',
      pass: 'ok',
      fail: 'bad'
    },
    {
      test: purls.length > 0,
      message: 'Expecting at least one package',
      pass: 'ok',
      fail: 'missing'
    },
    {
      nook: true,
      test: !json || !markdown,
      message: 'The json and markdown flags cannot be both set, pick one',
      pass: 'ok',
      fail: 'omit one'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$f)
    return
  }
  await handlePurlsShallowScore({
    outputKind: json ? 'json' : markdown ? 'markdown' : 'text',
    purls
  })
}

const description$3 = 'Commands relating to looking up published packages'
const cmdPackage = {
  description: description$3,
  hidden: true,
  // [beta]
  async run(argv, importMeta, { parentName }) {
    await meowWithSubcommands(
      {
        score: cmdPackageScore,
        shallow: cmdPackageShallow
      },
      {
        aliases: {
          deep: {
            description: description$3,
            hidden: true,
            argv: ['score']
          }
        },
        argv,
        description: description$3,
        importMeta,
        name: parentName + ' package'
      }
    )
  }
}

async function runRawNpm(argv) {
  const spawnPromise = spawn.spawn(shadowNpmPaths.getNpmBinPath(), argv, {
    stdio: 'inherit'
  })
  // See https://nodejs.org/api/all.html#all_child_process_event-exit.
  spawnPromise.process.on('exit', (code, signalName) => {
    if (signalName) {
      process$1.kill(process$1.pid, signalName)
    } else if (code !== null) {
       
      process$1.exit(code)
    }
  })
  await spawnPromise
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$e, NPM } = constants
const config$g = {
  commandName: 'raw-npm',
  description: `Temporarily disable the Socket ${NPM} wrapper`,
  hidden: false,
  flags: {},
  help: command => `
    Usage
      $ ${command} <command>

    Examples
      $ ${command} install
  `
}
const cmdRawNpm = {
  description: config$g.description,
  hidden: config$g.hidden,
  run: run$g
}
async function run$g(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    allowUnknownFlags: true,
    argv,
    config: config$g,
    importMeta,
    parentName
  })
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$e)
    return
  }
  await runRawNpm(argv)
}

async function runRawNpx(argv) {
  const spawnPromise = spawn.spawn(shadowNpmPaths.getNpxBinPath(), argv, {
    stdio: 'inherit'
  })
  // See https://nodejs.org/api/all.html#all_child_process_event-exit.
  spawnPromise.process.on('exit', (code, signalName) => {
    if (signalName) {
      process$1.kill(process$1.pid, signalName)
    } else if (code !== null) {
       
      process$1.exit(code)
    }
  })
  await spawnPromise
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$d, NPX } = constants
const config$f = {
  commandName: 'raw-npx',
  description: `Temporarily disable the Socket ${NPX} wrapper`,
  hidden: false,
  flags: {},
  help: command => `
    Usage
      $ ${command} <command>

    Examples
      $ ${command} install
  `
}
const cmdRawNpx = {
  description: config$f.description,
  hidden: config$f.hidden,
  run: run$f
}
async function run$f(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    allowUnknownFlags: true,
    argv,
    config: config$f,
    importMeta,
    parentName
  })
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$d)
    return
  }
  await runRawNpx(argv)
}

const config$e = {
  commandName: 'create',
  description: '[Deprecated] Create a project report',
  hidden: false,
  flags: {
    ...commonFlags,
    ...outputFlags,
    ...validationFlags,
    dryRun: {
      type: 'boolean',
      default: false,
      description: 'Only output what will be done without actually doing it'
    },
    view: {
      type: 'boolean',
      shortFlag: 'v',
      default: false,
      description: 'Will wait for and return the created report'
    }
  },
  help: () => `
    This command is deprecated in favor of \`socket scan view\`.
    It will be removed in the next major release of the CLI.
  `
}
const cmdReportCreate = {
  description: config$e.description,
  hidden: config$e.hidden,
  run: run$e
}
async function run$e(argv, importMeta, { parentName }) {
  meowOrExit({
    argv,
    config: config$e,
    importMeta,
    parentName
  })
  logger.logger.fail(
    'This command has been sunset. Instead, please look at `socket scan create` to create scans and `socket scan report` to view a report of your scans.'
  )
}

const config$d = {
  commandName: 'view',
  description: '[Deprecated] View a project report',
  hidden: false,
  flags: {
    ...commonFlags,
    ...outputFlags,
    ...validationFlags
  },
  help: () => `
    This command is deprecated in favor of \`socket scan view\`.
    It will be removed in the next major release of the CLI.
  `
}
const cmdReportView = {
  description: config$d.description,
  hidden: config$d.hidden,
  run: run$d
}
async function run$d(argv, importMeta, { parentName }) {
  meowOrExit({
    argv,
    config: config$d,
    importMeta,
    parentName
  })
  logger.logger.fail(
    'This command has been sunset. Instead, please look at `socket scan create` to create scans and `socket scan report` to view a report of your scans.'
  )
}

const description$2 = '[Deprecated] Project report related commands'
const cmdReport = {
  description: description$2,
  hidden: true,
  // Deprecated in favor of `scan`
  async run(argv, importMeta, { parentName }) {
    await meowWithSubcommands(
      {
        create: cmdReportCreate,
        view: cmdReportView
      },
      {
        argv,
        description: description$2,
        importMeta,
        name: parentName + ' report'
      }
    )
  }
}

async function fetchCreateRepo({
  default_branch,
  description,
  homepage,
  orgSlug,
  repoName,
  visibility
}) {
  const sockSdk = await shadowNpmInject.setupSdk()

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Sending request ot create a repository...')
  const result = await handleApiCall(
    sockSdk.createOrgRepo(orgSlug, {
      name: repoName,
      description,
      homepage,
      default_branch,
      visibility
    }),
    'creating repository'
  )
  spinner.successAndStop('Received response requesting to create a repository.')
  if (!result.success) {
    handleUnsuccessfulApiResponse('createOrgRepo', result)
  }
  return result.data
}

async function outputCreateRepo(_data) {
  logger.logger.success('Repository created successfully')
}

async function handleCreateRepo({
  default_branch,
  description,
  homepage,
  orgSlug,
  repoName,
  visibility
}) {
  const data = await fetchCreateRepo({
    default_branch,
    description,
    homepage,
    orgSlug,
    repoName,
    visibility
  })
  if (!data) {
    return
  }
  await outputCreateRepo()
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$c } = constants
const config$c = {
  commandName: 'create',
  description: 'Create a repository in an organization',
  hidden: false,
  flags: {
    ...commonFlags,
    repoName: {
      type: 'string',
      shortFlag: 'n',
      default: '',
      description: 'Repository name'
    },
    repoDescription: {
      type: 'string',
      shortFlag: 'd',
      default: '',
      description: 'Repository description'
    },
    homepage: {
      type: 'string',
      shortFlag: 'h',
      default: '',
      description: 'Repository url'
    },
    defaultBranch: {
      type: 'string',
      shortFlag: 'b',
      default: 'main',
      description: 'Repository default branch'
    },
    visibility: {
      type: 'string',
      shortFlag: 'v',
      default: 'private',
      description: 'Repository visibility (Default Private)'
    }
  },
  help: (command, config) => `
    Usage
      $ ${command} <org slug>

    API Token Requirements
      - Quota: 1 unit
      - Permissions: repo:create

    Options
      ${getFlagListOutput(config.flags, 6)}

    Examples
      $ ${command} FakeOrg --repoName=test-repo
  `
}
const cmdReposCreate = {
  description: config$c.description,
  hidden: config$c.hidden,
  run: run$c
}
async function run$c(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$c,
    importMeta,
    parentName
  })
  const repoName = cli.flags['repoName']
  const defaultOrgSlug = shadowNpmInject.getConfigValue('defaultOrg')
  const orgSlug = defaultOrgSlug || cli.input[0] || ''
  const apiToken = shadowNpmInject.getDefaultToken()
  const wasBadInput = handleBadInput(
    {
      nook: true,
      test: orgSlug,
      message: 'Org name as the first argument',
      pass: 'ok',
      fail: 'missing'
    },
    {
      test: repoName,
      message: 'Repository name using --repoNam',
      pass: 'ok',
      fail: typeof repoName !== 'string' ? 'missing' : 'invalid'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$c)
    return
  }
  await handleCreateRepo({
    orgSlug,
    repoName: String(repoName),
    description: String(cli.flags['repoDescription'] || ''),
    homepage: String(cli.flags['homepage'] || ''),
    default_branch: String(cli.flags['defaultBranch'] || ''),
    visibility: String(cli.flags['visibility'] || 'private')
  })
}

async function handleDeleteRepo(orgSlug, repoName) {
  const sockSdk = await shadowNpmInject.setupSdk()

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Deleting repository...')
  const result = await handleApiCall(
    sockSdk.deleteOrgRepo(orgSlug, repoName),
    'deleting repository'
  )
  if (!result.success) {
    handleUnsuccessfulApiResponse('deleteOrgRepo', result)
  }
  spinner.successAndStop('Repository deleted successfully')
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$b } = constants
const config$b = {
  commandName: 'del',
  description: 'Delete a repository in an organization',
  hidden: false,
  flags: {
    ...commonFlags
  },
  help: (command, config) => `
    Usage
      $ ${command} <org slug> <repo slug>

    API Token Requirements
      - Quota: 1 unit
      - Permissions: repo:delete

    Options
      ${getFlagListOutput(config.flags, 6)}

    Examples
      $ ${command} FakeOrg test-repo
  `
}
const cmdReposDel = {
  description: config$b.description,
  hidden: config$b.hidden,
  run: run$b
}
async function run$b(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$b,
    importMeta,
    parentName
  })
  const defaultOrgSlug = shadowNpmInject.getConfigValue('defaultOrg')
  const orgSlug = defaultOrgSlug || cli.input[0] || ''
  const repoName = (defaultOrgSlug ? cli.input[0] : cli.input[1]) || ''
  const apiToken = shadowNpmInject.getDefaultToken()
  const wasBadInput = handleBadInput(
    {
      nook: true,
      test: orgSlug,
      message: 'Org name as the first argument',
      pass: 'ok',
      fail: 'missing'
    },
    {
      test: repoName,
      message: 'Repository name argument',
      pass: 'ok',
      fail: typeof repoName !== 'string' ? 'missing' : 'invalid'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$b)
    return
  }
  await handleDeleteRepo(orgSlug, repoName)
}

async function fetchListRepos({ direction, orgSlug, page, per_page, sort }) {
  const sockSdk = await shadowNpmInject.setupSdk()

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Fetching list of repositories...')
  const result = await handleApiCall(
    sockSdk.getOrgRepoList(orgSlug, {
      sort,
      direction,
      per_page: String(per_page),
      page: String(page)
    }),
    'listing repositories'
  )
  spinner.successAndStop('Received response for repository list.')
  if (!result.success) {
    handleUnsuccessfulApiResponse('getOrgRepoList', result)
  }
  return result.data
}

// @ts-ignore
async function outputListRepos(data, outputKind) {
  if (outputKind === 'json') {
    const json = data.results.map(o => ({
      id: o.id,
      name: o.name,
      visibility: o.visibility,
      defaultBranch: o.default_branch,
      archived: o.archived
    }))
    logger.logger.log(JSON.stringify(json, null, 2))
    return
  }
  const options = {
    columns: [
      {
        field: 'id',
        name: colors.magenta('ID')
      },
      {
        field: 'name',
        name: colors.magenta('Name')
      },
      {
        field: 'visibility',
        name: colors.magenta('Visibility')
      },
      {
        field: 'default_branch',
        name: colors.magenta('Default branch')
      },
      {
        field: 'archived',
        name: colors.magenta('Archived')
      }
    ]
  }
  logger.logger.log(chalkTable(options, data.results))
}

async function handleListRepos({
  direction,
  orgSlug,
  outputKind,
  page,
  per_page,
  sort
}) {
  const data = await fetchListRepos({
    direction,
    orgSlug,
    page,
    per_page,
    sort
  })
  if (!data) {
    return
  }
  await outputListRepos(data, outputKind)
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$a } = constants
const config$a = {
  commandName: 'list',
  description: 'List repositories in an organization',
  hidden: false,
  flags: {
    ...commonFlags,
    sort: {
      type: 'string',
      shortFlag: 's',
      default: 'created_at',
      description: 'Sorting option'
    },
    direction: {
      type: 'string',
      default: 'desc',
      description: 'Direction option'
    },
    perPage: {
      type: 'number',
      shortFlag: 'pp',
      default: 30,
      description: 'Number of results per page'
    },
    page: {
      type: 'number',
      shortFlag: 'p',
      default: 1,
      description: 'Page number'
    },
    ...outputFlags
  },
  help: (command, config) => `
    Usage
      $ ${command} <org slug>

    API Token Requirements
      - Quota: 1 unit
      - Permissions: repo:list

    Options
      ${getFlagListOutput(config.flags, 6)}

    Examples
      $ ${command} FakeOrg
  `
}
const cmdReposList = {
  description: config$a.description,
  hidden: config$a.hidden,
  run: run$a
}
async function run$a(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$a,
    importMeta,
    parentName
  })
  const { json, markdown } = cli.flags
  const defaultOrgSlug = shadowNpmInject.getConfigValue('defaultOrg')
  const orgSlug = defaultOrgSlug || cli.input[0] || ''
  const apiToken = shadowNpmInject.getDefaultToken()
  const wasBadInput = handleBadInput(
    {
      nook: true,
      test: orgSlug,
      message: 'Org name as the first argument',
      pass: 'ok',
      fail: 'missing'
    },
    {
      nook: true,
      test: !json || !markdown,
      message:
        'The `--json` and `--markdown` flags can not be used at the same time',
      pass: 'ok',
      fail: 'bad'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$a)
    return
  }
  await handleListRepos({
    direction: cli.flags['direction'] === 'asc' ? 'asc' : 'desc',
    orgSlug,
    outputKind: json ? 'json' : markdown ? 'markdown' : 'print',
    page: Number(cli.flags['page']) || 1,
    per_page: Number(cli.flags['perPage']) || 30,
    sort: String(cli.flags['sort'] || 'created_at')
  })
}

async function fetchUpdateRepo({
  default_branch,
  description,
  homepage,
  orgSlug,
  repoName,
  visibility
}) {
  const sockSdk = await shadowNpmInject.setupSdk()

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Sending request to update a repository...')
  const result = await handleApiCall(
    sockSdk.updateOrgRepo(orgSlug, repoName, {
      orgSlug,
      name: repoName,
      description,
      homepage,
      default_branch,
      visibility
    }),
    'updating repository'
  )
  spinner.successAndStop('Received response trying to update a repository')
  if (!result.success) {
    handleUnsuccessfulApiResponse('updateOrgRepo', result)
  }
  return result.data
}

async function outputUpdateRepo(_data) {
  logger.logger.success('Repository updated successfully')
}

async function handleUpdateRepo({
  default_branch,
  description,
  homepage,
  orgSlug,
  repoName,
  visibility
}) {
  const data = await fetchUpdateRepo({
    default_branch,
    description,
    homepage,
    orgSlug,
    repoName,
    visibility
  })
  if (!data) {
    return
  }
  await outputUpdateRepo()
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$9 } = constants
const config$9 = {
  commandName: 'update',
  description: 'Update a repository in an organization',
  hidden: false,
  flags: {
    ...commonFlags,
    repoName: {
      type: 'string',
      shortFlag: 'n',
      default: '',
      description: 'Repository name'
    },
    repoDescription: {
      type: 'string',
      shortFlag: 'd',
      default: '',
      description: 'Repository description'
    },
    homepage: {
      type: 'string',
      shortFlag: 'h',
      default: '',
      description: 'Repository url'
    },
    defaultBranch: {
      type: 'string',
      shortFlag: 'b',
      default: 'main',
      description: 'Repository default branch'
    },
    visibility: {
      type: 'string',
      shortFlag: 'v',
      default: 'private',
      description: 'Repository visibility (Default Private)'
    }
  },
  help: (command, config) => `
    Usage
      $ ${command} <org slug>

    API Token Requirements
      - Quota: 1 unit
      - Permissions: repo:update

    Options
      ${getFlagListOutput(config.flags, 6)}

    Examples
      $ ${command} FakeOrg
  `
}
const cmdReposUpdate = {
  description: config$9.description,
  hidden: config$9.hidden,
  run: run$9
}
async function run$9(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$9,
    importMeta,
    parentName
  })
  const repoName = cli.flags['repoName']
  const defaultOrgSlug = shadowNpmInject.getConfigValue('defaultOrg')
  const orgSlug = defaultOrgSlug || cli.input[0] || ''
  const apiToken = shadowNpmInject.getDefaultToken()
  const wasBadInput = handleBadInput(
    {
      nook: true,
      test: orgSlug,
      message: 'Org name as the first argument',
      pass: 'ok',
      fail: 'missing'
    },
    {
      test: repoName,
      message: 'Repository name using --repoName',
      pass: 'ok',
      fail: typeof repoName !== 'string' ? 'missing' : 'invalid'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$9)
    return
  }
  await handleUpdateRepo({
    orgSlug,
    repoName: String(repoName),
    description: String(cli.flags['repoDescription'] || ''),
    homepage: String(cli.flags['homepage'] || ''),
    default_branch: String(cli.flags['defaultBranch'] || ''),
    visibility: String(cli.flags['visibility'] || 'private')
  })
}

async function fetchViewRepo(orgSlug, repoName) {
  const sockSdk = await shadowNpmInject.setupSdk()

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Fetching repository data...')
  const result = await handleApiCall(
    sockSdk.getOrgRepo(orgSlug, repoName),
    'fetching repository'
  )
  spinner.successAndStop('Received response while fetched repository data.')
  if (!result.success) {
    handleUnsuccessfulApiResponse('getOrgRepo', result)
  }
  return result.data
}

// @ts-ignore
async function outputViewRepo(data, outputKind) {
  if (outputKind === 'json') {
    const {
      archived,
      created_at,
      default_branch,
      homepage,
      id,
      name,
      visibility
    } = data
    logger.logger.log(
      JSON.stringify(
        {
          id,
          name,
          visibility,
          default_branch,
          homepage,
          archived,
          created_at
        },
        null,
        2
      )
    )
    return
  }
  const options = {
    columns: [
      {
        field: 'id',
        name: colors.magenta('ID')
      },
      {
        field: 'name',
        name: colors.magenta('Name')
      },
      {
        field: 'visibility',
        name: colors.magenta('Visibility')
      },
      {
        field: 'default_branch',
        name: colors.magenta('Default branch')
      },
      {
        field: 'homepage',
        name: colors.magenta('Homepage')
      },
      {
        field: 'archived',
        name: colors.magenta('Archived')
      },
      {
        field: 'created_at',
        name: colors.magenta('Created at')
      }
    ]
  }
  logger.logger.log(chalkTable(options, [data]))
}

async function handleViewRepo(orgSlug, repoName, outputKind) {
  const data = await fetchViewRepo(orgSlug, repoName)
  if (!data) {
    return
  }
  await outputViewRepo(data, outputKind)
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$8 } = constants
const config$8 = {
  commandName: 'view',
  description: 'View repositories in an organization',
  hidden: false,
  flags: {
    ...commonFlags,
    ...outputFlags,
    repoName: {
      description: 'The repository to check',
      default: '',
      type: 'string'
    }
  },
  help: (command, config) => `
    Usage
      $ ${command} <org slug>

    API Token Requirements
      - Quota: 1 unit
      - Permissions: repo:list

    Options
      ${getFlagListOutput(config.flags, 6)}

    Examples
      $ ${command} FakeOrg
  `
}
const cmdReposView = {
  description: config$8.description,
  hidden: config$8.hidden,
  run: run$8
}
async function run$8(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$8,
    importMeta,
    parentName
  })
  const { json, markdown, repoName } = cli.flags
  const defaultOrgSlug = shadowNpmInject.getConfigValue('defaultOrg')
  const orgSlug = defaultOrgSlug || cli.input[0] || ''
  const apiToken = shadowNpmInject.getDefaultToken()
  const wasBadInput = handleBadInput(
    {
      nook: true,
      test: orgSlug,
      message: 'Org name as the first argument',
      pass: 'ok',
      fail: 'missing'
    },
    {
      test: repoName,
      message: 'Repository name using --repoName',
      pass: 'ok',
      fail: typeof repoName !== 'string' ? 'missing' : 'invalid'
    },
    {
      nook: true,
      test: !json || !markdown,
      message:
        'The `--json` and `--markdown` flags can not be used at the same time',
      pass: 'ok',
      fail: 'bad'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$8)
    return
  }
  await handleViewRepo(
    orgSlug,
    String(repoName),
    json ? 'json' : markdown ? 'markdown' : 'text'
  )
}

const description$1 = 'Repositories related commands'
const cmdRepos = {
  description: description$1,
  async run(argv, importMeta, { parentName }) {
    await meowWithSubcommands(
      {
        create: cmdReposCreate,
        view: cmdReposView,
        list: cmdReposList,
        del: cmdReposDel,
        update: cmdReposUpdate
      },
      {
        argv,
        description: description$1,
        importMeta,
        name: `${parentName} repos`
      }
    )
  }
}

async function fetchCreateOrgFullScan(
  packagePaths,
  orgSlug,
  repoName,
  branchName,
  commitMessage,
  defaultBranch,
  pendingHead,
  tmp,
  cwd
) {
  const sockSdk = await shadowNpmInject.setupSdk()

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start(
    `Sending request to create a scan with ${packagePaths.length} packages...`
  )
  const result = await handleApiCall(
    sockSdk.createOrgFullScan(
      orgSlug,
      {
        repo: repoName,
        branch: branchName,
        commit_message: commitMessage,
        make_default_branch: String(defaultBranch),
        set_as_pending_head: String(pendingHead),
        tmp: String(tmp)
      },
      packagePaths,
      cwd
    ),
    'Creating scan'
  )
  spinner.successAndStop('Completed request to create a new scan.')
  if (!result.success) {
    handleUnsuccessfulApiResponse('CreateOrgFullScan', result)
  }
  return result.data
}

async function fetchSupportedScanFileNames() {
  const sockSdk = await shadowNpmInject.setupSdk()

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Requesting supported scan file types from API...')
  const result = await handleApiCall(
    sockSdk.getReportSupportedFiles(),
    'fetching supported scan file types'
  )
  spinner.stop()
  logger.logger.success(
    'Received response while fetched supported scan file types.'
  )
  if (!result.success) {
    handleUnsuccessfulApiResponse('getReportSupportedFiles', result)
  }
  return result.data
}

async function outputCreateNewScan(data) {
  const link = colors.underline(colors.cyan(`${data.html_report_url}`))
  logger.logger.log(`Available at: ${link}`)
  if (
    await prompts.confirm({
      message: 'Would you like to open it in your browser?',
      default: false
    })
  ) {
    await open(`${data.html_report_url}`)
  }
}

async function handleCreateNewScan({
  branchName,
  commitMessage,
  cwd,
  defaultBranch,
  orgSlug,
  pendingHead,
  readOnly,
  repoName,
  targets,
  tmp
}) {
  const supportedFileNames = await fetchSupportedScanFileNames()
  if (!supportedFileNames) {
    return
  }
  const packagePaths = await shadowNpmPaths.getPackageFilesForScan(
    cwd,
    targets,
    supportedFileNames
  )
  handleBadInput({
    nook: true,
    test: packagePaths.length > 0,
    pass: 'ok',
    fail: 'found none',
    message: 'TARGET must contain matching / supported file types for a scan'
  })
  if (readOnly) {
    logger.logger.log('[ReadOnly] Bailing now')
    return
  }
  const data = await fetchCreateOrgFullScan(
    packagePaths,
    orgSlug,
    repoName,
    branchName,
    commitMessage,
    defaultBranch,
    pendingHead,
    tmp,
    cwd
  )
  if (!data) {
    return
  }
  await outputCreateNewScan(data)
}

async function suggestOrgSlug() {
  const sockSdk = await shadowNpmInject.setupSdk()
  const result = await handleApiCall(
    sockSdk.getOrganizations(),
    'looking up organizations'
  )
  // Ignore a failed request here. It was not the primary goal of
  // running this command and reporting it only leads to end-user confusion.
  if (result.success) {
    const proceed = await prompts.select({
      message:
        'Missing org name; do you want to use any of these orgs for this scan?',
      choices: [
        ...Object.values(result.data.organizations).map(org => {
          const slug = org.name ?? 'undefined'
          return {
            name: `Yes [${slug}]`,
            value: slug,
            description: `Use "${slug}" as the organization`
          }
        }),
        {
          name: 'No',
          value: '',
          description:
            'Do not use any of these organizations (will end in a no-op)'
        }
      ]
    })
    if (proceed) {
      return proceed
    }
  } else {
    logger.logger.fail(
      'Failed to lookup organization list from API, unable to suggest'
    )
  }
}

async function suggestRepoSlug(orgSlug) {
  const sockSdk = await shadowNpmInject.setupSdk()

  // Same as above, but if there's a repo with the same name as cwd then
  // default the selection to that name.
  const result = await handleApiCall(
    sockSdk.getOrgRepoList(orgSlug, {
      orgSlug,
      sort: 'name',
      direction: 'asc',
      // There's no guarantee that the cwd is part of this page. If it's not
      // then do an additional request and specific search for it instead.
      // This way we can offer the tip of "do you want to create [cwd]?".
      perPage: '10',
      page: '0'
    }),
    'looking up known repos'
  )

  // Ignore a failed request here. It was not the primary goal of
  // running this command and reporting it only leads to end-user confusion.
  if (result.success) {
    const currentDirName = dirNameToSlug(path$1.basename(process$1.cwd()))
    let cwdIsKnown =
      !!currentDirName &&
      result.data.results.some(obj => obj.slug === currentDirName)
    if (!cwdIsKnown && currentDirName) {
      // Do an explicit request so we can assert that the cwd exists or not
      const result = await handleApiCall(
        sockSdk.getOrgRepo(orgSlug, currentDirName),
        'checking if current cwd is a known repo'
      )
      if (result.success) {
        cwdIsKnown = true
      }
    }
    const proceed = await prompts.select({
      message:
        'Missing repo name; do you want to use any of these known repo names for this scan?',
      choices:
        // Put the CWD suggestion at the top, whether it exists or not
        (currentDirName
          ? [
              {
                name: `Yes, current dir [${cwdIsKnown ? currentDirName : `create repo for ${currentDirName}`}]`,
                value: currentDirName,
                description: cwdIsKnown
                  ? 'Register a new repo name under the given org and use it'
                  : 'Use current dir as repo'
              }
            ]
          : []
        ).concat(
          result.data.results
            .filter(({ slug }) => !!slug && slug !== currentDirName)
            .map(({ slug }) => ({
              name: 'Yes [' + slug + ']',
              value: slug || '',
              // Filtered above but TS is like nah.
              description: `Use "${slug}" as the repo name`
            })),
          {
            name: 'No',
            value: '',
            description: 'Do not use any of these repos (will end in a no-op)'
          }
        )
    })
    if (proceed) {
      const repoName = proceed
      let repoDefaultBranch = ''
      // Store the default branch to help with the branch name question next
      result.data.results.some(obj => {
        if (obj.slug === proceed && obj.default_branch) {
          repoDefaultBranch = obj.default_branch
          return
        }
      })
      return {
        slug: repoName,
        defaultBranch: repoDefaultBranch
      }
    }
  } else {
    logger.logger.fail(
      'Failed to lookup repo list from API, unable to suggest.'
    )
  }
}
function dirNameToSlug(name) {
  // Uses slug specs asserted by our servers
  // Note: this can lead to collisions; eg. slug for `x--y` and `x---y` is `x-y`
  return name
    .toLowerCase()
    .replace(/[^[a-zA-Z0-9_.-]/g, '_')
    .replace(/--+/g, '-')
    .replace(/__+/g, '_')
    .replace(/\.\.+/g, '.')
    .replace(/[._-]+$/, '')
}

async function suggestBranchSlug(repoDefaultBranch) {
  const spawnResult = spawn.spawnSync('git', ['branch', '--show-current'])
  const currentBranch = spawnResult.stdout.toString('utf8').trim()
  if (currentBranch && spawnResult.status === 0) {
    const proceed = await prompts.select({
      message: 'Use the current git branch as target branch name?',
      choices: [
        {
          name: `Yes [${currentBranch}]`,
          value: currentBranch,
          description: 'Use the current git branch for branch name'
        },
        ...(repoDefaultBranch && repoDefaultBranch !== currentBranch
          ? [
              {
                name: `No, use the default branch [${repoDefaultBranch}]`,
                value: repoDefaultBranch,
                description:
                  'Use the default branch for target repo as the target branch name'
              }
            ]
          : []),
        {
          name: 'No',
          value: '',
          description:
            'Do not use the current git branch as name (will end in a no-op)'
        }
      ].filter(Boolean)
    })
    if (proceed) {
      return proceed
    }
  }
}

async function suggestTarget() {
  // We could prefill this with sub-dirs of the current
  // dir ... but is that going to be useful?
  const proceed = await prompts.select({
    message: 'No TARGET given. Do you want to use the current directory?',
    choices: [
      {
        name: 'Yes',
        value: true,
        description: 'Target the current directory'
      },
      {
        name: 'No',
        value: false,
        description:
          'Do not use the current directory (this will end in a no-op)'
      }
    ]
  })
  if (proceed) {
    return ['.']
  }
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$7 } = constants
const config$7 = {
  commandName: 'create',
  description: 'Create a scan',
  hidden: false,
  flags: {
    ...commonFlags,
    repo: {
      type: 'string',
      shortFlag: 'r',
      default: '',
      description: 'Repository name'
    },
    branch: {
      type: 'string',
      shortFlag: 'b',
      default: '',
      description: 'Branch name'
    },
    commitMessage: {
      type: 'string',
      shortFlag: 'm',
      default: '',
      description: 'Commit message'
    },
    commitHash: {
      type: 'string',
      shortFlag: 'ch',
      default: '',
      description: 'Commit hash'
    },
    cwd: {
      type: 'string',
      description: 'working directory, defaults to process.cwd()'
    },
    dryRun: {
      type: 'boolean',
      description:
        'run input validation part of command without any concrete side effects'
    },
    pullRequest: {
      type: 'number',
      shortFlag: 'pr',
      description: 'Commit hash'
    },
    committers: {
      type: 'string',
      shortFlag: 'c',
      default: '',
      description: 'Committers'
    },
    defaultBranch: {
      type: 'boolean',
      shortFlag: 'db',
      default: false,
      description: 'Make default branch'
    },
    pendingHead: {
      type: 'boolean',
      shortFlag: 'ph',
      default: false,
      description: 'Set as pending head'
    },
    readOnly: {
      type: 'boolean',
      default: false,
      description:
        'Similar to --dry-run except it can read from remote, stops before it would create an actual report'
    },
    tmp: {
      type: 'boolean',
      shortFlag: 't',
      default: false,
      description:
        'Set the visibility (true/false) of the scan in your dashboard'
    },
    view: {
      type: 'boolean',
      shortFlag: 'v',
      default: true,
      description:
        'Will wait for and return the created report. Use --no-view to disable.'
    }
  },
  // TODO: your project's "socket.yml" file's "projectIgnorePaths"
  help: (command, config) => `
    Usage
      $ ${command} [...options] <org> <TARGET> [TARGET...]

    API Token Requirements
      - Quota: 1 unit
      - Permissions: full-scans:create

    Uploads the specified "package.json" and lock files for JavaScript, Python,
    Go, Scala, Gradle, and Kotlin dependency manifests.
    If any folder is specified, the ones found in there recursively are uploaded.

    Supports globbing such as "**/package.json", "**/requirements.txt", etc.

    Ignores any file specified in your project's ".gitignore" and also has a
    sensible set of default ignores from the "ignore-by-default" module.

    TARGET should be a FILE or DIR that _must_ be inside the CWD.

    When a FILE is given only that FILE is targeted. Otherwise any eligible
    files in the given DIR will be considered.

    Options
      ${getFlagListOutput(config.flags, 6)}

    Examples
      $ ${command} --repo=test-repo --branch=main FakeOrg ./package.json
  `
}
const cmdScanCreate = {
  description: config$7.description,
  hidden: config$7.hidden,
  run: run$7
}
async function run$7(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$7,
    importMeta,
    parentName
  })
  const { cwd: cwdOverride, dryRun } = cli.flags
  const defaultOrgSlug = shadowNpmInject.getConfigValue('defaultOrg')
  let orgSlug = defaultOrgSlug || cli.input[0] || ''
  let targets = cli.input.slice(defaultOrgSlug ? 0 : 1)
  const cwd =
    cwdOverride && cwdOverride !== 'process.cwd()'
      ? String(cwdOverride)
      : process.cwd()
  let { branch: branchName = '', repo: repoName = '' } = cli.flags

  // We're going to need an api token to suggest data because those suggestions
  // must come from data we already know. Don't error on missing api token yet.
  // If the api-token is not set, ignore it for the sake of suggestions.
  const apiToken = shadowNpmInject.getDefaultToken()

  // If we updated any inputs then we should print the command line to repeat
  // the command without requiring user input, as a suggestion.
  let updatedInput = false
  if (!targets.length && !dryRun) {
    const received = await suggestTarget()
    targets = received ?? []
    updatedInput = true
  }

  // If the current cwd is unknown and is used as a repo slug anyways, we will
  // first need to register the slug before we can use it.
  let repoDefaultBranch = ''
  // Only do suggestions with an apiToken and when not in dryRun mode
  if (apiToken && !dryRun) {
    if (!orgSlug) {
      const suggestion = await suggestOrgSlug()
      if (suggestion) {
        orgSlug = suggestion
      }
      updatedInput = true
    }

    // (Don't bother asking for the rest if we didn't get an org slug above)
    if (orgSlug && !repoName) {
      const suggestion = await suggestRepoSlug(orgSlug)
      if (suggestion) {
        repoDefaultBranch = suggestion.defaultBranch
        repoName = suggestion.slug
      }
      updatedInput = true
    }

    // (Don't bother asking for the rest if we didn't get an org/repo above)
    if (orgSlug && repoName && !branchName) {
      const suggestion = await suggestBranchSlug(repoDefaultBranch)
      if (suggestion) {
        branchName = suggestion
      }
      updatedInput = true
    }
  }
  if (updatedInput && repoName && branchName && orgSlug && targets?.length) {
    logger.logger.error(
      'Note: You can invoke this command next time to skip the interactive questions:'
    )
    logger.logger.error('```')
    logger.logger.error(
      `    socket scan create [other flags...] --repo ${repoName} --branch ${branchName} ${orgSlug} ${targets.join(' ')}`
    )
    logger.logger.error('```\n')
  }
  const wasBadInput = handleBadInput(
    {
      nook: true,
      test: orgSlug,
      message: 'Org name as the first argument',
      pass: 'ok',
      fail: 'missing'
    },
    {
      test: repoName,
      message: 'Repository name using --repo',
      pass: 'ok',
      fail: typeof repoName !== 'string' ? 'missing' : 'invalid'
    },
    {
      test: branchName,
      message: 'Repository name using --branch',
      pass: 'ok',
      fail: typeof repoName !== 'string' ? 'missing' : 'invalid'
    },
    {
      test: targets.length,
      message: 'At least one TARGET (e.g. `.` or `./package.json`)',
      pass: 'ok',
      fail: 'missing'
    },
    {
      nook: true,
      test: apiToken,
      message: 'This command requires an API token for access`)',
      pass: 'ok',
      fail: 'missing'
    }
  )
  if (wasBadInput) {
    return
  }

  // Note exiting earlier to skirt a hidden auth requirement
  if (dryRun) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$7)
    return
  }
  await handleCreateNewScan({
    branchName: branchName,
    commitMessage: cli.flags['commitMessage'] ?? '',
    cwd,
    defaultBranch: Boolean(cli.flags['defaultBranch']),
    orgSlug,
    pendingHead: Boolean(cli.flags['pendingHead']),
    readOnly: Boolean(cli.flags['readOnly']),
    repoName: repoName,
    targets,
    tmp: Boolean(cli.flags['tmp'])
  })
}

async function fetchDeleteOrgFullScan(orgSlug, scanId) {
  const sockSdk = await shadowNpmInject.setupSdk()

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Requesting the scan to be deleted...')
  const result = await handleApiCall(
    sockSdk.deleteOrgFullScan(orgSlug, scanId),
    'Deleting scan'
  )
  spinner.successAndStop('Received response for deleting a scan.')
  if (!result.success) {
    handleUnsuccessfulApiResponse('deleteOrgFullScan', result)
  }
  return result.data
}

async function outputDeleteScan(_data) {
  logger.logger.success('Scan deleted successfully')
}

async function handleDeleteScan(orgSlug, scanId) {
  const data = await fetchDeleteOrgFullScan(orgSlug, scanId)
  if (!data) {
    return
  }
  await outputDeleteScan()
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$6 } = constants
const config$6 = {
  commandName: 'del',
  description: 'Delete a scan',
  hidden: false,
  flags: {
    ...commonFlags,
    ...outputFlags
  },
  help: (command, config) => `
    Usage
      $ ${command} <org slug> <scan ID>

    API Token Requirements
      - Quota: 1 unit
      - Permissions: full-scans:delete

    Options
      ${getFlagListOutput(config.flags, 6)}

    Examples
      $ ${command} FakeOrg 000aaaa1-0000-0a0a-00a0-00a0000000a0
  `
}
const cmdScanDel = {
  description: config$6.description,
  hidden: config$6.hidden,
  run: run$6
}
async function run$6(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$6,
    importMeta,
    parentName
  })
  const defaultOrgSlug = shadowNpmInject.getConfigValue('defaultOrg')
  const orgSlug = defaultOrgSlug || cli.input[0] || ''
  const scanId = (defaultOrgSlug ? cli.input[0] : cli.input[1]) || ''
  const apiToken = shadowNpmInject.getDefaultToken()
  const wasBadInput = handleBadInput(
    {
      nook: true,
      test: orgSlug,
      message: 'Org name as the first argument',
      pass: 'ok',
      fail: 'missing'
    },
    {
      test: scanId,
      message: 'Scan ID to delete',
      pass: 'ok',
      fail: 'missing'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$6)
    return
  }
  await handleDeleteScan(orgSlug, scanId)
}

async function fetchListScans({
  direction,
  from_time,
  orgSlug,
  page,
  per_page,
  sort
}) {
  const sockSdk = await shadowNpmInject.setupSdk()

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Fetching list of scans...')
  const result = await handleApiCall(
    sockSdk.getOrgFullScanList(orgSlug, {
      sort,
      direction,
      per_page: String(per_page),
      page: String(page),
      from: from_time
    }),
    'Listing scans'
  )
  spinner.successAndStop(`Received response for list of scans.`)
  if (!result.success) {
    handleUnsuccessfulApiResponse('getOrgFullScanList', result)
  }
  return result.data
}

// @ts-ignore
async function outputListScans(data, outputKind) {
  if (outputKind === 'json') {
    logger.logger.log(data)
    return
  }
  const options = {
    columns: [
      {
        field: 'id',
        name: colors.magenta('ID')
      },
      {
        field: 'report_url',
        name: colors.magenta('Scan URL')
      },
      {
        field: 'branch',
        name: colors.magenta('Branch')
      },
      {
        field: 'created_at',
        name: colors.magenta('Created at')
      }
    ]
  }
  const formattedResults = data.results.map(d => {
    return {
      id: d.id,
      report_url: colors.underline(`${d.html_report_url}`),
      created_at: d.created_at
        ? new Date(d.created_at).toLocaleDateString('en-us', {
            year: 'numeric',
            month: 'numeric',
            day: 'numeric'
          })
        : '',
      branch: d.branch
    }
  })
  logger.logger.log(chalkTable(options, formattedResults))
}

async function handleListScans({
  direction,
  from_time,
  orgSlug,
  outputKind,
  page,
  per_page,
  sort
}) {
  const data = await fetchListScans({
    direction,
    from_time,
    orgSlug,
    page,
    per_page,
    sort
  })
  if (!data) {
    return
  }
  await outputListScans(data, outputKind)
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$5 } = constants
const config$5 = {
  commandName: 'list',
  description: 'List the scans for an organization',
  hidden: false,
  flags: {
    ...commonFlags,
    ...outputFlags,
    sort: {
      type: 'string',
      shortFlag: 's',
      default: 'created_at',
      description:
        'Sorting option (`name` or `created_at`) - default is `created_at`'
    },
    direction: {
      type: 'string',
      shortFlag: 'd',
      default: 'desc',
      description: 'Direction option (`desc` or `asc`) - Default is `desc`'
    },
    perPage: {
      type: 'number',
      shortFlag: 'pp',
      default: 30,
      description: 'Results per page - Default is 30'
    },
    page: {
      type: 'number',
      shortFlag: 'p',
      default: 1,
      description: 'Page number - Default is 1'
    },
    fromTime: {
      type: 'string',
      shortFlag: 'f',
      default: '',
      description: 'From time - as a unix timestamp'
    },
    untilTime: {
      type: 'string',
      shortFlag: 'u',
      default: '',
      description: 'Until time - as a unix timestamp'
    }
  },
  help: (command, config) => `
    Usage
      $ ${command} <org slug>

    API Token Requirements
      - Quota: 1 unit
      - Permissions: full-scans:list

    Options
      ${getFlagListOutput(config.flags, 6)}

    Examples
      $ ${command} FakeOrg
  `
}
const cmdScanList = {
  description: config$5.description,
  hidden: config$5.hidden,
  run: run$5
}
async function run$5(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$5,
    importMeta,
    parentName
  })
  const { json, markdown } = cli.flags
  const defaultOrgSlug = shadowNpmInject.getConfigValue('defaultOrg')
  const orgSlug = defaultOrgSlug || cli.input[0] || ''
  const apiToken = shadowNpmInject.getDefaultToken()
  const wasBadInput = handleBadInput(
    {
      nook: true,
      test: orgSlug,
      message: 'Org name as the first argument',
      pass: 'ok',
      fail: 'missing'
    },
    {
      nook: true,
      test: !json || !markdown,
      message: 'The json and markdown flags cannot be both set, pick one',
      pass: 'ok',
      fail: 'omit one'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$5)
    return
  }
  await handleListScans({
    direction: String(cli.flags['direction'] || ''),
    from_time: String(cli.flags['fromTime'] || ''),
    orgSlug,
    outputKind: json ? 'json' : markdown ? 'markdown' : 'print',
    page: Number(cli.flags['page'] || 1),
    per_page: Number(cli.flags['perPage'] || 30),
    sort: String(cli.flags['sort'] || '')
  })
}

async function fetchScanMetadata(orgSlug, scanId) {
  const sockSdk = await shadowNpmInject.setupSdk()

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Fetching meta data for a full scan...')
  const result = await handleApiCall(
    sockSdk.getOrgFullScanMetadata(orgSlug, scanId),
    'Listing scans'
  )
  spinner.successAndStop('Received response for scan meta data.')
  if (!result.success) {
    handleUnsuccessfulApiResponse('getOrgFullScanMetadata', result)
  }
  return result.data
}

async function outputScanMetadata(data, scanId, outputKind) {
  if (outputKind === 'json') {
    logger.logger.log(data)
  } else {
    // Markdown = print
    if (outputKind === 'markdown') {
      logger.logger.log('# Scan meta data\n')
    }
    logger.logger.log(`Scan ID: ${scanId}\n`)
    for (const [key, value] of Object.entries(data)) {
      if (
        [
          'id',
          'updated_at',
          'organization_id',
          'repository_id',
          'commit_hash',
          'html_report_url'
        ].includes(key)
      ) {
        continue
      }
      logger.logger.log(`- ${key}:`, value)
    }
    if (outputKind === 'markdown') {
      logger.logger.log(
        `\nYou can view this report at: [${data.html_report_url}](${data.html_report_url})\n`
      )
    } else {
      logger.logger.log(
        `\nYou can view this report at: ${data.html_report_url}]\n`
      )
    }
  }
}

async function handleOrgScanMetadata(orgSlug, scanId, outputKind) {
  const data = await fetchScanMetadata(orgSlug, scanId)
  if (!data) {
    return
  }
  await outputScanMetadata(data, scanId, outputKind)
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$4 } = constants
const config$4 = {
  commandName: 'metadata',
  description: "Get a scan's metadata",
  hidden: false,
  flags: {
    ...commonFlags,
    ...outputFlags
  },
  help: (command, config) => `
    Usage
      $ ${command} <org slug> <scan id>

    API Token Requirements
      - Quota: 1 unit
      - Permissions: full-scans:list

    Options
      ${getFlagListOutput(config.flags, 6)}

    Examples
      $ ${command} FakeOrg 000aaaa1-0000-0a0a-00a0-00a0000000a0
  `
}
const cmdScanMetadata = {
  description: config$4.description,
  hidden: config$4.hidden,
  run: run$4
}
async function run$4(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$4,
    importMeta,
    parentName
  })
  const { json, markdown } = cli.flags
  const defaultOrgSlug = shadowNpmInject.getConfigValue('defaultOrg')
  const orgSlug = defaultOrgSlug || cli.input[0] || ''
  const scanId = (defaultOrgSlug ? cli.input[0] : cli.input[1]) || ''
  const apiToken = shadowNpmInject.getDefaultToken()
  const wasBadInput = handleBadInput(
    {
      nook: true,
      test: orgSlug,
      message: 'Org name as the first argument',
      pass: 'ok',
      fail: 'missing'
    },
    {
      test: scanId,
      message: 'Scan ID to inspect as argument',
      pass: 'ok',
      fail: 'missing'
    },
    {
      nook: true,
      test: !json || !markdown,
      message: 'The json and markdown flags cannot be both set, pick one',
      pass: 'ok',
      fail: 'omit one'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$4)
    return
  }
  await handleOrgScanMetadata(
    orgSlug,
    scanId,
    json ? 'json' : markdown ? 'markdown' : 'text'
  )
}

/**
 * This fetches all the relevant pieces of data to generate a report, given a
 * full scan ID.
 */
async function fetchReportData(orgSlug, scanId, includeLicensePolicy) {
  const apiToken = shadowNpmInject.getDefaultToken()
  if (!apiToken) {
    throw new shadowNpmInject.AuthError(
      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'
    )
  }
  const sockSdk = await shadowNpmInject.setupSdk(apiToken)
  let haveScan = false
  let haveSecurityPolicy = false

  // Lazily access constants.spinner.
  const { spinner } = constants
  function updateProgress() {
    const needs = [
      !haveScan ? 'scan' : undefined,
      !haveSecurityPolicy ? 'security policy' : undefined
    ].filter(Boolean)
    const haves = [
      haveScan ? 'scan' : undefined,
      haveSecurityPolicy ? 'security policy' : undefined
    ].filter(Boolean)
    if (needs.length) {
      spinner.start(
        `Fetching ${needs.join(' and ')}...${haves.length ? ` Completed fetching ${haves.join(' and ')}.` : ''}`
      )
    } else {
      spinner.successAndStop(`Completed fetching ${haves.join(' and ')}.`)
    }
  }
  updateProgress()
  const [scan, securityPolicyMaybe] = await Promise.all([
    (async () => {
      try {
        const response = await queryApi(
          `orgs/${orgSlug}/full-scans/${encodeURIComponent(scanId)}${includeLicensePolicy ? '?include_license_details=true' : ''}`,
          apiToken
        )
        haveScan = true
        updateProgress()
        if (!response.ok) {
          const err = await handleApiError(response.status)
          logger.logger.fail(
            failMsgWithBadge(response.statusText, `Fetch error: ${err}`)
          )
          return undefined
        }
        const jsons = await response.text()
        const lines = jsons.split('\n').filter(Boolean)
        const data = lines.map(line => {
          try {
            return JSON.parse(line)
          } catch {
            console.error(
              'At least one line item was returned that could not be parsed as JSON...'
            )
            return
          }
        })
        return data
      } catch (e) {
        spinner.errorAndStop('There was an issue while fetching full scan data')
        throw e
      }
    })(),
    (async () => {
      const r = await sockSdk.getOrgSecurityPolicy(orgSlug)
      haveSecurityPolicy = true
      updateProgress()
      return await handleApiCall(r, "looking up organization's security policy")
    })()
  ]).finally(() => spinner.stop())
  if (!Array.isArray(scan)) {
    logger.logger.error('Was unable to fetch scan, bailing')
    process.exitCode = 1
    return {
      ok: false,
      scan: undefined,
      securityPolicy: undefined
    }
  }
  let securityPolicy = undefined
  if (securityPolicyMaybe && securityPolicyMaybe.success) {
    securityPolicy = securityPolicyMaybe
  } else {
    logger.logger.error('Was unable to fetch security policy, bailing')
    process.exitCode = 1
    return {
      ok: false,
      scan: undefined,
      securityPolicy: undefined
    }
  }
  return {
    ok: true,
    scan,
    securityPolicy
  }
}

function generateReport(
  scan,
  securityPolicy,
  { fold, orgSlug, reportLevel, scanId, short, spinner }
) {
  const now = Date.now()
  spinner?.start('Generating report...')

  // Create an object that includes:
  //   healthy: boolean
  //   worst violation level;
  //   per eco
  //     per package
  //       per version
  //         per offending file
  //           reported issue -> policy action

  // In the context of a report;
  // - the alert.severity is irrelevant
  // - the securityPolicyDefault is irrelevant
  // - the report defaults to healthy:true with no alerts
  // - the appearance of an alert will trigger the policy action;
  //   - error: healthy will end up as false, add alerts to report
  //   - warn: healthy unchanged, add alerts to report
  //   - monitor/ignore: no action
  //   - defer: unknown (no action)

  // Note: the server will emit alerts for license policy violations but
  //       those are only included if you set the flag when requesting the scan
  //       data. The alerts map to a single security policy key that determines
  //       what to do with any violation, regardless of the concrete license.
  //       That rule is called "License Policy Violation".
  // The license policy part is implicitly handled here. Either they are
  // included and may show up, or they are not and won't show up.

  const violations = new Map()
  let healthy = true
  const securityRules = securityPolicy?.data.securityPolicyRules
  if (securityPolicy && securityRules) {
    // Note: reportLevel: error > warn > monitor > ignore > defer
    scan.forEach(artifact => {
      const {
        alerts,
        name: pkgName = '<unknown>',
        type: ecosystem,
        version = '<unknown>'
      } = artifact
      alerts?.forEach(alert => {
        const alertName = alert.type // => policy[type]
        const action = securityRules[alertName]?.action || ''
        switch (action) {
          case 'error': {
            healthy = false
            if (!short) {
              addAlert(
                artifact,
                violations,
                fold,
                ecosystem,
                pkgName,
                version,
                alert,
                action
              )
            }
            break
          }
          case 'warn': {
            if (!short && reportLevel !== 'error') {
              addAlert(
                artifact,
                violations,
                fold,
                ecosystem,
                pkgName,
                version,
                alert,
                action
              )
            }
            break
          }
          case 'monitor': {
            if (!short && reportLevel !== 'warn' && reportLevel !== 'error') {
              addAlert(
                artifact,
                violations,
                fold,
                ecosystem,
                pkgName,
                version,
                alert,
                action
              )
            }
            break
          }
          case 'ignore': {
            if (
              !short &&
              reportLevel !== 'warn' &&
              reportLevel !== 'error' &&
              reportLevel !== 'monitor'
            ) {
              addAlert(
                artifact,
                violations,
                fold,
                ecosystem,
                pkgName,
                version,
                alert,
                action
              )
            }
            break
          }
          case 'defer': {
            // Not sure but ignore for now. Defer to later ;)
            if (!short && reportLevel === 'defer') {
              addAlert(
                artifact,
                violations,
                fold,
                ecosystem,
                pkgName,
                version,
                alert,
                action
              )
            }
            break
          }
        }
      })
    })
  }
  spinner?.successAndStop(`Generated reported in ${Date.now() - now} ms`)
  const report = short
    ? {
        healthy
      }
    : {
        healthy,
        orgSlug,
        scanId,
        options: {
          fold,
          reportLevel
        },
        alerts: violations
      }
  return report
}
function createLeaf(art, alert, policyAction) {
  const leaf = {
    type: alert.type,
    policy: policyAction,
    url: `https://socket.dev/${art.type}/package/${art.name}/${art.version}`,
    manifest: art.manifestFiles?.map(obj => obj.file) ?? []
  }
  return leaf
}
function addAlert(
  art,
  violations,
  foldSetting,
  ecosystem,
  pkgName,
  version,
  alert,
  policyAction
) {
  if (!violations.has(ecosystem)) {
    violations.set(ecosystem, new Map())
  }
  const ecomap = violations.get(ecosystem)
  if (foldSetting === 'pkg') {
    const existing = ecomap.get(pkgName)
    if (!existing || isStricterPolicy(existing.policy, policyAction)) {
      ecomap.set(pkgName, createLeaf(art, alert, policyAction))
    }
  } else {
    if (!ecomap.has(pkgName)) {
      ecomap.set(pkgName, new Map())
    }
    const pkgmap = ecomap.get(pkgName)
    if (foldSetting === 'version') {
      const existing = pkgmap.get(version)
      if (!existing || isStricterPolicy(existing.policy, policyAction)) {
        pkgmap.set(version, createLeaf(art, alert, policyAction))
      }
    } else {
      if (!pkgmap.has(version)) {
        pkgmap.set(version, new Map())
      }
      const file = alert.file || '<unknown>'
      const vermap = pkgmap.get(version)
      if (foldSetting === 'file') {
        const existing = vermap.get(file)
        if (!existing || isStricterPolicy(existing.policy, policyAction)) {
          vermap.set(file, createLeaf(art, alert, policyAction))
        }
      } else {
        if (!vermap.has(file)) {
          vermap.set(file, new Map())
        }
        const key = `${alert.type} at ${alert.start}:${alert.end}`
        const filemap = vermap.get(file)
        const existing = filemap.get(key)
        if (!existing || isStricterPolicy(existing.policy, policyAction)) {
          filemap.set(key, createLeaf(art, alert, policyAction))
        }
      }
    }
  }
}
function isStricterPolicy(was, is) {
  // error > warn > monitor > ignore > defer > {unknown}
  if (was === 'error') {
    return false
  }
  if (is === 'error') {
    return true
  }
  if (was === 'warn') {
    return false
  }
  if (is === 'warn') {
    return false
  }
  if (was === 'monitor') {
    return false
  }
  if (is === 'monitor') {
    return false
  }
  if (was === 'ignore') {
    return false
  }
  if (is === 'ignore') {
    return false
  }
  if (was === 'defer') {
    return false
  }
  if (is === 'defer') {
    return false
  }
  // unreachable?
  return false
}

/**
 * Convert a Map<string, Map|string> to a nested object of similar shape.
 * The goal is to serialize it with JSON.stringify, which Map can't do.
 */
function mapToObject(map) {
  return Object.fromEntries(
    Array.from(map.entries()).map(([k, v]) => [
      k,
      v instanceof Map ? mapToObject(v) : v
    ])
  )
}

function* walkNestedMap(map, keys = []) {
  for (const [key, value] of map.entries()) {
    if (value instanceof Map) {
      yield* walkNestedMap(value, keys.concat(key))
    } else {
      yield {
        keys: keys.concat(key),
        value: value
      }
    }
  }
}

async function outputScanReport(
  scan,
  securityPolicy,
  {
    filePath,
    fold,
    includeLicensePolicy,
    orgSlug,
    outputKind,
    reportLevel,
    scanId,
    short
  }
) {
  const scanReport = generateReport(scan, securityPolicy, {
    orgSlug,
    scanId,
    fold,
    reportLevel,
    short,
    // Lazily access constants.spinner.
    spinner: constants.spinner
  })
  if (!scanReport.healthy) {
    process.exitCode = 1
  }
  if (
    outputKind === 'json' ||
    (outputKind === 'text' && filePath && filePath.endsWith('.json'))
  ) {
    const json = short
      ? JSON.stringify(scanReport)
      : toJsonReport(scanReport, includeLicensePolicy)
    if (filePath !== '-') {
      logger.logger.log('Writing json report to', filePath)
      return await fs.writeFile(filePath, json)
    }
    logger.logger.log(json)
    return
  }
  if (outputKind === 'markdown' || filePath.endsWith('.md')) {
    const md = short
      ? `healthy = ${scanReport.healthy}`
      : toMarkdownReport(scanReport, includeLicensePolicy)
    if (filePath !== '-') {
      logger.logger.log('Writing markdown report to', filePath)
      return await fs.writeFile(filePath, md)
    }
    logger.logger.log(md)
    return
  }
  if (short) {
    logger.logger.log(scanReport.healthy ? 'OK' : 'ERR')
  } else {
    logger.logger.dir(scanReport, {
      depth: null
    })
  }
}
function toJsonReport(report, includeLicensePolicy) {
  const obj = mapToObject(report.alerts)
  const json = JSON.stringify(
    {
      includeLicensePolicy,
      ...report,
      alerts: obj
    },
    null,
    2
  )
  return json
}
function toMarkdownReport(report, includeLicensePolicy) {
  const flatData = Array.from(walkNestedMap(report.alerts)).map(
    ({ keys, value }) => {
      const { manifest, policy, type, url } = value
      return {
        'Alert Type': type,
        Package: keys[1] || '<unknown>',
        'Introduced by': keys[2] || '<unknown>',
        url,
        'Manifest file': manifest.join(', '),
        Policy: policy
      }
    }
  )
  const md =
    `
# Scan Policy Report

This report tells you whether the results of a Socket scan results violate the
security${includeLicensePolicy ? ' or license' : ''} policy set by your organization.

## Health status

${report.healthy ? `The scan *PASSES* all requirements set by your security${includeLicensePolicy ? ' and license' : ''} policy.` : 'The scan *VIOLATES* one or more policies set to the "error" level.'}

## Settings

Configuration used to generate this report:

- Organization: ${report.orgSlug}
- Scan ID: ${report.scanId}
- Alert folding: ${report.options.fold === 'none' ? 'none' : `up to ${report.options.fold}`}
- Minimal policy level for alert to be included in report: ${report.options.reportLevel === 'defer' ? 'everything' : report.options.reportLevel}
- Include license alerts: ${includeLicensePolicy ? 'yes' : 'no'}

## Alerts

${report.alerts.size ? `All the alerts from the scan with a policy set to at least "${report.options.reportLevel}"}.` : `The scan contained no alerts for with a policy set to at least "${report.options.reportLevel}".`}

${!report.alerts.size ? '' : mdTable(flatData, ['Policy', 'Alert Type', 'Package', 'Introduced by', 'url', 'Manifest file'])}
  `.trim() + '\n'
  return md
}

async function handleScanReport({
  filePath,
  fold,
  includeLicensePolicy,
  orgSlug,
  outputKind,
  reportLevel,
  scanId,
  short
}) {
  const { ok, scan, securityPolicy } = await fetchReportData(
    orgSlug,
    scanId,
    includeLicensePolicy
  )
  if (!ok) {
    return
  }
  await outputScanReport(scan, securityPolicy, {
    filePath,
    fold,
    scanId: scanId,
    includeLicensePolicy,
    orgSlug,
    outputKind,
    reportLevel,
    short
  })
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$3 } = constants
const config$3 = {
  commandName: 'report',
  description:
    'Check whether a scan result passes the organizational policies (security, license)',
  hidden: false,
  flags: {
    ...commonFlags,
    ...outputFlags,
    fold: {
      type: 'string',
      default: 'none',
      description: 'Fold reported alerts to some degree'
    },
    reportLevel: {
      type: 'string',
      default: 'warn',
      description: 'Which policy level alerts should be reported'
    },
    short: {
      type: 'boolean',
      default: false,
      description: 'Report only the healthy status'
    },
    license: {
      type: 'boolean',
      default: false,
      description: 'Also report the license policy status. Default: false'
    }
  },
  help: (command, config) => `
    Usage
      $ ${command} <org slug> <scan ID> [path to output file]

    API Token Requirements
      - Quota: 2 units
      - Permissions: full-scans:list security-policy:read

    Options
      ${getFlagListOutput(config.flags, 6)}

    By default the result is a nested object that looks like this:
      \`{[ecosystem]: {[pkgName]: {[version]: {[file]: {[type:loc]: policy}}}}\`
    You can fold this up to given level: 'pkg', 'version', 'file', and 'none'.

    By default only the warn and error policy level alerts are reported. You can
    override this and request more ('defer' < 'ignore' < 'monitor' < 'warn' < 'error')

    Short responses: JSON: \`{healthy:bool}\`, markdown: \`healthy = bool\`, text: \`OK/ERR\`

    Examples
      $ ${command} FakeOrg 000aaaa1-0000-0a0a-00a0-00a0000000a0 --json --fold=version
      $ ${command} FakeOrg 000aaaa1-0000-0a0a-00a0-00a0000000a0 --license --markdown --short
  `
}
const cmdScanReport = {
  description: config$3.description,
  hidden: config$3.hidden,
  run: run$3
}
async function run$3(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$3,
    importMeta,
    parentName
  })
  const {
    fold = 'none',
    json,
    license,
    markdown,
    reportLevel = 'warn'
  } = cli.flags
  const defaultOrgSlug = shadowNpmInject.getConfigValue('defaultOrg')
  const orgSlug = defaultOrgSlug || cli.input[0] || ''
  const scanId = (defaultOrgSlug ? cli.input[0] : cli.input[1]) || ''
  const file = (defaultOrgSlug ? cli.input[1] : cli.input[2]) || '-'
  const apiToken = shadowNpmInject.getDefaultToken()
  const wasBadInput = handleBadInput(
    {
      nook: true,
      test: orgSlug,
      message: 'Org name as the first argument',
      pass: 'ok',
      fail: 'missing'
    },
    {
      test: scanId,
      message: 'Scan ID to fetch',
      pass: 'ok',
      fail: 'missing'
    },
    {
      nook: true,
      test: !json || !markdown,
      message: 'The json and markdown flags cannot be both set, pick one',
      pass: 'ok',
      fail: 'omit one'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$3)
    return
  }
  await handleScanReport({
    orgSlug,
    scanId: scanId,
    includeLicensePolicy: !!license,
    outputKind: json ? 'json' : markdown ? 'markdown' : 'text',
    filePath: file,
    fold: fold,
    short: !!cli.flags['short'],
    reportLevel: reportLevel
  })
}

async function fetchScan(orgSlug, scanId) {
  const apiToken = shadowNpmInject.getDefaultToken()
  if (!apiToken) {
    throw new shadowNpmInject.AuthError(
      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'
    )
  }

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Fetching scan data...')
  const response = await queryApi(
    `orgs/${orgSlug}/full-scans/${encodeURIComponent(scanId)}`,
    apiToken
  )
  spinner.successAndStop('Received response while fetching scan data.')
  if (!response.ok) {
    const err = await handleApiError(response.status)
    logger.logger.fail(
      failMsgWithBadge(response.statusText, `Fetch error: ${err}`)
    )
    return
  }

  // This is nd-json; each line is a json object
  const jsons = await response.text()
  const lines = jsons.split('\n').filter(Boolean)
  const data = lines.map(line => {
    try {
      return JSON.parse(line)
    } catch {
      console.error(
        'At least one line item was returned that could not be parsed as JSON...'
      )
      return {}
    }
  })
  return data
}

async function outputScanView(artifacts, orgSlug, scanId, filePath) {
  const display = artifacts.map(art => {
    const author = Array.isArray(art.author)
      ? `${art.author[0]}${art.author.length > 1 ? ' et.al.' : ''}`
      : art.author
    return {
      type: art.type,
      name: art.name,
      version: art.version,
      author,
      score: JSON.stringify(art.score)
    }
  })
  const md = mdTable(display, ['type', 'version', 'name', 'author', 'score'])
  const report =
    `
# Scan Details

These are the artifacts and their scores found.

Scan ID: ${scanId}

${md}

View this report at: https://socket.dev/dashboard/org/${orgSlug}/sbom/${scanId}
  `.trim() + '\n'
  if (filePath !== '-') {
    try {
      await fs.writeFile(filePath, report, 'utf8')
      logger.logger.log(`Data successfully written to ${filePath}`)
    } catch (e) {
      process.exitCode = 1
      logger.logger.fail('There was an error trying to write the json to disk')
      logger.logger.error(e)
    }
  } else {
    logger.logger.log(report)
  }
}

async function handleScanView(orgSlug, scanId, filePath) {
  const data = await fetchScan(orgSlug, scanId)
  if (!data) {
    return
  }
  await outputScanView(data, orgSlug, scanId, filePath)
}

async function streamScan(orgSlug, scanId, file) {
  // Lazily access constants.spinner.
  const { spinner } = constants
  const sockSdk = await shadowNpmInject.setupSdk()
  spinner.start('Fetching scan...')
  const data = await handleApiCall(
    sockSdk.getOrgFullScan(orgSlug, scanId, file === '-' ? undefined : file),
    'Fetching a scan'
  )
  spinner.successAndStop(`Full scan details written to ${file}`)
  if (!data?.success) {
    handleUnsuccessfulApiResponse('getOrgFullScan', data)
  }
  return data
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$2 } = constants
const config$2 = {
  commandName: 'view',
  description: 'View the raw results of a scan',
  hidden: false,
  flags: {
    ...commonFlags,
    ...outputFlags
  },
  help: (command, config) => `
    Usage
      $ ${command} <org slug> <scan ID> [path to output file]

    API Token Requirements
      - Quota: 1 unit
      - Permissions: full-scans:list

    When no output path is given the contents is sent to stdout.

    Options
      ${getFlagListOutput(config.flags, 6)}

    Examples
      $ ${command} FakeOrg 000aaaa1-0000-0a0a-00a0-00a0000000a0 ./stream.txt
  `
}
const cmdScanView = {
  description: config$2.description,
  hidden: config$2.hidden,
  run: run$2
}
async function run$2(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$2,
    importMeta,
    parentName
  })
  const { json, markdown } = cli.flags
  const defaultOrgSlug = shadowNpmInject.getConfigValue('defaultOrg')
  const orgSlug = defaultOrgSlug || cli.input[0] || ''
  const scanId = (defaultOrgSlug ? cli.input[0] : cli.input[1]) || ''
  const file = (defaultOrgSlug ? cli.input[1] : cli.input[2]) || '-'
  const apiToken = shadowNpmInject.getDefaultToken()
  const wasBadInput = handleBadInput(
    {
      nook: true,
      test: orgSlug,
      message: 'Org name as the first argument',
      pass: 'ok',
      fail: 'missing'
    },
    {
      test: scanId,
      message: 'Scan ID to delete',
      pass: 'ok',
      fail: 'missing'
    },
    {
      nook: true,
      test: !json || !markdown,
      message:
        'The `--json` and `--markdown` flags can not be used at the same time',
      pass: 'ok',
      fail: 'bad'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$2)
    return
  }
  if (json) {
    await streamScan(orgSlug, scanId, file)
  } else {
    await handleScanView(orgSlug, scanId, file)
  }
}

const description = 'Scan related commands'
const cmdScan = {
  description,
  async run(argv, importMeta, { parentName }) {
    await meowWithSubcommands(
      {
        create: cmdScanCreate,
        list: cmdScanList,
        del: cmdScanDel,
        metadata: cmdScanMetadata,
        report: cmdScanReport,
        view: cmdScanView
      },
      {
        aliases: {
          // Backwards compat. TODO: Drop next major bump
          stream: {
            description: cmdScanView.description,
            hidden: true,
            argv: ['view'] // Original args will be appended (!)
          }
        },
        argv,
        description,
        importMeta,
        name: parentName + ' scan'
      }
    )
  }
}

async function fetchThreatFeed({
  direction,
  ecosystem,
  filter,
  page,
  perPage
}) {
  const queryParams = new URLSearchParams([
    ['direction', direction],
    ['ecosystem', ecosystem],
    ['filter', filter],
    ['page', page],
    ['per_page', String(perPage)]
  ])
  const apiToken = shadowNpmInject.getDefaultToken()
  if (!apiToken) {
    throw new shadowNpmInject.AuthError(
      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'
    )
  }

  // Lazily access constants.spinner.
  const { spinner } = constants
  spinner.start('Fetching Threat Feed data...')
  const response = await queryApi(`threat-feed?${queryParams}`, apiToken)
  spinner.successAndStop('Received response while fetching Threat Feed data.')
  const data = await response.json()
  return data
}

async function outputThreatFeed(data, { outputKind }) {
  if (outputKind === 'json') {
    logger.logger.log(data)
    return
  }
  if (!data?.results?.length) {
    logger.logger.error('Did not receive any data to display...')
    return
  }
  const formattedOutput = formatResults(data.results)
  const descriptions = data.results.map(d => d.description)

  // Note: this temporarily takes over the terminal (just like `man` does).
  const ScreenWidget = _socketInterop(require('blessed/lib/widgets/screen'))
  const screen = new ScreenWidget()
  // Register these keys first so you can always exit, even when it gets stuck
  // If we don't do this and the code crashes, the user must hard-kill the
  // node process just to exit it. That's very bad UX.
  // eslint-disable-next-line n/no-process-exit
  screen.key(['escape', 'q', 'C-c'], () => process.exit(0))
  const TableWidget = _socketInterop(
    require('blessed-contrib/lib/widget/table')
  )
  const table = new TableWidget({
    keys: 'true',
    fg: 'white',
    selectedFg: 'white',
    selectedBg: 'magenta',
    interactive: 'true',
    label: 'Threat feed',
    width: '100%',
    height: '70%',
    // Changed from 100% to 70%
    border: {
      type: 'line',
      fg: 'cyan'
    },
    columnWidth: [10, 30, 20, 18, 15, 200],
    // TODO: the truncation doesn't seem to work too well yet but when we add
    //       `pad` alignment fails, when we extend columnSpacing alignment fails
    columnSpacing: 1,
    truncate: '_'
  })

  // Create details box at the bottom
  const BoxWidget = _socketInterop(require('blessed/lib/widgets/box'))
  const detailsBox = new BoxWidget({
    bottom: 0,
    height: '30%',
    width: '100%',
    border: {
      type: 'line',
      fg: 'cyan'
    },
    label: 'Details',
    content:
      'Use arrow keys to navigate. Press Enter to select a threat. Press q to exit.',
    style: {
      fg: 'white'
    }
  })
  table.setData({
    headers: [
      ' Ecosystem',
      ' Name',
      '  Version',
      '  Threat type',
      '  Detected at',
      ' Details'
    ],
    data: formattedOutput
  })

  // allow control the table with the keyboard
  table.focus()
  screen.append(table)
  screen.append(detailsBox)

  // Update details box when selection changes
  table.rows.on('select item', () => {
    const selectedIndex = table.rows.selected
    if (selectedIndex !== undefined && selectedIndex >= 0) {
      const selectedRow = formattedOutput[selectedIndex]
      if (selectedRow) {
        // Note: the spacing works around issues with the table; it refuses to pad!
        detailsBox.setContent(
          `Ecosystem: ${selectedRow[0]}\n` +
            `Name: ${selectedRow[1]}\n` +
            `Version:${selectedRow[2]}\n` +
            `Threat type:${selectedRow[3]}\n` +
            `Detected at:${selectedRow[4]}\n` +
            `Details: ${selectedRow[5]}\n` +
            `Description: ${descriptions[selectedIndex]}`
        )
        screen.render()
      }
    }
  })
  screen.render()
  screen.key(['return'], () => {
    const selectedIndex = table.rows.selected
    screen.destroy()
    const selectedRow = formattedOutput[selectedIndex]
    logger.logger.log('Last selection:\n', selectedRow)
  })
}
function formatResults(data) {
  return data.map(d => {
    const ecosystem = d.purl.split('pkg:')[1].split('/')[0]
    const name = d.purl.split('/')[1].split('@')[0]
    const version = d.purl.split('@')[1]
    const timeDiff = msAtHome(d.createdAt)

    // Note: the spacing works around issues with the table; it refuses to pad!
    return [
      ecosystem,
      decodeURIComponent(name),
      ` ${version}`,
      ` ${d.threatType}`,
      ` ${timeDiff}`,
      d.locationHtmlUrl
    ]
  })
}
function msAtHome(isoTimeStamp) {
  const timeStart = Date.parse(isoTimeStamp)
  const timeEnd = Date.now()
  const rtf = new Intl.RelativeTimeFormat('en', {
    numeric: 'always',
    style: 'short'
  })
  const delta = timeEnd - timeStart
  if (delta < 60 * 60 * 1000) {
    return rtf.format(-Math.round(delta / (60 * 1000)), 'minute')
    // return Math.round(delta / (60 * 1000)) + ' min ago'
  } else if (delta < 24 * 60 * 60 * 1000) {
    return rtf.format(-(delta / (60 * 60 * 1000)).toFixed(1), 'hour')
    // return (delta / (60 * 60 * 1000)).toFixed(1) + ' hr ago'
  } else if (delta < 7 * 24 * 60 * 60 * 1000) {
    return rtf.format(-(delta / (24 * 60 * 60 * 1000)).toFixed(1), 'day')
    // return (delta / (24 * 60 * 60 * 1000)).toFixed(1) + ' day ago'
  } else {
    return isoTimeStamp.slice(0, 10)
  }
}

async function handleThreatFeed({
  direction,
  ecosystem,
  filter,
  outputKind,
  page,
  perPage
}) {
  const data = await fetchThreatFeed({
    direction,
    ecosystem,
    filter,
    page,
    perPage
  })
  if (!data) {
    return
  }
  if ('error' in data && data.error) {
    logger.logger.fail(failMsgWithBadge('Server Error', data.error.message))
    return
  }
  await outputThreatFeed(data, {
    outputKind
  })
}

const { DRY_RUN_BAIL_TEXT: DRY_RUN_BAIL_TEXT$1 } = constants
const config$1 = {
  commandName: 'threat-feed',
  description: '[beta] View the threat feed',
  hidden: false,
  flags: {
    ...commonFlags,
    ...outputFlags,
    perPage: {
      type: 'number',
      shortFlag: 'pp',
      default: 30,
      description: 'Number of items per page'
    },
    page: {
      type: 'string',
      shortFlag: 'p',
      default: '1',
      description: 'Page token'
    },
    direction: {
      type: 'string',
      shortFlag: 'd',
      default: 'desc',
      description: 'Order asc or desc by the createdAt attribute'
    },
    eco: {
      type: 'string',
      shortFlag: 'e',
      default: '',
      description: 'Only show threats for a particular ecosystem'
    },
    filter: {
      type: 'string',
      shortFlag: 'f',
      default: 'mal',
      description: 'Filter what type of threats to return'
    }
  },
  help: (command, config) => `
    Usage
      $ ${command}

    API Token Requirements
      - Quota: 1 unit
      - Permissions: threat-feed:list
      - Special access

    This feature requires a Threat Feed license. Please contact
    sales@socket.dev if you are interested in purchasing this access.

    Options
      ${getFlagListOutput(config.flags, 6)}

    Valid filters:

      - anom    Anomaly
      - c       Do not filter
      - fp      False Positives
      - joke    Joke / Fake
      - mal     Malware and Possible Malware [default]
      - secret  Secrets
      - spy     Telemetry
      - tp      False Positives and Unreviewed
      - typo    Typo-squat
      - u       Unreviewed
      - vuln    Vulnerability

    Valid ecosystems:

      - gem
      - golang
      - maven
      - npm
      - nuget
      - pypi

    Examples
      $ ${command}
      $ ${command} --perPage=5 --page=2 --direction=asc --filter=joke
  `
}
const cmdThreatFeed = {
  description: config$1.description,
  hidden: config$1.hidden,
  run: run$1
}
async function run$1(argv, importMeta, { parentName }) {
  const cli = meowOrExit({
    argv,
    config: config$1,
    importMeta,
    parentName
  })
  const { json, markdown } = cli.flags
  const defaultOrgSlug = shadowNpmInject.getConfigValue('defaultOrg')
  const orgSlug = defaultOrgSlug || cli.input[0] || ''
  const apiToken = shadowNpmInject.getDefaultToken()
  const wasBadInput = handleBadInput(
    {
      nook: true,
      test: orgSlug,
      message: 'Org name as the first argument',
      pass: 'ok',
      fail: 'missing'
    },
    {
      nook: true,
      test: !json || !markdown,
      message: 'The json and markdown flags cannot be both set, pick one',
      pass: 'ok',
      fail: 'omit one'
    },
    {
      nook: true,
      test: apiToken,
      message:
        'You need to be logged in to use this command. See `socket login`.',
      pass: 'ok',
      fail: 'missing API token'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT$1)
    return
  }
  await handleThreatFeed({
    direction: String(cli.flags['direction'] || 'desc'),
    ecosystem: String(cli.flags['eco'] || ''),
    filter: String(cli.flags['filter'] || 'mal'),
    outputKind: json ? 'json' : markdown ? 'markdown' : 'text',
    page: String(cli.flags['page'] || '1'),
    perPage: Number(cli.flags['perPage']) || 30
  })
}

function addSocketWrapper(file) {
  return fs$1.appendFile(
    file,
    'alias npm="socket npm"\nalias npx="socket npx"\n',
    err => {
      if (err) {
        return new Error(`There was an error setting up the alias: ${err}`)
      }
      // TODO: pretty sure you need to source the file or restart
      //       any terminal session before changes are reflected.
      logger.logger.log(commonTags.stripIndents`
The alias was added to ${file}. Running 'npm install' will now be wrapped in Socket's "safe npm" 🎉
If you want to disable it at any time, run \`socket wrapper --disable\`
`)
    }
  )
}

function checkSocketWrapperSetup(file) {
  const fileContent = fs$1.readFileSync(file, 'utf8')
  const linesWithSocketAlias = fileContent
    .split('\n')
    .filter(
      l => l === 'alias npm="socket npm"' || l === 'alias npx="socket npx"'
    )
  if (linesWithSocketAlias.length) {
    logger.logger.log(
      `The Socket npm/npx wrapper is set up in your bash profile (${file})`
    )
    return true
  }
  return false
}

async function postinstallWrapper() {
  // Lazily access constants.bashRcPath and constants.zshRcPath.
  const { bashRcPath, zshRcPath } = constants
  const socketWrapperEnabled =
    (fs$1.existsSync(bashRcPath) && checkSocketWrapperSetup(bashRcPath)) ||
    (fs$1.existsSync(zshRcPath) && checkSocketWrapperSetup(zshRcPath))
  if (!socketWrapperEnabled) {
    await installSafeNpm(commonTags.stripIndents`
      The Socket CLI is now successfully installed! 🎉

      To better protect yourself against supply-chain attacks, our "safe npm" wrapper can warn you about malicious packages whenever you run 'npm install'.

      Do you want to install "safe npm" (this will create an alias to the socket-npm command)?`)
  }
}
async function installSafeNpm(query) {
  logger.logger.log(`
 _____         _       _
|   __|___ ___| |_ ___| |_
|__   | . |  _| '_| -_|  _|
|_____|___|___|_,_|___|_|

`)
  if (
    await prompts.confirm({
      message: query,
      default: true
    })
  ) {
    // Lazily access constants.bashRcPath and constants.zshRcPath.
    const { bashRcPath, zshRcPath } = constants
    try {
      if (fs$1.existsSync(bashRcPath)) {
        addSocketWrapper(bashRcPath)
      }
      if (fs$1.existsSync(zshRcPath)) {
        addSocketWrapper(zshRcPath)
      }
    } catch (e) {
      throw new Error(
        `There was an issue setting up the alias: ${e?.['message']}`
      )
    }
  }
}

function removeSocketWrapper(file) {
  return fs$1.readFile(file, 'utf8', function (err, data) {
    if (err) {
      logger.logger.fail('There was an error removing the alias:')
      logger.logger.error(err)
      return
    }
    const linesWithoutSocketAlias = data
      .split('\n')
      .filter(
        l => l !== 'alias npm="socket npm"' && l !== 'alias npx="socket npx"'
      )
    const updatedFileContent = linesWithoutSocketAlias.join('\n')
    fs$1.writeFile(file, updatedFileContent, function (err) {
      if (err) {
        logger.logger.error(err)
        return
      }
      // TODO: pretty sure you need to source the file or restart
      //       any terminal session before changes are reflected.
      logger.logger.log(
        `The alias was removed from ${file}. Running 'npm install' will now run the standard npm command.`
      )
    })
  })
}

const { DRY_RUN_BAIL_TEXT } = constants
const config = {
  commandName: 'wrapper',
  description: 'Enable or disable the Socket npm/npx wrapper',
  hidden: false,
  flags: {
    ...commonFlags,
    enable: {
      type: 'boolean',
      default: false,
      description: 'Enables the Socket npm/npx wrapper'
    },
    disable: {
      type: 'boolean',
      default: false,
      description: 'Disables the Socket npm/npx wrapper'
    }
  },
  help: (command, config) => `
    Usage
      $ ${command} <flag>

    Options
      ${getFlagListOutput(config.flags, 6)}

    Examples
      $ ${command} --enable
      $ ${command} --disable
  `
}
const cmdWrapper = {
  description: config.description,
  hidden: config.hidden,
  run
}
async function run(argv, importMeta, { parentName }) {
  // I don't think meow would mess with this but ...
  if (argv[0] === '--postinstall') {
    await postinstallWrapper()
    return
  }
  const cli = meowOrExit({
    argv,
    config,
    importMeta,
    parentName
  })
  const { disable, enable } = cli.flags
  const wasBadInput = handleBadInput(
    {
      test: enable || disable,
      message: 'Must use --enabled or --disable',
      pass: 'ok',
      fail: 'missing'
    },
    {
      nook: true,
      test: !enable || !disable,
      message: 'Do not use both --enable and --disable',
      pass: 'ok',
      fail: 'missing'
    }
  )
  if (wasBadInput) {
    return
  }
  if (cli.flags['dryRun']) {
    logger.logger.log(DRY_RUN_BAIL_TEXT)
    return
  }

  // Lazily access constants.bashRcPath and constants.zshRcPath.
  const { bashRcPath, zshRcPath } = constants
  if (enable) {
    if (fs$1.existsSync(bashRcPath) && !checkSocketWrapperSetup(bashRcPath)) {
      addSocketWrapper(bashRcPath)
    }
    if (fs$1.existsSync(zshRcPath) && !checkSocketWrapperSetup(zshRcPath)) {
      addSocketWrapper(zshRcPath)
    }
  } else {
    if (fs$1.existsSync(bashRcPath)) {
      removeSocketWrapper(bashRcPath)
    }
    if (fs$1.existsSync(zshRcPath)) {
      removeSocketWrapper(zshRcPath)
    }
  }
  if (!fs$1.existsSync(bashRcPath) && !fs$1.existsSync(zshRcPath)) {
    logger.logger.fail(
      'There was an issue setting up the alias in your bash profile'
    )
  }
}

const { SOCKET_CLI_BIN_NAME } = constants

// TODO: Add autocompletion using https://socket.dev/npm/package/omelette
void (async () => {
  await updateNotifier({
    name: SOCKET_CLI_BIN_NAME,
    // The '@rollup/plugin-replace' will replace "process.env['INLINED_SOCKET_CLI_VERSION']".
    version: '0.14.77',
    ttl: 86_400_000 /* 24 hours in milliseconds */
  })
  try {
    await meowWithSubcommands(
      {
        cdxgen: cmdCdxgen,
        config: cmdConfig,
        fix: cmdFix,
        info: cmdInfo,
        login: cmdLogin,
        logout: cmdLogout,
        npm: cmdNpm,
        npx: cmdNpx,
        oops: cmdOops,
        optimize: cmdOptimize,
        organization: cmdOrganization,
        package: cmdPackage,
        'raw-npm': cmdRawNpm,
        'raw-npx': cmdRawNpx,
        report: cmdReport,
        wrapper: cmdWrapper,
        scan: cmdScan,
        'audit-log': cmdAuditLog,
        repos: cmdRepos,
        dependencies: cmdScanCreate$1,
        analytics: cmdAnalytics,
        'diff-scan': cmdDiffScan,
        'threat-feed': cmdThreatFeed,
        manifest: cmdManifest
      },
      {
        aliases: {
          ci: {
            description: 'Alias for "report create --view --strict"',
            argv: ['report', 'create', '--view', '--strict']
          }
        },
        argv: process$1.argv.slice(2),
        name: SOCKET_CLI_BIN_NAME,
        importMeta: {
          url: `${node_url.pathToFileURL(__filename)}`
        }
      }
    )
  } catch (e) {
    process$1.exitCode = 1
    let errorBody
    let errorTitle
    let errorMessage = ''
    if (e instanceof shadowNpmInject.AuthError) {
      errorTitle = 'Authentication error'
      errorMessage = e.message
    } else if (e instanceof shadowNpmInject.InputError) {
      errorTitle = 'Invalid input'
      errorMessage = e.message
      errorBody = e.body
    } else if (e instanceof Error) {
      errorTitle = 'Unexpected error'
      errorMessage = ponyCause.messageWithCauses(e)
      errorBody = ponyCause.stackWithCauses(e)
    } else {
      errorTitle = 'Unexpected error with no details'
    }
    logger.logger.fail(failMsgWithBadge(errorTitle, errorMessage))
    if (errorBody) {
      logger.logger.error(`\n${errorBody}`)
    }
    await shadowNpmInject.captureException(e)
  }
})()
//# debugId=c8920518-ecaf-443d-93ff-0b79e218f5c4
//# sourceMappingURL=cli.js.map
