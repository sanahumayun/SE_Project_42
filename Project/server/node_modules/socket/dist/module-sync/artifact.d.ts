import { Remap } from '@socketsecurity/registry/lib/objects'
import { components, operations } from '@socketsecurity/sdk/types/api'
type ALERT_TYPE = keyof NonNullable<
  operations['getOrgSecurityPolicy']['responses']['200']['content']['application/json']['securityPolicyRules']
>
type CVE_ALERT_TYPE = 'cve' | 'mediumCVE' | 'mildCVE' | 'criticalCVE'
type ArtifactAlertCve = Remap<
  Omit<CompactSocketArtifactAlert, 'type'> & {
    type: CVE_ALERT_TYPE
  }
>
type ArtifactAlertCveFixable = Remap<
  Omit<CompactSocketArtifactAlert, 'props' | 'type'> & {
    type: CVE_ALERT_TYPE
    props: {
      firstPatchedVersionIdentifier: string
      vulnerableVersionRange: string
      [key: string]: any
    }
  }
>
type ArtifactAlertUpgrade = Remap<
  Omit<CompactSocketArtifactAlert, 'type'> & {
    type: 'socketUpgradeAvailable'
  }
>
type CompactSocketArtifactAlert = Remap<
  Omit<SocketArtifactAlert, 'category' | 'end' | 'file' | 'start'>
>
type CompactSocketArtifact = Remap<
  Omit<SocketArtifact, 'alerts' | 'batchIndex' | 'size'> & {
    alerts: CompactSocketArtifactAlert[]
  }
>
type SocketArtifact = Remap<
  Omit<components['schemas']['SocketArtifact'], 'alerts'> & {
    alerts?: SocketArtifactAlert[]
  }
>
type SocketArtifactAlert = Remap<
  Omit<components['schemas']['SocketAlert'], 'action' | 'props' | 'type'> & {
    type: ALERT_TYPE
    action?: 'error' | 'monitor' | 'warn' | 'ignore'
    props?: any | undefined
  }
>
declare function isArtifactAlertCve(
  alert: CompactSocketArtifactAlert
): alert is ArtifactAlertCve
export {
  ALERT_TYPE,
  CVE_ALERT_TYPE,
  ArtifactAlertCve,
  ArtifactAlertCveFixable,
  ArtifactAlertUpgrade,
  CompactSocketArtifactAlert,
  CompactSocketArtifact,
  SocketArtifact,
  SocketArtifactAlert,
  isArtifactAlertCve
}
